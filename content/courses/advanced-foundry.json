{
  "folderName": "advanced-foundry",
  "lastUpdated": "Mon Jan 15 2024 12:21:13 GMT-0500 (Eastern Standard Time)",
  "number": 0,
  "courseId": "841d2824-6665-4f1e-8352-e0dbadf62bfb",
  "slug": "advanced-foundry",
  "createdAt": "2023-12-18T15:14:18.685Z",
  "updatedAt": "2024-02-24T16:35:21.210Z",
  "title": "Advanced Foundry",
  "path": "content/learning-paths/solidity-developer.json",
  "githubUrl": "https://github.com/Cyfrin/path-solidity-developer-2023",
  "previewImg": "https://res.cloudinary.com/droqoz7lg/image/upload/v1701193477/updraft/courses/y2uthyu5atnxhhd8aar6.png",
  "duration": 13,
  "description": "Become a Foundry expert! Learn advanced techniques to develop, deploy, test, optimise and interact with your smart contract using industry standard tools used by the top smart contracts engineers in web3",
  "overview": {
    "learnings": "Foundry, stablecoins, DeFi, DAOs, advanced smart contract development, advanced smart contracts testing, fuzz testing, manual verification",
    "preRequisites": [
      "Blockchain basics",
      "Solidity fundamentals",
      "Foundry fundamentals"
    ]
  },
  "authors": [
    {
      "author": "content/authors/patrick-collins.json"
    },
    {
      "author": "content/authors/ciara-nightingale.json"
    },
    {
      "author": "content/authors/vasiliy-gualoto.json"
    },
    {
      "author": "content/authors/nader-dabit.json"
    },
    {
      "author": "content/authors/ally-haire.json"
    },
    {
      "author": "content/authors/juliette-chevalier.json"
    },
    {
      "author": "content/authors/vitto-rivabella.json"
    },
    {
      "author": "content/authors/harrison.json"
    }
  ],
  "sections": [
    {
      "sectionId": "c83165bc-da17-4714-ab4f-483cb52c5170",
      "number": 1,
      "slug": "How-to-create-an-erc20-crypto-currency",
      "title": "Develop an ERC20 Crypto Currency",
      "lessons": [
        {
          "lessonId": "c2420d11-5dcd-4f42-b26e-91e6234119b9",
          "number": 1,
          "slug": "erc-and-erc20-fundamentals",
          "title": "Introduction to ERC fundamentals and ERC20",
          "description": "Delve into the fundamentals of ERC20 tokens. Understand the critical concepts of Ethereum Improvement Proposals (EIPs) and Ethereum Request for Comments (ERCs), focusing particularly on the ERC20 Token Standard. Learn about the creation and significance of ERC20 tokens and explore notable examples.",
          "duration": 5,
          "videoUrl": "jv9up9fhEPfv2wWrK4Unv01xYQMzmPRxGQXZG72fu4zg",
          "rawMarkdownUrl": "/routes/advanced-foundry/1-erc20s/1-erc20-basics/+page.md",
          "markdownContent": "***\n\n## title: ERC20 Basics\n\n*Follow along the course with this video.*\n\n# Understanding ERC20 Tokens in Ethereum: A Comprehensive Guide\n\nWelcome back! We're about to dive deep into the fascinating world of ERC20 tokens.\n\n<img src=\"/foundry-erc20s/1-erc20-basics/erc20-basics1.PNG\" style=\"width: 100%; height: auto;\">\n\nBefore we plunge into building an ERC20 token, let's first explore what it is, and understand the concepts of EIP (Ethereum Improvement Proposals) and ERC (Ethereum Request for Comments).\n\n## What is an ERC? What is an EIP?\n\n<img src=\"/foundry-erc20s/1-erc20-basics/erc20-basics3.PNG\" style=\"width: 100%; height: auto;\">\n\nBoth Ethereum and other blockchains like Avalanche, Binance, and Polygon have mechanisms for improving their protocols, known as 'improvement proposals'. In Ethereum's ecosystem, these are called Ethereum Improvement Proposals or EIPs.\n\nDevelopers submit ideas to enhance Ethereum or other layer one protocols like Polygon, Matic or Avalanche on GitHub or other open source repositories. These improvements range from core blockchain updates to broad, best practice standards for the community to adopt.\n\n<img src=\"/foundry-erc20s/1-erc20-basics/erc20-basics5.PNG\" style=\"width: 100%; height: auto;\">\n\nIn other blockchains, these proposals and request for comments are tagged differently (for example, BEP, PEP, etc), but they contain the same types of information. Interestingly, the numbers following ERC or EIP (like in ERC20 or EIP20), are chronological and shared between the two, signifying the order in which they were introduced. For real-time updates on the process of new EIPs, check out [EIPS Ethereum.org](https://eips.ethereum.org/).\n\n## What is the ERC20 Token Standard?\n\n<img src=\"/foundry-erc20s/1-erc20-basics/erc20-basics4.png\" style=\"width: 100%; height: auto;\">\n\nAmong these EIPs and ERCs, the ERC20, or Token Standard for smart contracts, is one of the most significant. It delineates how to create tokens within smart contracts.\n\nERC20 tokens are those deployed on a blockchain using the ERC20 token standard. Essentially, it's a smart contract that represents a token - both a token and a smart contract in one. Check out the [ERC20 Token standard](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md) for a deep dive.\n\nNotable examples of ERC20 tokens include Tether, Chainlink, Uni Token, and Dai. Interestingly, while Chainlink qualifies as an ERC677, it is fully compatible with ERC20 and just offers some additional functionality.\n\n## Why Create an ERC20 Token?\n\n<img src=\"/foundry-erc20s/1-erc20-basics/erc20-basics2.PNG\" style=\"width: 100%; height: auto;\">\n\nThere are multiple applications of ERC20 tokens. They are used for governance, securing an underlying network, or creating synthetic assets, among other things.\n\n## Building an ERC20 Token\n\nHow do we go about creating an ERC20 token? Simple. By creating a smart contract that adheres to the token standard. This involves building a smart contract with certain functions, including name, symbol, decimals, etc. Also, it should be transferable and display its balance.\n\nYou can explore more advanced, ERC20 compatible tokens with improvements (such as ERC677 or ERC777), just make sure they align with your project requirements. Enjoy the process of building your ERC20 token and the new possibilities it opens up!\n",
          "updates": []
        },
        {
          "lessonId": "72b71dd8-336c-4536-8a0e-304ea4043591",
          "number": 2,
          "slug": "create-an-erc20",
          "title": "Creating an ERC20",
          "description": "This lesson guides you through the manual creation of your own ERC20 token using Solidity. It covers the setup of your development environment, initialization of your project repository, and step-by-step instructions to build and define your ERC20 token's properties and functionalities.",
          "duration": 7,
          "videoUrl": "NDCBrRF1QeTJUuCPnQLXBrjnFbt4B3KQbUYl52LpevI",
          "rawMarkdownUrl": "/routes/advanced-foundry/1-erc20s/2-erc20-manual-creation/+page.md",
          "markdownContent": "***\n\n## title: ERC20 Manual Creation\n\n*Follow along the course with this video.*\n\n***\n\n# Creating Your Own ERC20 Token in Solidity Code\n\nWelcome Back! Having covered the basics, let's look at how we can manually create our own ERC20 token.\n\n## Setting Up Your Development Environment\n\nOpen a terminal in Visual Studio Code and run the following:\n\n```sh\nmkdir foundry-erc20-f23\ncd foundry-erc20-f23\ncode .\n```\n\nThe above commands will create a new directory for our project, navigate into it, and open the directory in a new Visual Studio Code window.\n\nOnce we have Visual Studio Code running, we need to initialize a blank repository. Open up the built-in Terminal and execute the following command:\n\n```sh\nforge init\n```\n\nCompleting these steps sets up a development environment complete with a fully-equipped CI/CD pipeline courtesy of GitHub workflows for later code testing & deployment.\n\n## Getting Started With Your ERC20 Smart Contract\n\nNext, let's get down to the nitty-gritty of our project — our own ERC20 token! But first, a spring cleaning is due. Remove the sample files from the fresh repository so that you can start coding from scratch. This step is as uncomplicated and swift as a couple of clicks and keyboard strokes away!\n\nHaving cleared the playing field, it's time to layer the groundwork for our ERC20 token. To do this, we'll be referencing the ERC20 Token Standard, covering all the key methods that we need.\n\nLet's start by creating a new Solidity file named `OurToken.sol`. Right click the `src` folder in the left navigation panel and select `new File`.\n\n<img src=\"/foundry-erc20s/2-erc20-manual-creation/erc20-manual-creation1.PNG\" style=\"width: 100%; height: auto;\">\n\n## Paving the Way for Your Custom Token\n\nThe inception of our token begins with some basic instructions for the Ethereum virtual machine — where our contract code will live, breathe, and operate.\n\n```javascript\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\ncontract OurToken{}\n```\n\nThe `SPDX-License` specifies the type of license our code carries, while `pragma solidity` specifies the Solidity compiler version that our contract is compatible with.\n\nEnsuing this, we set forth to define several properties that will shape our token's identity. The ERC20 standard necessitates the definition of a `name`, `totalSupply`, and a `decimals` property. In our contract, this translates to:\n\n```javascript\n    string public name = \"OurToken\";\n    uint256 public totalSupply = 100000000000000000000;\n```\n\nThe decimals property signifies the number of decimal points that can be used in our token. Given that the Ethereum network operates in Wei (the smallest denomination of Ether), it's a good practice to use 18 decimal places for interoperability with other token contracts.\n\n```javascript\n    uint8 public decimals = 18;\n```\n\nReaching this stage of our token creation, our contract should look something like this:\n\n```javascript\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ncontract OurToken{\n    string public name = \"OurToken\";\n    uint256 public totalSupply = 100000000000000000000;\n    uint8 public decimals = 18;\n\n}\n```\n\n## Building the Internal Structure for Our Token\n\nOur token also needs some internal structure and mechanisms to function, chiefly, a way to track balances of all the users interacting with it.\n\nFirst, we use a Solidity mapping data structure to connect user addresses with their token balances. This balance tracking mapping looks like:\n\n```javascript\n    mapping (address => uint256) private _balances;\n```\n\nNext, we functionally implement the ability for anyone to view their current token balance via the `balanceOf` method.\n\n```javascript\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n```\n\nJuxtaposed against the backdrop of token balance mapping, the `balanceOf` method takes an account's address as input and returns the corresponding balance. This signifies that having tokens in an ERC20 simply translates to some balance in a contract's mapping.\n\n## Making the Token Transferable\n\nOur token is still a bit static. Let's bring it to life by implementing the `transfer` function which helps users send tokens to other addresses:\n\n```javascript\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        uint256 senderBalance = _balances[msg.sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[msg.sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        return true;\n    }\n```\n\nHere's what these lines of code are doing:\n\n1. Fetch the balance of the sender (the person calling this function).\n2. Use the `require` function to make sure the sender has enough tokens. If they don't, the entire function will fail.\n3. Subtract the transfer amount from the sender's balance.\n4. Add the transfer amount to the recipient's balance.\n\nWell, that's the first iteration of our token! We could go further and implement other functions like `allowance` and `transferFrom` which would make our token more versatile with better utility. But for brevity reasons, we'd leave that for another day.\n\nIn conclusion, the journey to coding your own ERC20 token isn't as daunting as it seems. With Solidity, a good text editor, and little patience, you can make your own way into the Ethereum developer community. I hope this guide leaves you better equipped in your Ethereum dev journey and evokes your interest in delving deeper into the vastly interesting world of blockchain programming. Good luck and happy coding!\n",
          "updates": []
        },
        {
          "lessonId": "9c7cfcb9-a693-4933-a006-4f046a9bdecf",
          "number": 3,
          "slug": "erc20-open-zeppelin",
          "title": "Explore Open Zeppelin",
          "description": "Explore the use of the OpenZeppelin framework for smart contract development. Learn how to leverage pre-deployed, audited, and ready-to-go contracts to simplify the creation process of your ERC20 token.",
          "duration": 4,
          "videoUrl": "esyU6xorSNYu1IcPMS9q1YYL4UQWaj2e5Z01QZ7WjVaU",
          "rawMarkdownUrl": "/routes/advanced-foundry/1-erc20s/3-erc20-open-zeppelin/+page.md",
          "markdownContent": "***\n\n## title: ERC20 Open Zeppelin\n\n*Follow along the course with this video.*\n\n***\n\n# Using Pre-Deployed, Audited, and Ready-to-Go Smart Contracts with OpenZeppelin\n\nWelcome back! Creating your own smart contracts can be a complex task. As your experience grows, you might find yourself creating similar contracts repeatedly. In such cases, wouldn't it be more convenient to use pre-deployed, audited, and ready-to-go contracts? In this section, I'll guide you on using the OpenZeppelin framework to achieve this.\n\n<img src=\"/foundry-erc20s/3-erc20-open-zeppelin/erc20-open-zeppelin2.PNG\" style=\"width: 100%; height: auto;\">\n\n## OpenZeppelin Framework\n\nAccess [OpenZeppelin's documentation](https://docs.openzeppelin.com/contracts/4.x/) via their official website. By navigating to [Products > Contracts](https://www.openzeppelin.com/contracts), you can discover a vast array of ready-to-use contracts.\n\nAdditionally, OpenZeppelin offers a contract wizard, streamlining the contract creation process — perfect for tokens, governances, or custom contracts.\n\n## Creating a New Token\n\nRather than manual implementations, let's craft a new token named 'OurToken'. Here's an outline of our token's structure:\n\n```javascript\n// OurToken.sol\nSPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ncontract OurToken {\n\n}\n```\n\n## Installing OpenZeppelin Contracts\n\nNext, we will install the OpenZeppelin contracts to our project. Navigate to their [official GitHub repository](https://github.com/OpenZeppelin/openzeppelin-contracts) and copy the repository path.\n\nIn your terminal, run the following command to install the OpenZeppelin contracts:\n\n```bash\nforge install openzeppelin/openzeppelin-contracts --no-commit\n```\n\nUpon successful installation, you'll find the OpenZeppelin contracts in your project's lib folder. Your contract library will now contain audited contracts you can readily use like the ERC20 contract.\n\n## Inheriting and Implementing Contracts\n\nAfter accessing the OpenZeppelin contracts, you can now import and inherit from them. To do this, we first need to remap the OpenZeppelin contracts in our foundry.toml file:\n\n```javascript\n[remappings] = \"@openzeppelin-contracts=lib/openzeppelin-contracts\";\n```\n\nThen, simply import and inherit from ERC20.sol in our 'OurToken.sol' file like this:\n\n```javascript\nSPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\n\ncontract OurToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20(\"OurToken\", \"OT\"){\n        _mint(msg.sender, initialSupply);\n        }\n}\n```\n\nNotice that the constructor of OurToken uses the ERC20 constructor and needs a name and a symbol. I also used the \\_mint function, provided by ERC20, to create the initial supply of tokens to the sender.\n\n## Testing That Your Contracts Compile\n\nNow, it's time to make sure things compile. To do this, run the command:\n\n```bash\nforge build\n```\n\nIf everything went smoothly, the output should indicate that your contract has been successfully compiled, something like this:\n\n<img src=\"/foundry-erc20s/3-erc20-open-zeppelin/erc20-open-zeppelin1.PNG\" style=\"width: 100%; height: auto;\">\n\n***\n\nIn summary, using pre-deployed and audited contracts like OpenZeppelin can streamline your development process when working with Smart Contracts. This approach lets you leverage proven code which reduces the risk of errors and increases your project's reliability. Don't hesitate to explore and utilize these contract libraries in your future blockchain development ventures!\n",
          "updates": []
        },
        {
          "lessonId": "7f90804e-7f7f-4818-8e9f-93f077970522",
          "number": 4,
          "slug": "erc20-deploy-script",
          "title": "Deploy your ERC20 crypto currency",
          "description": "This lesson provides a comprehensive guide on deploying your ERC20 token. It includes instructions for setting up a deployment script, using the deployment script to deploy your token, and tips for finalizing and testing the deployment process efficiently.",
          "duration": 3,
          "videoUrl": "q01Umr02SsMoZiqPlG21kTRw6ooVH00oizN00W1TU9DMPvs",
          "rawMarkdownUrl": "/routes/advanced-foundry/1-erc20s/4-erc20-deploy-script/+page.md",
          "markdownContent": "***\n\n## title: ERC20 Deploy Script\n\n*Follow along the course with this video.*\n\n# Deploying Our Token: A Step By Step Guide\n\nIf you've ever wondered how to deploy a token, and more importantly, test it and write scripts to deploy it - then you've come to the right place. Buckle up, because we're about to journey through this process. Let's get started!\n\n## Initiating the Deployment\n\n<img src=\"/foundry-erc20s/4-erc20-deploy-script/erc20-deploy-script1.png\" style=\"width: 100%; height: auto;\">\n\nTo initiate this, we're going to deploy OurToken.sol. Now, you might be asking why we don't need a helper config here - what about those special contracts that we would need to interact with? Well, this deployment is unlike any other because our token will be identical across all chains. No special contracts or config will be needed!\n\nLet's start with a simple script to keep things light and compact:\n\n```javascript\nSPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {Script} from \"forge-std/Script.sol\";\n\ncontract DeployOurToken is Script {\n\n}\n```\n\n## Creating a Function Run\n\nWe'll need to import our token like so:\n\n```javascript\nimport { Script } from \"forge-std/Script.sol\";\n```\n\nNext, let's create a function, run, that will be external. Within the run function, we’ll do `vm.startBroadcast()`. In our run function, we need to initiate the VM broadcast as shown, we'll need to give it an initial supply too, say 1000 ether. That’s right, our token needs an initial amount to start with and finally, we'll want to return OurToken, for use later:\n\n```javascript\nSPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {Script} from \"forge-std/Script.sol\";\nimport {OurToken} from \"../src/OurToken.sol\";\n\ncontract DeployOurToken is Script {\n    uint256 public constant INITIAL_SUPPLY = 1000 ether;\n\n    function run() external return(OurToken){\n        vm.startBroadcast();\n        OurToken ot = new OurToken(INITIAL_SUPPLY);\n        vm.stopBroadcast();\n\n        return ot;\n    };\n}\n\n```\n\nFollowing this, we'll deploy our token using the initial supply because, remember, our token requires an initial supply. We then stop the VM broadcast, and voila, our script is ready!\n\n## Adding the Final Touches\n\n<img src=\"/foundry-erc20s/4-erc20-deploy-script/erc20-deploy-script2.png\" style=\"width: 100%; height: auto;\">\n\nFor the final touches, we can use a nifty trick. We can borrow from our previous projects or directly from the git repo that corresponds with this tutorial. We'll generate a Makefile for this. Create this new file in your project's root directory. We'll visit foundry-erc20-f23 and just put everything into this Makefile. Guess what, we can just copy the whole thing!\n\nFind the Makefile to copy [here:](https://github.com/Cyfrin/foundry-erc20-f23/blob/main/Makefile)\n\nOnce you’ve copied over the Makefile, you can simply run the command `make deploy`. If you encounter any errors, just create a new anvil using `make anvil` and once again run `make deploy`.\n\nThe compiler should now run successfully and your token is officially deployed to your anvil chain. Congratulations, you have just deployed your token!\n\n<img src=\"/foundry-erc20s/4-erc20-deploy-script/erc20-deploy-script3.PNG\" style=\"width: 100%; height: auto;\">\n\nBy following these steps, you have simplified the process of deploying and testing a token. Who'd have thought it could be this straightforward and efficient?\n",
          "updates": []
        },
        {
          "lessonId": "180ff894-f0fb-48c9-a7f1-2e45baeabd8f",
          "number": 5,
          "slug": "erc20-ai-tests-and-recap",
          "title": "Test your ERC20 using AI",
          "description": "Master the art of writing tests for your smart contracts, incorporating Artificial Intelligence (AI) to enhance the process. This lesson focuses on using AI to generate and execute tests efficiently, offering insights into best practices and considerations when integrating AI into your testing workflow.",
          "duration": 16,
          "videoUrl": "o97DyQMQaeyQovg02NPjdyChnCL7R3BBGDQXkn701eT7s",
          "rawMarkdownUrl": "/routes/advanced-foundry/1-erc20s/5-erc20-ai-tests-and-recap/+page.md",
          "markdownContent": "***\n\n## title: AI Tests and Recap\n\n*Follow along the course with this video.*\n\n# Mastering Smart Contracts: Writing Tests and Incorporating AI\n\nAlmost done, you're doing great! In this section, we'll navigate the world of writing tests for basic contracts. This might sound dull, but twirling in some Artificial Intelligence (AI) really spices things up.\n\nRemember, in this series, as much as we encourage leveraging AI to accelerate your learning and coding, it should aid learning, not replace it entirely. The simple reason being that if AI gets it wrong - a likely occurrence given the nascent stage of current technology - you'll be utterly lost if you haven't really grasped the concepts.\n\nLet's dive into some practical examples, with a bit of humor, to illustrate. Yes, we'll also be using AI’s proficiency at writing tests to our advantage.\n\n## Laying the Foundation\n\nOur focus for the test would be `TokenTest.t.sol`, create this file in your test folder. We will start by crafting the basic structure for our testing contract. This would include SPDX license identifier, pragma solidity version, and a declaration of the contract:\n\n```javascript\nSPDX license identifier: MIT\npragma solidity ^0.8.18;\n\nimport {Test} from \"forge-std/Test.sol\";\nimport {OurToken} from \"../src/OurToken.sol\";\nimport {DeployOurToken} from \" ../script/DeployOurToken.s.sol\";\n\ncontract OurTokenTest is Test {\n\n}\n```\n\nAlso note the need to import forge's `forge-std/Test.sol` for `Test`, OurToken from `OurToken.sol` and `DeployOurToken.s.sol`'s DeployOurToken, the script we just wrote to deploy. This script handles the deployment of our Token. It's a special scenario where the script essentially 'becomes' the Token we're deploying. Subsequently, we'll define a setup method.\n\nIn our setup,we have something like:\n\n```javascript\ncontract OurTokenTest is Test {\n    OurToken public ourToken;\n    DeployOurToken public deployer;\n\n    function setup() public {\n        deployer = new DeployOurToken();\n        ourToken = deployer.run();\n    }\n}\n```\n\nWith that done, let’s add some addresses allowing interaction with people. This time, we’ll be involving Bob and Alice in the mix:\n\n```javascript\naddress bob = makeAddr(\"bob\");\naddress alice = makeAddr(\"alice\");\n```\n\nNext, we’ll simulate a transfer of Tokens to Bob from our Token owner. We'll check Bob's Token balance afterward and ensure it equals the transferred Token amount.\n\n```javascript\ncontract OurTokenTest is Test {\n    OurToken public ourToken;\n    DeployOurToken public deployer;\n\n    address bob = makeAddr(\"bob\");\n    address alice = makeAddr(\"alice\");\n\n    uint256 public constant STARTING_BALANCE = 100 ether;\n\n    function setup() public {\n        deployer = new DeployOurToken();\n        ourToken = deployer.run();\n\n        vm.prank(msg.sender);\n        ourToken.transfer(bob, STARTING_BALANCE)\n    }\n\n    function testBobBalance() public {\n        assertEq(STARTING_BALANCE, ourToken.balance(bob));\n    }\n\n}\n```\n\nWith the above complete we should be able to run `forge test -mt testBobBalance` in our command line to see, yes, the test passes! This is just one example. I encourage you to write more of your own tests, and in the next section we'll learn how to use AI to help.\n\n## Generating More Tests with AI\n\nHaving established this foundational knowledge, we can now generate additional tests using AI. It's also worth noting that writing tests is something at which AI is quite proficient.\n\nTo illustrate, let’s write a test for the allowances. It's frequently a crucial part of ERC-20 tokens. Roughly put, we're allowing contracts to transfer tokens on your behalf. Here’s how you might request this of an AI model:\n\n```bash\n\"Here's my Solidity ERC20 token and a few tests I've written in Solidity. Could you please generate the rest of the tests? Please include tests for allowances, transfers, and anything else that might be important.\"\n```\n\nUpon receiving the AI's tests output, it’s advisable to only copy what you need. Be aware not to blindly copy paste code from the AI. Since AI's can get things wrong, it’s crucial to understand what's going on, and be able to spot such false outputs.\n\nTrue to this, AI's may get things wrong, like removing essential parts of the code, or introducing some redundancies. But some tests like `Test allowance works` or `Test transfer` might just be okay to use right off the bat.\n\nUsing AI to write tests should be like this: it gives you the building blocks for most of the tests, but you refine the building blocks to fit your application using your coding skills.\n\n## Wrapping Up\n\nThat's it for this lesson! Sure, it may seem like a short tutorial, but don't be fooled. The more advanced you become in your learning, the more straightforward the concepts.\n\nNow head off for some well-deserved rest or a little celebration – you've earned it! It's quite a feat becoming more comfortable with these foundational concepts. Having this solid foundation will take you far past your current knowledge base.\n\nFor those still shading in the gaps, don't hesitate to head over to the GitHub repo for some valuable insights to fast-track your learning. The thrill of learning awaits you in the next session. See you then! Bye!\n\n<img src=\"/foundry-erc20s/5-erc20-ai-tests-and-recap/erc20-ai-tests-and-recap1.PNG\" style=\"width: 100%; height: auto;\">\n",
          "updates": []
        }
      ]
    },
    {
      "sectionId": "94b46f4a-4966-4bf5-85f2-605e034d0061",
      "number": 2,
      "slug": "how-to-create-an-NFT-collection",
      "title": "Develop an NFTs Collection",
      "lessons": [
        {
          "lessonId": "2dd01e95-bf3d-4cc6-8bd2-8b7d779863a3",
          "number": 1,
          "slug": "introduction-to-nfts",
          "title": "Introduction to NFTs",
          "description": "his introductory lesson on Non-Fungible Tokens (NFTs) covers the basics of NFTs, including their creation, dynamics, and values. It features a practical project involving dynamic NFTs of dogs, emphasizing the addition of NFTs to MetaMask and connecting with platforms like OpenSea for selling NFTs.",
          "duration": 3,
          "videoUrl": "HZkX4TjOalhdptyolgs7t8026udJE02UpxVKYt4pJYY024",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/1-nfts/+page.md",
          "markdownContent": "***\n\n## title: NFTs\n\n*Follow along the course with this video.*\n\n***\n\nHello there, coding enthusiasts! As we move forward in our Solidity journey, we're inching closer towards becoming proficient, practical Solidity developers, ready to take on real-world challenges. In today's session, we're diving straight into the fascinating world of Non-Fungible Tokens (NFTs); afterward, we'll venture into the intricate web of DeFi, upgradable contracts, governance, and a glimpse into security. Excited? Let's get our hands dirty!\n\n<img src=\"/foundry-nfts/1-intro/intro1.png\" style=\"width: 100%; height: auto;\">\n\n## A Quick Overview of the Code Base\n\nLet's begin by exploring our course content. Our NFT project will entail creating dynamic NFTs of adorable dogs using VS Code. What's more, these tokens will evolve and carry fluctuating values. We aim to help you gain an in-depth understanding of NFTs, what makes them so special, and their functionality.\n\nEventually, we'll be able to add our NFTs right into our MetaMask, a thrilling outcome!\n\n## An Introduction to Two Types of NFTs\n\nTime to move onto specifics. There are two types of NFTs we will create:\n\n1. **Basic NFT:** The basic (yet super exciting!) NFT will depict a cute little pug, which will be stored in InterPlanetary File System (IPFS).\n2. **Advanced NFT:** We'll move to the advanced level by designing an NFT stored entirely on-chain, a genuinely decentralized form. An interesting attribute of this NFT is that its SVG will fluctuate depending upon the mood state we assign.\n\nOur goal is to give this NFT a dynamic personality, so to say, allowing it to mirror our mood swings. Just imagine—crafting mood-reflective tokens and importing them into an empty MetaMask!\n\n<img src=\"/foundry-nfts/1-intro/intro2.png\" style=\"width: 100%; height: auto;\">\n\n### Looking Further: Selling the NFTs\n\nApart from MetaMask, we also aim to connect with platforms like OpenSea. This move will allow us an interactive space to sell our NFTs, engage with NFT communities, and do much more.\n\nWe'll cap things off by unraveling the mysteries of API and function selector codes, giving you a well-rounded understanding of these fundamental aspects of Solidity.\n\n## Unraveling the NFT\n\nAfter understanding our course layout, let's explore what an NFT is. NFTs, or Non-Fungible Tokens, represent a unique set of data stored on Ethereum's digital ledger or blockchain. These tokens can literally represent anything — virtual real-estate, digital art, and much more! To give it a fitting analogy for our course:\n\n<img src=\"/foundry-nfts/1-intro/intro3.png\" style=\"width: 100%; height: auto;\">\n\nNow, we're surely thrilled to begin. So, strap yourself in, and let's delve into the adventurous world of NFT creation in Solidity.\n\nStay curious, and stay tuned for our next session as we build, learn, and master the art of coding!\n",
          "updates": []
        },
        {
          "lessonId": "f83641db-a754-4415-81f4-1aa1cfd3951c",
          "number": 2,
          "slug": "what-is-a-nft",
          "title": "What is an NFT",
          "description": "Dive deep into the world of Non-Fungible Tokens (NFTs), exploring their uniqueness compared to traditional tokens (ERC20s). The lesson focuses on the distinct nature of NFTs, their application in digital art, and the use of platforms like OpenSea and Rarible for trading.",
          "duration": 7,
          "videoUrl": "3Odz00lddAmiCzUa4HIkRZncD68MD00sBAqjkdkUmw7co",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/2-what-is-a-nft/+page.md",
          "markdownContent": "***\n\n## title: What is a NFT?\n\n*Follow along the course with this video.*\n\n***\n\nHello dear students! Today, we'll be diving deep into Non-Fungible Tokens (NFTs) from the perspective of a Python novice while also embarking on an ultimate NFT tutorial. Our journey will help unravel the inquisitiveness in you, becoming experts in blockchain and cryptocurrency technology.\n\n## Defining NFTs\n\nNFTs, called `ERC721`s, are the latest craze in the digital world as they are considered a prized possession on the Ethereum platform. For the uninitiated, NFT stands for Nonfungible token and is a token standard similar to ERC 20. You might recognize `ERC20s` by familiar names like Link, Ave Maker, which are found on the Ethereum chain.\n\n<img src=\"/foundry-nfts/2-what-is/whatis1.png\" style=\"width: 100%; height: auto;\">\n\nThe sparkle of NFTs lies in their unique nature. Unlike ERC 20s where one token is always equivalent to another same token, NFT or nonfungible token is unique and not interchangeable with any other token of its class. To simplify, consider this: one dollar is equivalent to another dollar. However, this is not the case in NFTs.\n\n<img src=\"/foundry-nfts/2-what-is/whatis2.png\" style=\"width: 100%; height: auto;\">\n\n## The Unparallel Power of Art in NFTs\n\nNFTs aren't limited in scope. They can be deemed as a digital version of art pieces possessing an incorruptible and permanent history. Of course, their application isn't only confined to art. You can enrich them with stats, make them do battle, or do unique stuff with them. For instance, NFTs are viewed, bought, and sold on various platforms like [OpenSea](https://opensea.io/) or [Rarible](https://rarible.com/).\n\nThough one might consider NFTs ridiculous initially (I too was in that boat once!), their value becomes clear when pondered over their benefits. Artists often face attribution and compensation problems. With NFTs, artists can be adequately compensated for their contributions through a decentralized royalty mechanism, which is fair, transparent, and free from intermediary service.\n\n## Exploring ERC721 and ERC20\n\nNow, let's delve further into the NFT standards: the ERC 721 standard or the NFT standard. They serve as the foundation for NFTs. However, the semi-fungible token standard, the ERC 1155, isn't the focus of our discussion today but is still worth exploring.\n\nThe key differences between a 721 and ERC 20 lie in the mapping between an address and its holdings. ERC 20s have a simple mapping compared to 721’s that holds unique token IDs. Each token is unique, with a unique owner and a 'token Uri', defining what each asset looks like.\n\nIf you know Ethereum, you are aware of the high gas prices and expensive costs of storing a lot of space. This is where 'Token Uri' enters the scene. They are a unique indicator of what assets or tokens look like, and the characteristics of these tokens. A regular 'token uri' returns a format with the name, image location, description, and below mentioned attributes.\n\n## The Dilemma: On-chain Vs. Off-chain Metadata\n\nThere's often discourse on whether to store NFT data on-chain or off-chain. Off-chain storage is simpler and cheaper, with options like [IPFS](https://ipfs.io/) or even a centralized API. However, this come with risks of losing the image and all data associated with the NFT if the API goes down.\n\n<img src=\"/foundry-nfts/2-what-is/whatis3.png\" style=\"width: 100%; height: auto;\">\n\n## Getting Hands-on with NFT Deployment\n\nIf you're a newbie in NFTs and all that we've discussed feels a bit overwhelming, do not worry. Here's a simplified process for you: add your image to IPFS, add a metadata file pointing to that image file on IPFS, and grab that Token Uri and set it as your NFT.\n\nIn short, understanding NFTs and its various characteristics and usages can render you capable of building creative NFTs and games with unique properties. And most importantly, it authenticates the NFTs as the properties will always remain on the chain.\n\nStay tuned for more engaging content about NFTs, Blockchain, Ethereum, and more. Let's continue on this exciting journey of digital innovations together!\n",
          "updates": []
        },
        {
          "lessonId": "08185616-d253-4f6a-b0e7-719c89386074",
          "number": 3,
          "slug": "foundry-setup",
          "title": "Foundry setup",
          "description": "This session guides you through setting up the Foundry environment for NFT development. It includes instructions on creating directories, initializing your project, and using OpenZeppelin contracts for defining NFTs, highlighting the process of minting and deploying NFT images.",
          "duration": 11,
          "videoUrl": "yquUfB2EF54qwmTY9faT8IvuJB33XYY5kLJ009225wJY",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/3-foundry-setup/+page.md",
          "markdownContent": "***\n\n## title: Foundry Setup\n\n*Follow along the course with this video.*\n\n***\n\nHello, coders! Now that we have an idea about NFTs, we're all set to start coding our first-ever Non-fungible tokens. If you want to follow along, feel free to pass by the course materials where the GIT code associated with this lesson is located.\n\n## Setting Up the Environment\n\nFirst, as usual, we create a new directory for our project.\n\n```shell\nmkdir foundry-nft-f23\n```\n\nThen, let's switch to our newly created directory.\n\n```shell\ncd foundry-nft-f23\n```\n\nNext, we'll launch our text editor (I'm using the popular Visual Studio Code in this case) from the terminal.\n\n```shell\ncode foundry-nft-f23\n```\n\nBefore anything else, let's fire up the terminal, close the explorer and initiate our working directory to clean any residual files.\n\n```shell\nforge init\n```\n\nCheck if the '.env' file exists and also add 'broadcast.'\n\n## Creating Our Basic NFT\n\nThe NFT we are about to create is a token standard, similar to the ERC 20. The best part about this is that we don't need to walk through all the functions. We can save some time using our trusty package `OpenZeppelin`.\n\nLooking at the Open Zeppelin contracts, there's a token folder that hosts an ERC721.sol contract. This contract has almost all the functionality that we need for our NFT.\n\n```shell\nforge install OpenZeppelin/openzeppelin-contracts\n```\n\nBy now, already you know that SPDX license identifier, MIT, and Pragma, solidity version are mandatory elements in a solidity file. Here's how we're defining our 'basicNFT.sol' file –\n\n```js\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\ncontract BasicNFT {...}\n```\n\nWe'll import the OpenZeppelin contracts package, point to the ERC 721 protobuf file, and declare our basic NFT contract.\n\n```js\nimport { ERC721 } from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n```\n\nVoila, our basic NFT ecosystem is ready for use, and its name will be dog and symbol as doggy.\n\n```shell\n constructor() ERC721(\"Dogie\", \"DOG\") {}\n```\n\nBut are we done yet? No. Now, we need to define the appearance of our NFTs and define how to obtain these tokens.\n\n## Token Standard and Counter\n\nLooking at the ERC 20 token standard, it has a balanceOf function. But in NFTs, the 'amount' of tokens doesn't matter as each of them is unique and thus can have distinct values. Here, the 'ownerOf' function is used to give each token a unique ID.\n\nThe unique NFT is denoted by a combination of the contract's address that represents the entire collection and the token's ID. So, we are going to use a 'token counter' to keep track of each token's unique ID.\n\n```shell\nuint256 private s_tokenCounter;\n```\n\nOur token counter's initial value will be zero, and it will increase as we mint new 'dog' tokens.\n\n<img src=\"/foundry-nfts/3-setup/setup1.png\" style=\"width: 100%; height: auto;\">\n\n## Minting the Puppy NFT\n\nThe minting function that we're about to define will allow us to produce our puppy tokens. This function is very crucial in the EIP721, the tokenUri. Although initially considered an optional parameter, the tokenUri, which stands for Token Uniform Resource Identifier, returns an API endpoint containing the NFT's metadata.\n\n<img src=\"/foundry-nfts/3-setup/setup2.png\" style=\"width: 100%; height: auto;\">\n\nThis metadata outlines the appearance of our NFT, including a title, a type, properties, and an image. The Uri points to the object that dictates the NFT's looks.\n\n```shell\nfunction tokenURI(uint256 tokenId) public view override returns (string memory) {}\n```\n\nHere we override the base’s tokenUri method with our custom method. Notice that whenever we want to look at what an NFT looks like, we call this function. The NFT’s look is determined by the image that this function returns.\n\n## Deploying Images for NFT\n\nOur puppy NFTs are ready to be brought to life. In our GitHub repository, we have the NFT images you can use for your first NFT. Once you select and download your desired puppy, let’s save it to the 'img' folder that we created in the project's directory.\n\n<img src=\"/foundry-nfts/3-setup/setup3.png\" style=\"width: 100%; height: auto;\">\n\nWow! It was a smooth journey, and we have successfully prepared our NFT images which are ready to be deployed using IPFS. Stay tuned for the next section where we will delve deeper into IPFS and how we can use it.\n",
          "updates": []
        },
        {
          "lessonId": "026164a1-de31-43b2-8f33-7471d8d6934d",
          "number": 4,
          "slug": "what-is-ipfs",
          "title": "Introduction to IPFS",
          "description": "Learn about the Interplanetary File System (IPFS), a decentralized data storage system, and its use in NFT development. Understand the concept of hashing data, pinning it on IPFS nodes, and the global network of nodes, differentiating it from blockchain in terms of data storage and access.",
          "duration": 8,
          "videoUrl": "FpDGLnN3VHMKKMfDsLABpkRXQuTH6Ty9DhQHAdc8UbM",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/4-ipfs/+page.md",
          "markdownContent": "***\n\n## title: IPFS\n\n*Follow along the course with this video.*\n\n***\n\nIn this comprehensive guide, I will explain how to use the Interplanetary File System (IPFS), a revolutionary distributed decentralized data structure. While it's not exactly a blockchain, its working mechanisms are somewhat similar – without the element of data mining. What IPFS does, instead, is what we call 'pinning data'.\n\nYou can get a glimpse of how IPFS works in the official [IPFS documentation](https://docs.ipfs.io/)\n\n## IPFS: A Unique Approach to Data Management\n\nThe IPFS process starts with a code, file, or any other form of data.\n\n```\nPiece of Data => Hash Function => Unique Hash\n```\n\nThe first thing IPFS does is to hash this data, yielding a unique output. Whether your data contains a massive code file or a ton of text, it gets turned into a unique hash function. The IPFS node carries out this hashing for you, with all IPFS nodes across the globe using the exact same hashing function.\n\n```\nSame Hashing Function => Consistent Unique Output\n```\n\nOnce data is hashed and a unique output obtained, then comes the 'pinning' part. You can pin the data, the code, the file on your IPFS node. The only role of the node is to host this data and store these hashes, nothing more.\n\n```\nHashed Data => Pin Data => Data Stored on Node\n```\n\n<img src=\"/foundry-nfts/4-ipfs/ipfs1.png\" style=\"width: 100%; height: auto;\">\n\n## Building a Global Network of Nodes\n\nHere's where the magic happens: your node connects to a vast network of other IPFS nodes. These nodes communicate with each other vastly lighter than any blockchain node.\n\nFor instance, when you request your network for a specific hash, the nodes engage in a conversation until one comes up with your data. This mechanism might initially seem centralized since the data resides on one node.\n\nHowever, other nodes on the network can also pin your data if they wish, thus creating a copy of your data on their node as well.\n\n```\nNetwork Nodes => Share and Pin Each Other Data => Decentralized Data\n```\n\nWith the ability to replicate any data in a decentralized manner, IPFS nodes offer straightforward functionality with a simple setup. It's also essential to note the drastic difference between blockchain and IPFS in this respect – IPFS nodes cannot execute smart contracts. In simple terms, they only offer decentralized storage.\n\nThe issue arises when ensuring decentralization – other nodes must pin our data. If we are the only node that has a particular hash, and our node goes down, that data is lost, and the network won't be able to access it. We will discuss future strategies for ensuring other people pin your data in subsequent sections, but for now, let's proceed with deploying our application on IPFS.\n\n## Deploying Your Application on IPFS\n\nNow that we know about IPFS, the next step is to deploy our application to IPFS, making it accessible by anyone, anywhere, provided our node remains online.\n\n<img src=\"/foundry-nfts/4-ipfs/ipfs2.png\" style=\"width: 100%; height: auto;\">\n\nYou can install and work with IPFS using the IPFS Desktop application or command line, as per your preference. If you're using Brave or Firefox, the IPFS router is built-in. For browsers like Chrome, you might have to add [IPFS Companion](https://chrome.google.com/webstore/detail/ipfs-companion/nibjojkomfdiaoajekhjakgkdhaomnch) for seamless functionality.\n\nOnce you have installed IPFS, you can import your file (for example, `next config JS`) and extract the CID or the hash. With IPFS Companion installed and enabled, or via the Brave local IPFS node, you can now access this file directly using your CID, essentially turning it into a URL.\n\nIf you encounter trouble accessing these files, you can use the IPFS gateway as a workaround route for requesting the data through another server, which then gets the data through IPFS. Simply append your hash to `https://gateway.ipfs.io/ipfs/`. This way, there will be no need for the IPFS Companion.\n\nTo wrap it up, IPFS introduces a new level of data decentralization and replication to build a global network of nodes that can store and distribute data economically and efficiently. Future trends suggest this could become an integral part of the Internet's infrastructure. With this guide, you are now ready to contribute to this digital revolution.\n",
          "updates": []
        },
        {
          "lessonId": "ad03afd8-a5f1-463a-89f4-f7c14ef33d5d",
          "number": 5,
          "slug": "upload-data-on-IPFS",
          "title": "Upload and use IPFS data (token URI)",
          "description": "This section explores using IPFS for hosting NFT images and metadata, focusing on OpenSea for practical demonstration. It also covers the customization of NFT appearances by allowing users to choose their Token URI, thus determining the look of their tokens.",
          "duration": 7,
          "videoUrl": "T6Tm6GjpiaWUs1qMapDCdLdzt8iy2qoJ02VSSiFgtnVA",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/5-using-ipfs/+page.md",
          "markdownContent": "***\n\n## title: Using IPFS\n\n*Follow along the course with this video.*\n\n***\n\nHello and welcome back to our discussion on an exciting topic, IPFS, and the Token Uri in the realm of Non-Fungible Tokens (NFTs). After immersing ourselves in understanding these novel technology elements, let's put our knowledge into practice by exploring a marketplace for selling NFTs, such as OpenSea.\n\n## Exploring NFTs on OpenSea\n\nOpenSea, a marketplace nurturing a vibrant ecosystem for buying and selling NFTs, provides countless opportunities for examination. Here's how we do it:\n\n1. Scroll down the OpenSea page and select any NFT you fancy. For this discussion, let's take a look at the Pudgy Penguins.\n2. Click on the chosen NFT and navigate to its on-chain details.\n3. Click through to the source code, scroll down to 'read contracts' and connect to web three.\n4. Scroll further down to find the 'Token Uri' and get the ID for our chosen NFT.\n\nSubsequently, we can see the metadata object that features 'attributes', 'description', and the 'name' piece. If we input this name piece into the address bar, we visualize the image of the NFT.\n\n<img src=\"/foundry-nfts/5-using-ipfs/using1.png\" style=\"width: 100%; height: auto;\">\n\n## Creating Your Own NFT Image\n\nWith your own image ready, the next step is uploading it using your IPFS node in your browser. Get the hash and use that as the image Uri for your own NFT.During the upload process to IPFS, both the image and the file (which contains the Uri of the image) must be uploaded. But remember, we're taking the path of least resistance here. We'll go on and use the Foundry IPFS Uri.\n\n## Diving Deeper into Our NFT\n\nBack to our NFT, instead of pasting the Token Uri for all our dogs to look the same, we're taking a more enticing route. We will allow people to customize their own Token Uri, hence choosing how their tokens will look.\n\nLet's code this idea:\n\n```js\n    function mintNft(string memory tokenUri) public {\n        s_tokenIdToUri[s_tokenCounter] = tokenUri;\n        _safeMint(msg.sender, s_tokenCounter);\n        s_tokenCounter = s_tokenCounter + 1;\n    }\n\n    function tokenURI(\n        uint256 tokenId\n    ) public view override returns (string memory) {\n        if (!_exists(tokenId)) {\n            revert BasicNft__TokenUriNotFound();\n        }\n        return s_tokenIdToUri[tokenId];\n    }\n```\n\nAnd that's it! We've created a simple yet advanced NFT able to have its look customized by anyone.\n\nHappy Ethereum Contracting!\n\nRemember,\n\n<img src=\"/foundry-nfts/5-using-ipfs/using2.png\" style=\"width: 100%; height: auto;\">\n",
          "updates": []
        },
        {
          "lessonId": "b1fe8820-973d-4701-b6b2-6f466d824c6e",
          "number": 6,
          "slug": "nfts-deployment-script",
          "title": "Writing the deployment script",
          "description": "Learn how to write a deployment script for NFTs. This includes using Forge script for deploying Basic NFTs and understanding the contract deployment process, highlighting the importance of testing and compiling before deployment.",
          "duration": 2,
          "videoUrl": "viH5QSKMzp1lzk5ubsud02cO00oigXWNw7w5Kr012ukAI4",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/6-deploy-script/+page.md",
          "markdownContent": "***\n\n## title: Deploy Script\n\n*Follow along the course with this video.*\n\n***\n\n## Coding Your Basic NFT\n\nReady your keyboards, it's time to get coding! We already looked on the the basic code for the NFT on previous lessons and today we will be writing the code for the deploy script.\n\n## Basic Deployment\n\nThis function will serve a dual purpose; we're going to use it for our testing as well. What should it return? The answer is pretty straightforward - it should return our basic NFT.\n\nTherefore, this is how the Deployment contract will look like:\n\n```js\ncontract DeployBasicNft is Script {\n    uint256 public DEFAULT_ANVIL_PRIVATE_KEY =\n        0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80;\n    uint256 public deployerKey;\n\n    function run() external returns (BasicNft) {\n        if (block.chainid == 31337) {\n            deployerKey = DEFAULT_ANVIL_PRIVATE_KEY;\n        } else {\n            deployerKey = vm.envUint(\"PRIVATE_KEY\");\n        }\n        vm.startBroadcast(deployerKey);\n        BasicNft basicNft = new BasicNft();\n        vm.stopBroadcast();\n        return basicNft;\n    }\n}\n\n```\n\nThis chunk of code initiates a broadcast to the EVM (Ethereum Virtual Machine), creates a new basic NFT and stops the broadcast, then returns our freshly created NFT.\n\nAlso don't forget we need to import the basic libraries we always use in our contracts, and of course the solidity version and the license.\n\n```js\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {Script} from \"forge-std/Script.sol\";\nimport {BasicNft} from \"../src/BasicNft.sol\";\nimport {console} from \"forge-std/console.sol\";\n```\n\nAfter putting the finishing touches on your code, it’s time to compile.\n\n## Time to Compile\n\nTo make sure everything is peachy, run a quick `forge compile`.\n\n```shell\nforge compile\n\n```\n\nNow watch as your console lights up with the wonderful message: \"COMPILING SUCCESSFULLY!\"\n\n<img src=\"/foundry-nfts/6-deploy/deploy1.png\" style=\"width: 100%; height: auto;\">\n\nAnd there you have it! You've just created and deployed a basic NFT. This experience should give you a taste of the powerful capabilities of Solidity for building and working with NFTs.\n\nStay tuned for more adventures in the world of decentralized applications. And remember, never stop exploring!\n\n<img src=\"/foundry-nfts/6-deploy/deploy2.png\" style=\"width: 100%; height: auto;\">\n\nHappy Coding!\n",
          "updates": []
        },
        {
          "lessonId": "e0582e78-a7f4-4b30-8f0d-76e8a807377c",
          "number": 7,
          "slug": "basic-nft-tests",
          "title": "Test the NFTs smart contract",
          "description": "Focuses on testing the basic NFT contract using Solidity. It includes detailed steps for conducting tests like confirming the NFT name and testing the mint function, emphasizing the importance of testing for successful smart contract deployment.",
          "duration": 11,
          "videoUrl": "h0002kd6AppErtI00Sikbh88Qn8DV4diqGtK4I2b75NrH00",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/7-basic-nft-tests/+page.md",
          "markdownContent": "***\n\n## title: Basic NFT Tests\n\n*Follow along the course with this video.*\n\n***\n\nWhen working with NFTs in Solidity, it's crucial to conduct tests to ensure that the contract functions appropriately. As you can imagine, programming blockchain-based contracts can be quite challenging because, unlike other pieces of software, deploying a faulty smart contract on the blockchain can lead to disastrous consequences (and yes, that includes financial loss!).\n\nWith that in mind, let's delve into testing  coding some tests for the basic NFT contract we created in the previous lesson.\n\n## Conducting BasicNFT tests\n\nOnce the setup is complete, it's time to jump into tests. Writing an array of tests serves to validate the functionality of our contract, but for the purpose of this blog, let's focus on testing the Name function.\n\nTo confirm that the Name of your NFT is correct, declare a function `testNameIsCorrect` and specify it as public view. The expected output should be set as a string memory.\n\n```js\nfunction testNameIsCorrect() public view {\n  string memory expectedName = \"Dogie\";\n  string memory actualName = basicNft.name();\n  // This will give us an error!\n  assert(expectedName == actualName);\n}\n```\n\n## An Issue With Comparing Strings\n\nHowever, as we proceed with writing the tests, an issue becomes apparent when trying to assert that the expected name equals the actual name. The main problem lies in Solidity's inability to compare array types which includes strings.\n\nWhile it's possible to manually loop through each item in an array for comparison, it's impractical and can lead to verbose code. A more streamlined approach would be to hash the arrays using `abi.encodePacked` and compare the resulting fixed-sized, unique string identifiers.\n\nHere's how it's achieved:\n\n```javascript\nassert(keccak256(abi.encodePacked(expectedName)) == \n       keccak256(abi.encodePacked(actualName)));\n```\n\nThis code returns a pass if the name functions as intended.\n\n<img src=\"/foundry-nfts/7-test/test1.png\" style=\"width: 100%; height: auto;\">\n\n## A Second Round of Testing\n\nSuppose we wish to further test if the `mint` function operates correctly and have a balance. In this case, let's declare a function `testCanMintAndHaveABalance`. In addition, assign an address called 'user', create one with the parent function and then mint an NFT.\n\nNow, test if the balance is correct and validate that the tokenUri is the same as the pug.\n\n```javascript\nfunction testCanMintAndHaveABalance() public {\n        vm.prank(USER);\n        basicNft.mintNft(PUG_URI);\n        assert(basicNft.balanceOf(USER) == 1);\n    }\n```\n\nIf everything is set correctly, it's time for execution! Use `forgeTest` to run all tests.\n\n<img src=\"/foundry-nfts/7-test/test2.png\" style=\"width: 100%; height: auto;\">\n\n## Wrapping Up\n\nIn conclusion, the process of testing contracts in Solidity is an essential part of developing a flawless contract that works exactly as intended. Despite some of its quirks (like the lack of native support for string comparison), you can leverage algorithmic techniques to work around them, as we have shown in this blog post translation of a transcript. Practice issuing new contracts and conducting tests - the more you practice, the easier it becomes. Happy coding, and to more successful test results!\n",
          "updates": []
        },
        {
          "lessonId": "bc86137e-2ab9-4a1f-aecd-60da82da36b3",
          "number": 8,
          "slug": "interact-with-solidity-smart-contracts",
          "title": "Interact with a smart contract",
          "description": "Teaches how to interact with Solidity smart contracts, particularly for minting NFTs. It includes setting up the necessary environment and scripts, and deploying NFTs using tools like Foundry and IPFS.",
          "duration": 3,
          "videoUrl": "5giC6UkQfl8r2b4K2g4Jdje5wTUGyh2BNNxvwj01XbNc",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/8-basic-interactions/+page.md",
          "markdownContent": "***\n\n## title: Basic NFT Interactions\n\n*Follow along the course with this video.*\n\n***\n\n## Introduction\n\nEveryone who is interested in the fascinating world of NFTs (Non-fungible tokens), most likely knows the basic line - how to mint a token. However, have you ever thought about creating a dedicated tool to mint your token programmatically, instead of using a traditional casting procedure? Well, you're in luck! We'll be discussing exactly how to achieve this with Solidity in this post. Buckle up!\n\n## The Code\n\nTypically, we'd define a Solidity contract with all the necessary imports. For this instance, we're going to name ours `MintBasicNft`. This is going to be on `Interactions.s.sol`, let's get started:\n\n```js\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\ncontract MintBasicNft is Script {}\n```\n\nRight out of the gate, it's safe to say you already know the drill—defining a simple contract! We'll increase the complexity over the course of this tutorial.\n\n### Importing Necessary Libraries\n\nNext, we've got to bring in our scripts from Forge’s Script.sol. This is quite straightforward:\n\n```js\nimport {Script, console} from \"forge-std/Script.sol\";\n```\n\nNow, we'll start to shape up our contract. Next, we need to create an external function `run()` which is going to mint our NFT.\n\n```js\nfunction run() external {}\n```\n\nTo ensure that we're always working with the most recently deployed NFT, we'll need a fantastic tool from `foundry-devops-package`. It's time to install this package. Copy the URL and run it in your terminal:\n\n```shell\nforge install ChainAccelOrg/foundry-devops --no-commit\n```\n\nClose the terminal and write a code line to get the recently deployed address:\n\n```js\n\n\naddress mostRecentlyDeployed = \n        DevOpsTools.get_most_recent_deployment(\"BasicNFT\", block.chainid);\n```\n\nHere, we have a function called `get_most_recent_deployment` from `DevOpsTools` that fetches the most recent deployment.\n\nFor this to work, remember to bring your DevOps tools into the contract:\n\n```js\nimport {DevOpsTools} from \"lib/foundry-devops/src/DevOpsTools.sol\";\n\n```\n\n### The Mint Function\n\nHere comes the grand part, writing the function that mints your NFT on the contract. For this, pass in the `mostRecentlyDeployed`:\n\n```js\nmintNFTOnContract(mostRecentlyDeployed);\n```\n\nAnd the function `mintNFTOnContract` takes an address, starts broadcasting, mints an NFT, and stops broadcasting:\n\n```js\nfunction mintNftOnContract(address contractAdress) public {\n    vm.startBroadcast();\n    BasicNft(basicNftAddress).mintNft(PUG);\n    vm.stopBroadcast();\n}\n```\n\nAt the end of the function, you can pass your pug string (it’s unique, I promise). Don’t forget to import your basic NFT:\n\n```js\nimport {BasicNft} from \"../src/BasicNft.sol\";\n```\n\n## Conclusion\n\nCongratulations! You now have an effective way to programmatically deploy and mint your NFTs!\n\n<img src=\"/foundry-nfts/8-interaction/interaction1.png\" style=\"width: 100%; height: auto;\">\n\nWith this custom-made tool, you are no more confined to the traditional casting process. This tool gives you the flexibility to programmatically mint your NFTs with ease, anytime you want.\n\nWith this added skill in your NFT arsenal, you're a step closer to mastering the fascinating world of non-fungible tokens.\n\n**Happy Coding!**\n",
          "updates": []
        },
        {
          "lessonId": "1b847650-6cc7-42e9-9d47-54d8f5cd09a8",
          "number": 9,
          "slug": "deploy-nfts-on-testnet",
          "title": "Deploy your NFTs on the testnet",
          "description": "Guides on deploying NFTs to a testnet and importing them into MetaMask. It covers the use of Anvil for deployment, extracting contract data, and using MetaMask to interact with the deployed NFTs.",
          "duration": 7,
          "videoUrl": "By8uwTwEs82v01MQvQPgud3xTiJ1dCGNnAdgucXN2izA",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/9-testnet-demo/+page.md",
          "markdownContent": "***\n\n## title: Basic NFT Testnet Demo\n\n*Follow along the course with this video.*\n\n***\n\nIn our previous lesson, we've covered the concept and advantages of NFTs (Non-fungible tokens) along with how to build and test them. But to appreciate the full potential of our NFT, we need to see it in a real-world setting – our MetaMask wallet. This post walks you through how to deploy an NFT to a testnet, as well as how to import it to your MetaMask wallet. Let's get started!\n\n## Deploying NFT to a Testnet\n\nWhile testing is a vital part of NFT creation, deploying it in a real use case can bring more clarity to your understanding. Luckily, there are several ways to deploy your NFT. You could consider using Anvil, your own Anvil server, or a testnet. If you're not keen on waiting for the testnet or spending the gas, I'd recommend deploying it to Anvil.\n\nThe processes detailed below are optional, but feel free to follow along if you'd like.\n\n### Using a Makefile for Quick Deployment\n\nRather than typing out long scripts, we'll use a makefile here. The associated Git repo contains the makefile we're using, allowing you to simply copy and paste rather than rewriting everything.\n\nIn the makefile, we've captured most of the topics we've discussed so far, including our deploy script, which we'll use to deploy our basic NFT.\n\n<img src=\"/foundry-nfts/9-testnet/testnet1.png\" style=\"width: 100%; height: auto;\">\n\nHere is what the deploy script looks like:\n\n```makefile\ndeploy:\n\t@forge script script/DeployBasicNft.s.sol:DeployBasicNft $(NETWORK_ARGS)\n```\n\nIt's important here to ensure you have included your environmental variables.\n\nIt's noteworthy that you should write some tests before deploying on a testnet, although for the sake of showing you what the NFT looks like, we'll skip this step in this instance.\n\n## Deploying Our Basic NFT\n\nWe're now going to deploy our basic NFT to the contract address. After successful deployment, there will be a short wait for its verification.\n\n### Extracting Contract Info and Minting\n\nWith our NFT deployed, we'll now move to extract our contract data. In the broadcast folder, the latest run contains the created basic NFT information. We'll execute the following command to initiate the Mint function:\n\n```makefile\nmint:\n    @forge script script/Interactions.s.sol:Interactions $(NETWORK_ARGS) \n```\n\nThe DevOps tool works by grabbing the most recent contract from this folder, thus automating the process.\n\n## Importing NFT into MetaMask\n\nWhile the NFT is being minted, let's transition to MetaMask:\n\n1. Copy the contract address under which the NFT was deployed.\n2. From MetaMask, go to NFTs and switch to Sepolia.\n3. Click on Import NFTs and paste the copied address.\n4. Since we're the first to create this NFT, the token ID will be zero. Input this and hit 'Add'.\n\nAfter a short wait, your NFT will be viewable right from your MetaMask wallet. It's intelligent enough to extract the token URI, allowing you to view the image, contract address, or send it elsewhere.\n\nCongratulations! You've successfully deployed and imported an NFT into MetaMask. You can now interact with it just as you would in a marketplace like OpenSea. Through this process, you've learned how to make an NFT come to life, from being just a script to being part of the real-world, bridging the gap between test environments and real applications.\n\nStay tuned for our next post on advanced NFT creation steps, such as a complete DeFi app development and more.\n",
          "updates": []
        },
        {
          "lessonId": "7831d519-1110-4317-8b7a-3298f63ebf62",
          "number": 10,
          "slug": "pin-nfts-images-using-pinata",
          "title": "IPFS and Pinata vs HTTP vs on chain SVGs",
          "description": "Discusses the pros and cons of using IPFS, HTTP, and on-chain SVGs for storing NFT data. It covers the pitfalls of each method and introduces services like Piñata Cloud for securing digital assets on IPFS.",
          "duration": 4,
          "videoUrl": "4Ola5wzT82RohNN5YaJhYr7UQ4aqVis9Q7X2vmmzsjc",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/10-ipfs-https/+page.md",
          "markdownContent": "***\n\n## title: The issue with IPFS vs HTTPS\n\n*Follow along the course with this video.*\n\n***\n\nIn the world of **Non-Fungible Tokens (NFTs)**, several questions often arise about where and how these digital assets should be stored. In this blog post, we'll discuss two main topics: the potential issues related to storing NFTs on IPFS and how to use *abi encode packed* for creating on-chain SVGs.\n\n## Part 1: What's The Issue with IPFS?\n\nFirst things first: Let's discuss the **InterPlanetary File System (IPFS**), a popular decentralized storage system for NFTs.\n\nYou might wonder - Is it a good idea to host my precious NFTs on IPFS? Isn't it better than the commonly used Https and websites for storing digital assets?\n\nWell, let's paint a clear picture for you.\n\n### What's Wrong with Using Websites for Storing NFTs?\n\nMany NFT creators use websites—with https—to store their tokens. However, should these websites go offline or worse, collapse, the NFT owner finds themselves with a broken JPEG link and a, dare we say, worthless NFT!\n\nDespite the apparent risk, this storage option remains popular because it's significantly cheaper and comfortable to spin up an IPFS node and pin your data to the node.\n\n### Why IPFS Might Not Be The Best Option Either\n\nCompared to storing digital assets on a website, IPFS is undoubtedly a better choice. It is a decentralized storage platform, meaning that it allows users to maintain control over their data. Furthermore, on IPFS, anyone can pin the NFT data and keep the image accessible permanently.\n\nHowever, IPFS has its pitfall. If a creator's IPFS node goes offline (like turning off their PC), it could result in an inaccessible file. That means anyone trying to access that NFT on platforms like MetaMask or OpenSea would stumble upon a broken JPEG image, not the intended item.\n\nThe fact that others can pin the NFT data offsets this inconvenience to an extent. But, how many users actually pin data and how reliable can that be?\n\nThis is where services like **Piñata Cloud** come into the picture. They keep your metadata for your stored NFTs up even if your IPFS node goes offline. Protocols like these provide an additional security blanket for your digital assets.\n\n## Part 2: Putting On-chain SVGs to Work\n\nWhile IPFS remains a viable option—despite its potential fallibility—enterprising NFT creators and users have found another way to store NFTs—on-chain SVGs.\n\n\"*So, what exactly is an SVG.*\", you ask? Let's delve deeper.\n\n### An Introduction to SVGs\n\nScalable Vector Graphics (SVGs) are a way to represent images and graphics. When stored on the blockchain, these images become 100% immutable and decentralized.\n\nCreators can encode their NFTs as SVG types; thus, the entire image is stored directly on the blockchain. Even though this method may be a little more expensive than IPFS, it's a surefire way to ensure the longevity and accessibility of your precious NFTs.\n\n### SVG NFT\n\n<img src=\"/foundry-nfts/10-svg/svg1.png\" style=\"width: 100%; height: auto;\">\n\nAs illustrious as this looks, the actual visual output of SVGs can sometimes be unsightly. But remember, beauty lies in the eye of the beholder. The real allure of on-chain SVGs is the knowledge that your NFT remains accessible, immutable, and in its truest form, no matter what.\n\n<img src=\"/foundry-nfts/10-svg/svg2.png\" style=\"width: 100%; height: auto;\">\n\nBy understanding how NFT storage works, you can ensure your digital assets' safety and longevity. The choice—whether IPFS, on-chain SVGs, or a comprehensive mix of both—is yours to make. Happy creating!\n",
          "updates": []
        },
        {
          "lessonId": "a6c7f1ac-aea5-42f5-860b-c1a025608de9",
          "number": 11,
          "slug": "what-is-svg",
          "title": "What is an SVG?",
          "description": "Explains Scalable Vector Graphics (SVGs), their advantages, and how to create them. The lesson includes coding snippets for SVG creation and highlights their use in NFTs for on-chain storage.",
          "duration": 8,
          "videoUrl": "Za4XqL7bPsdEYUEJIa7oe1X5KGwjA8a4HmoS22WhtYY",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/11-what-is-svg/+page.md",
          "markdownContent": "***\n\n## title: What is an SVG?\n\n*Follow along the course with this video.*\n\n***\n\nWelcome to our exploration of Scalable Vector Graphics, lovingly known as SVGs. Today, we're moving beyond traditional image files to delve into the perks of SVGs, their functionality and how to create your own. So, let's get right into it!\n\n## What is an SVG?\n\nTo understand what an SVG is, we'll dive right into a helpful tutorial from our friends at [W3Schools](https://www.w3schools.com/graphics/svg_intro.asp). SVG stands for Scalable Vector Graphics. In simpler terms, SVG is a way to define images in a two-dimensional space using XML coded tags with specific parameters.\n\nSVGs are awesome because they maintain their quality, no matter what size you make them. If you stretch a traditional image file like a .jpg or .png, they become pixelated and lose clarity. SVGs don’t suffer from this issue because they’re scalable. They’re defined within an exact parameter, thus maintaining their pristine quality regardless of size.\n\n<img src=\"/foundry-nfts/11-svg2/svg2-1.png\" style=\"width: 100%; height: auto;\">\n\n## Creating Your Own SVG\n\nNow, let's talk about how you can create your own SVG. If you're following the W3Schools tutorial, you'll notice that you can modify SVG coding directly from the page. For instance, you can alternate the fill from the default color to blue and the outline (stroke) to black with the appropriate SVG parameters.\n\nYou can follow this exercise in your code editors as well. And if you are using Visual Studio Code, you can even preview your SVGs in real time.\n\n### SVG Coding Snippet\n\nHere is a typical SVG coding that you can try:\n\n```js\n<html>\n  <body>\n    <h1>My first SVG</h1>\n    <svg width=\"100\" height=\"100\">\n      <circle\n        cx=\"50\"\n        cy=\"50\"\n        r=\"40\"\n        stroke=\"green\"\n        stroke-width=\"4\"\n        fill=\"yellow\"\n      />\n    </svg>\n  </body>\n</html>\n```\n\nFor the live preview of your SVG, you can use various SVG viewers and SVG previewers available in the marketplace. Moreover, if you want to convert your SVG into a binary representation that can be passed via URL, you can use the `base64` command.\n\n**Note**: The base64 command might not be available on all machines, fret not, you can simply follow along and copy the steps as mentioned.(base64 --help will show if you have this command.)\n\n<img src=\"/foundry-nfts/11-svg2/svg2-2.png\" style=\"width: 100%; height: auto;\">\n\nBase 64 basically encodes your SVG data into a form that can be used in data URIs for embedding your SVGs into browsers. So let’s go ahead and pass an encoded SVG and see it rendered in the browser.\n\nAdd this small prefix `data:image/svg+xml;base64,` before the encoded SVG and voilà! Your SVG should read \"Hi, your browser decoded this” in the browser URL preview.\n\n## Utilising SVGs in NFT\n\nEmbedding SVGs becomes incredibly useful when dealing with Non-Fungible Token (NFT) assets. In the realm of NFTs, SVGs can be stored on-chain as URIs. This paves the way for dynamic and interactive NFTs.\n\nWith the same base64 encoding, you can pass entire image data right in the URL and this will be your token URI. Therefore, instead of using an IPFS hash for our Token Uri, you can fully rely on chain using this SVG..\n\nThe major advantage of this approach is that the SVG, which is now essentially code on-chain, can be updated and interacted with. This implies endless possibilities for your NFT. It can be designed to change, evolve, grow - limited only by your imagination!\n\n<img src=\"/foundry-nfts/11-svg2/svg2-3.png\" style=\"width: 100%; height: auto;\">\n\nThere you have it! We've just scratched the surface of SVGs and their vast potential within the realm of NFTs. This is an especially desirable competency for those looking to raise their game as smart contract developers.\n\nIn future posts, we will further explore the concept of ABIs and code packing in the context of SVGs and Smart Contracts. Great progress so far, and keep on learning!\n",
          "updates": []
        },
        {
          "lessonId": "15fe9028-8fd6-4e80-9cb2-fb3c44a17656",
          "number": 12,
          "slug": "create-dynamic-nft",
          "title": "Create a dynamic NFTs collection",
          "description": "Focuses on creating dynamic SVG NFTs, particularly a mood-changing NFT that alternates its appearance. It includes detailed instructions for setting up the NFT project, minting the NFTs, and defining their appearance.",
          "duration": 5,
          "videoUrl": "JCmH2YlyGgL765YBbgp013tYJSzjOWH6K3k2wn01wLyFU",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/12-svg-nft/+page.md",
          "markdownContent": "***\n\n## title: SVG NFT Intro\n\n*Follow along the course with this video.*\n\n***\n\nCreating SVG NFTs is a fascinating endeavor, especially if these NFTs can change their mood! In this practical guide, we'll build our dynamic SVG NFT—an innovative NFT whose image changes and whose data is 100% stored on-chain.\n\n## What Are We Building?\n\nOur ultimate task is to create a mood-changing NFT—bam, a Mood NFT! That's right, we're developing an NFT that can switch from happy to sad and vice versa.\n\nOur Mood NFT is housed with an intelligent function we call \"Flip Mood.\" This function alternates the mood of our NFT—if its mood is happy, it turns sad, and vice versa. As per the mood, our NFT will either display a happy or sad SVG that we will store on-chain.\n\n## Setting the Mood\n\nTime to roll up our sleeves and kick-off our Mood NFT project. Open up your SRC, create a new file—let's name it `MoodNft.sol`. Remember, before we start writing our contract, we need to define the SPDX license Identifier (MIT) and establish which version of Solidity we're working with (0.8.18 in our case). Now, let's begin to define our `MoodNft` contract.\n\n```js\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\ncontract MoodNft {}\n```\n\nOur NFT contract will contain several vital elements from the basic NFT, so let’s take some of that and import it into our new folder. Next, our NFT will be defined as an ERC721 token. Sustaining the moods (happy and sad SVGs) of our NFT is critical, so we'll pass these mood SVGs in our constructor. You can make your personalized Sad SVG. For this tutorial, we'll use this happy SVG.\n\n```js\nconstructor(\n        string memory sadSvgUri,\n        string memory happySvgUri\n    ) ERC721(\"Mood NFT\", \"MN\") {}\n\n```\n\n## Mood Tracking: Creat a Token Counter\n\nA token counter is an essential part of our Mood NFT. Hence, we need to create a private token counter `uint256 private s_tokenCounter`. We'll initiate the token counter in the constructor to zero.\n\n```js\n uint256 private s_tokenCounter;\n\nconstructor(\n        string memory sadSvgUri,\n        string memory happySvgUri\n    ) ERC721(\"Mood NFT\", \"MN\") {\n        s_tokenCounter = 0;\n    }\n\n```\n\nLet's save these SVGs as `string private s_sadSvgUri` and `string private s_happySvgUri`, and pass them:\n\n```js\nstring private s_sadSvgUri;\nstring private s_happySvgUri;\n```\n\n## Minting the Mood NFT\n\nOur mood NFT is now ready for anybody to mint! We'll define a public function `mintNFT()` that enables anyone to mint their Mood NFT. This function will contain a `safemint` statement that provides the `msg.sender` their Token ID. Also, remember to increment the token counter so that every new token gets a unique ID.\n\n```js\n  function mintNft() public {\n        // how would you require payment for this NFT?\n        _safeMint(msg.sender, s_tokenCounter);\n        s_tokenCounter = s_tokenCounter + 1;\n        emit CreatedNFT(s_tokenCounter);\n    }\n```\n\nFinally, we need to define what our NFT will look like. This is done using the `TokenURI` function, which takes the token ID as a parameter and returns a string memory.\n\n```js\nfunction tokenURI(uint256 _tokenId) public view override returns (string memory) {}\n```\n\nAnd that's a wrap! Developing mood-changing NFTs can be as fun as it sounds. Now it's your turn to create your mood NFT and bring your crazy, creative ideas to life!\n",
          "updates": []
        },
        {
          "lessonId": "f1face80-d228-4ce4-8566-e4a6733cb435",
          "number": 13,
          "slug": "svg-onchain-encoding",
          "title": "Encoding SVGs to be stored onchain",
          "description": "Teaches encoding SVGs in Base64 format for on-chain storage in NFTs. It covers the process of encoding and testing SVG NFTs, ensuring their proper functioning and appearance",
          "duration": 17,
          "videoUrl": "LQcpzY01ZCvnU9tVVEDebEdMEZ2g500BReuXF022wtf8vE",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/13-svg-nft-encoding/+page.md",
          "markdownContent": "***\n\n## title: SVG NFT Encoding\n\n*Follow along the course with this video.*\n\n***\n\nThis blog post provides an in-depth walkthrough on how to encode SVGs as part of your NFT metadata.\n\n## Getting Started\n\nFirst, you need to encode the SVGs separately to Base64 format. Here’s how:\n\nOpen your README file and delete everything inside. Let’s say we're going to encode one of the emotions.\n\n```js\nfunction tokenURI(\n        uint256 tokenId\n    ) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) {\n            revert ERC721Metadata__URI_QueryFor_NonExistentToken();\n        }\n        string memory imageURI = s_happySvgUri;\n\n        if (s_tokenIdToState[tokenId] == NFTState.SAD) {\n            imageURI = s_sadSvgUri;\n        }\n        return\n            string(\n                abi.encodePacked(\n                    _baseURI(),\n                    Base64.encode(\n                        bytes(\n                            abi.encodePacked(\n                                '{\"name\":\"',\n                                name(), // You can add whatever name here\n                                '\", \"description\":\"An NFT that reflects the mood of the owner, 100% on Chain!\", ',\n                                '\"attributes\": [{\"trait_type\": \"moodiness\", \"value\": 100}], \"image\":\"',\n                                imageURI,\n                                '\"}'\n                            )\n                        )\n                    )\n                )\n            );\n    }\n```\n\nNow, the important step.\n\nInstead of passing the SVG text in your smart contract (like `MoodNFT` for instance), pass in the already encoded version. It’s worth mentioning that base64 encoding the images on-chain may effectively reduce gas costs.\n\n## Testing the SVG NFT\n\nNow we need to ensure the SVG NFT is working as expected. of course both the Happy and Sad SVG have a different base64 encoded string. Let’s test it out.\n\n```js\nstring public constant HAPPY_MOOD_URI =\n        \"data:application/json;base64,eyJuYW1lIjoiTW9vZCBORlQiLCAiZGVzY3JpcHRpb24iOiJBbiBORlQgdGhhdCByZWZsZWN0cyB0aGUgbW9vZCBvZiB0aGUgb3duZXIsIDEwMCUgb24gQ2hhaW4hIiwgImF0dHJpYnV0ZXMiOiBbeyJ0cmFpdF90eXBlIjogIm1vb2RpbmVzcyIsICJ2YWx1ZSI6IDEwMH1dLCAiaW1hZ2UiOiJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUIyYVdWM1FtOTRQU0l3SURBZ01qQXdJREl3TUNJZ2QybGtkR2c5SWpRd01DSWdJR2hsYVdkb2REMGlOREF3SWlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpUGdvZ0lEeGphWEpqYkdVZ1kzZzlJakV3TUNJZ1kzazlJakV3TUNJZ1ptbHNiRDBpZVdWc2JHOTNJaUJ5UFNJM09DSWdjM1J5YjJ0bFBTSmliR0ZqYXlJZ2MzUnliMnRsTFhkcFpIUm9QU0l6SWk4K0NpQWdQR2NnWTJ4aGMzTTlJbVY1WlhNaVBnb2dJQ0FnUEdOcGNtTnNaU0JqZUQwaU5qRWlJR041UFNJNE1pSWdjajBpTVRJaUx6NEtJQ0FnSUR4amFYSmpiR1VnWTNnOUlqRXlOeUlnWTNrOUlqZ3lJaUJ5UFNJeE1pSXZQZ29nSUR3dlp6NEtJQ0E4Y0dGMGFDQmtQU0p0TVRNMkxqZ3hJREV4Tmk0MU0yTXVOamtnTWpZdU1UY3ROalF1TVRFZ05ESXRPREV1TlRJdExqY3pJaUJ6ZEhsc1pUMGlabWxzYkRwdWIyNWxPeUJ6ZEhKdmEyVTZJR0pzWVdOck95QnpkSEp2YTJVdGQybGtkR2c2SURNN0lpOCtDand2YzNablBnPT0ifQ==\";\n\n    string public constant SAD_MOOD_URI =\n        \"data:application/json;base64,eyJuYW1lIjoiTW9vZCBORlQiLCAiZGVzY3JpcHRpb24iOiJBbiBORlQgdGhhdCByZWZsZWN0cyB0aGUgbW9vZCBvZiB0aGUgb3duZXIsIDEwMCUgb24gQ2hhaW4hIiwgImF0dHJpYnV0ZXMiOiBbeyJ0cmFpdF90eXBlIjogIm1vb2RpbmVzcyIsICJ2YWx1ZSI6IDEwMH1dLCAiaW1hZ2UiOiJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBEOTRiV3dnZG1WeWMybHZiajBpTVM0d0lpQnpkR0Z1WkdGc2IyNWxQU0p1YnlJL1BnbzhjM1puSUhkcFpIUm9QU0l4TURJMGNIZ2lJR2hsYVdkb2REMGlNVEF5TkhCNElpQjJhV1YzUW05NFBTSXdJREFnTVRBeU5DQXhNREkwSWlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpUGdvZ0lEeHdZWFJvSUdacGJHdzlJaU16TXpNaUlHUTlJazAxTVRJZ05qUkRNalkwTGpZZ05qUWdOalFnTWpZMExqWWdOalFnTlRFeWN6SXdNQzQySURRME9DQTBORGdnTkRRNElEUTBPQzB5TURBdU5pQTBORGd0TkRRNFV6YzFPUzQwSURZMElEVXhNaUEyTkhwdE1DQTRNakJqTFRJd05TNDBJREF0TXpjeUxURTJOaTQyTFRNM01pMHpOekp6TVRZMkxqWXRNemN5SURNM01pMHpOeklnTXpjeUlERTJOaTQySURNM01pQXpOekl0TVRZMkxqWWdNemN5TFRNM01pQXpOeko2SWk4K0NpQWdQSEJoZEdnZ1ptbHNiRDBpSTBVMlJUWkZOaUlnWkQwaVRUVXhNaUF4TkRCakxUSXdOUzQwSURBdE16Y3lJREUyTmk0MkxUTTNNaUF6TnpKek1UWTJMallnTXpjeUlETTNNaUF6TnpJZ016Y3lMVEUyTmk0MklETTNNaTB6TnpJdE1UWTJMall0TXpjeUxUTTNNaTB6TnpKNlRUSTRPQ0EwTWpGaE5EZ3VNREVnTkRndU1ERWdNQ0F3SURFZ09UWWdNQ0EwT0M0d01TQTBPQzR3TVNBd0lEQWdNUzA1TmlBd2VtMHpOellnTWpjeWFDMDBPQzR4WXkwMExqSWdNQzAzTGpndE15NHlMVGd1TVMwM0xqUkROakEwSURZek5pNHhJRFUyTWk0MUlEVTVOeUExTVRJZ05UazNjeTA1TWk0eElETTVMakV0T1RVdU9DQTRPQzQyWXkwdU15QTBMakl0TXk0NUlEY3VOQzA0TGpFZ055NDBTRE0yTUdFNElEZ2dNQ0F3SURFdE9DMDRMalJqTkM0MExUZzBMak1nTnpRdU5TMHhOVEV1TmlBeE5qQXRNVFV4TGpaek1UVTFMallnTmpjdU15QXhOakFnTVRVeExqWmhPQ0E0SURBZ01DQXhMVGdnT0M0MGVtMHlOQzB5TWpSaE5EZ3VNREVnTkRndU1ERWdNQ0F3SURFZ01DMDVOaUEwT0M0d01TQTBPQzR3TVNBd0lEQWdNU0F3SURrMmVpSXZQZ29nSUR4d1lYUm9JR1pwYkd3OUlpTXpNek1pSUdROUlrMHlPRGdnTkRJeFlUUTRJRFE0SURBZ01TQXdJRGsySURBZ05EZ2dORGdnTUNBeElEQXRPVFlnTUhwdE1qSTBJREV4TW1NdE9EVXVOU0F3TFRFMU5TNDJJRFkzTGpNdE1UWXdJREUxTVM0MllUZ2dPQ0F3SURBZ01DQTRJRGd1TkdnME9DNHhZelF1TWlBd0lEY3VPQzB6TGpJZ09DNHhMVGN1TkNBekxqY3RORGt1TlNBME5TNHpMVGc0TGpZZ09UVXVPQzA0T0M0MmN6a3lJRE01TGpFZ09UVXVPQ0E0T0M0Mll5NHpJRFF1TWlBekxqa2dOeTQwSURndU1TQTNMalJJTmpZMFlUZ2dPQ0F3SURBZ01DQTRMVGd1TkVNMk5qY3VOaUEyTURBdU15QTFPVGN1TlNBMU16TWdOVEV5SURVek0zcHRNVEk0TFRFeE1tRTBPQ0EwT0NBd0lERWdNQ0E1TmlBd0lEUTRJRFE0SURBZ01TQXdMVGsySURCNklpOCtDand2YzNablBnbz0ifQ==\";\n\n    address USER = makeAddr(\"user\");\n\n    function testViewTokenURI() public {\n        vm.prank(USER);\n        moodNft.mintNft();\n        console.log(moodNft.tokenURI(0));\n    }\n\n```\n\n## Summary\n\nIn summary:\n\n1. A unique ID is generated for each MoodNFT.\n2. The metadata is stored and rendered directly from the blockchain.\n\nIf there's a need to add new moods, you can simply update the moods array.\n\nThis metadata standard is easy to adopt and highly adaptable, perfect for projects seeking to incorporate rich metadata for their NFTs. But remember to verify each line of your code to avoid any vulnerabilities. Happy coding!\n\n<img src=\"/foundry-nfts/13-encoding/encoding1.png\" style=\"width: 100%; height: auto;\">\n",
          "updates": []
        },
        {
          "lessonId": "2e1b663e-4070-4cf7-8858-e623c5d682e8",
          "number": 14,
          "slug": "change-on-chain-nft-image",
          "title": "Modify the NFT image onchain",
          "description": "This section is about adding functionality to change the NFT's appearance on-chain. It includes creating a function to flip the mood of an NFT, ensuring only the owner can modify it",
          "duration": 3,
          "videoUrl": "ypCDKWLaEz5zteeNgODKRjk92sSb1CHEvLxcRF3YHM8",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/14-svg-nft-flipping/+page.md",
          "markdownContent": "***\n\n## title: SVG NFT Flipping the Mood\n\n*Follow along the course with this video.*\n\n***\n\n## The \"Flip Mood\" Functionality\n\nImagine if we could interact with our NFTs and change their mood between happy and sad. It can add a new dimension to how we engage with our assets. Let's write a function to achieve this.\n\n```js\nfunction flipMood(uint256 tokenId) public {\n\n        if (s_tokenIdToState[tokenId] == NFTState.HAPPY) {\n            s_tokenIdToState[tokenId] = NFTState.SAD;\n        } else {\n            s_tokenIdToState[tokenId] = NFTState.HAPPY;\n        }\n    }\n```\n\nIn this function, `tokenId` is a unique identifier for our NFT. We're stating that this function should be public, available for interaction.\n\nBut first, we should ensure that only the owner of the NFT can flip its mood, right?\n\n## Ensuring Owner Access\n\nOf course this is something just the owner of the NFT should be able to do. We can achieve this by adding a if statement to our function and a modifier to our contract.\n\n```js\nerror MoodNft__CantFlipMoodIfNotOwner();\n\n if (!_isApprovedOrOwner(msg.sender, tokenId)) {\n            revert MoodNft__CantFlipMoodIfNotOwner();\n        }\n```\n\nHere, we use the 'require' statement to validate that it's the NFT owner attempting to flip the mood. If it isn't, the operation doesn't proceed, and we get a custom error stating, \"MoodNFT: Can't flip mood if not owner\".\n\n## Closing thoughts\n\n<img src=\"/foundry-nfts/14-flipping/flipping1.png\" style=\"width: 100%; height: auto;\">\n\nSprucing up our NFTs with a \"Mood Flip\" functionality provides a unique way for their owners to engage with these digital assets, marking a significant step forward in the NFT space. With the continuous evolution of this technology, the possibilities for future interaction and personalization are limitless. We're just getting started!\n",
          "updates": []
        },
        {
          "lessonId": "760ee30e-0eab-4f5b-a560-27c9dc85c6ac",
          "number": 15,
          "slug": "dynamic-nft-collection-deployment-script",
          "title": "Create the deployment script",
          "description": "Guides on automating the deployment process of Mood NFTs using scripting. It covers setting up the deploy script, encoding SVGs, and testing the deployment script for effectiveness.",
          "duration": 18,
          "videoUrl": "6vzQV3QnurrFA01KUyu1CLVrg1iqnZr01idZOtbyNxxDA",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/15-svg-deploy/+page.md",
          "markdownContent": "***\n\n## title: SVG NFT Deploy Script\n\n*Follow along the course with this video.*\n\n***\n\n## Deploying the Mood NFT Project\n\nIn this lesson, we'll automate the deployment process of the Mood NFT Project by scripting it. As you may already know, in the realm of blockchain development, scripts are super helpful to help automate repetitive processes, so let's get our hands dirty and simplify our work!\n\n## Creating the Deploy Mood NFT Script\n\nStarting off, create a new file for the deploy script named `DeployMoodNft.s.sol`. In this script file, include the SPDX License followed by the contract-deployment code, just as you typically would do in a Solidity contract.\n\n```js\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {Script} from \"forge-std/Script.sol\";\nimport {MoodNft} from \"../src/MoodNft.sol\";\n\ncontract DeployMoodNft is Script {\n    function run() external {}\n}\n```\n\nRemember we are deploying our Mood NFT, hence we'll need to import the MoodNFT contract. In our run function, it's time to set specifics on how the NFT will be deployed.\n\n## Preparing the Deploying Parameters\n\nThe Mood NFT contract accepts two parameters upon deployment: the \"sad SVG image URI\" and the \"happy SVG image URI\". Now we could hardcode these parameters into the script, but to make our lives a little easier and our script a little smarter, we're going to create a function that automatically encodes our SVGs.\n\n```js\nfunction svgToImageURI(\n        string memory svg\n    ) public pure returns (string memory) {\n        // example:\n        // '<svg width=\"500\" height=\"500\" viewBox=\"0 0 285 350\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"black\" d=\"M150,0,L75,200,L225,200,Z\"></path></svg>'\n        // would return \"\"\n        string memory baseURL = \"data:image/svg+xml;base64,\";\n        string memory svgBase64Encoded = Base64.encode(\n            bytes(string(abi.encodePacked(svg)))\n        );\n        return string(abi.encodePacked(baseURL, svgBase64Encoded));\n    }\n```\n\nThis function will intake an SVG file as text, encode it into a base 64 formatted string, then return it. To do this, we need to import the OpenZeppelin base64 library which allows us to encode our SVGs on chain.\n\n```js\nimport { Base64 } from \"@openzeppelin/contracts/utils/Base64.sol\";\n```\n\n## Implementing the Encoding Function\n\nThe SVG to Image URI function first defines a base URL.\n\n```js\nstring memory baseURL = \"data:image/svg+xml;base64,\";\n```\n\nNext, it encodes the SVG provided, concatenates that encoded string to the base URL, and voila, we have our encoded SVG string ready to be passed to the Mood NFT contract.\n\n```js\nstring memory svgBase64Encoded = Base64.encode(\n            bytes(string(abi.encodePacked(svg)))\n        );\n```\n\n<img src=\"/foundry-nfts/15-deploy/deploy1.png\" style=\"width: 100%; height: auto;\">\n\n## Reading in SVG Files\n\nNow that we have the means to encode SVG files, it's time to read the actual files in our Foundry scripting environment. As you may know, Foundry provides an awesome utility function named `readFile` which we will employ.\n\nBut before we do that, we need to set appropriate permissions within the \"foundry.toml\" file in our project to allow the script to read from specified directories.\n\n```makefile\n[profile.default]\nfs_permissions = [{ access = \"read\", path = \"./images/\"}]\n```\n\nAt this point, it's important to note that in settings and permissions, try to make `ffi = false` whenever you can for security reasons.\n\nNow that we've taken care of the permissions business, we can use the `readFile` function to read in our SVG files.\n\n```js\nstring memory sadSVG = VM.readFile(\"images/sad.svg\");string memory happySVG = VM.readFile(\"images/happy.svg\");\n```\n\n## Finalizing the Deployment Script\n\nFinally, we can proceed to deploy our Mood NFT with the encoded SVG URIs.\n\n```js\n    string memory sadSvg = vm.readFile(\"./images/dynamicNft/sad.svg\");\n    string memory happySvg = vm.readFile(\"./images/dynamicNft/happy.svg\");\n```\n\nAnd return the created Mood NFT for our test functions to utilize.\n\n```js\nreturn moodNFT;\n```\n\n## Testing our Deploy Script: Integration Tests vs Unit Tests\n\nLastly, but certainly not least, we test our deploy script. It will be best to implement both integration tests and unit tests for our script.\n\n<img src=\"/foundry-nfts/15-deploy/deploy2.png\" style=\"width: 100%; height: auto;\">\n\nThat's it for this tutorial! Enjoy your automated Mood NFT deployment. Write in the comment section for any questions, suggestions, or just to share your experience!\n",
          "updates": []
        },
        {
          "lessonId": "23802ffc-f88d-4bc6-85bf-c7633f5e963e",
          "number": 16,
          "slug": "debug-solidity-smart-contract",
          "title": "Debug your smart contract",
          "description": "Guides on automating the deployment process of Mood NFTs using scripting. It covers setting up the deploy script, encoding SVGs, and testing the deployment script for effectiveness.",
          "duration": 6,
          "videoUrl": "XLtda7pt6P00w8RXnm2mkGOTtJCvKJtsTJznic015rNMk",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/16-svg-debug/+page.md",
          "markdownContent": "***\n\n## title: SVG NFT Debugging\n\n*Follow along the course with this video.*\n\n***\n\nWelcome to a new highly detailed blog post on debugging, testing, and creating automated scripts for smart contracts. We will walk you through the process of running and debugging tests using the Forge test tool. We'll also give you some examples of integrating unit testing and integration testing. Buckle up as this is going to be an interesting journey through the jungle of smart contract testing.\n\n<img src=\"/foundry-nfts/16-debug/debug1.png\" style=\"width: 100%; height: auto;\">\n\n## Solving the URI Mystery\n\nAt this point, we decided to take a more detailed look at the `sadSvgUri`. We considered that the `tokenUri` and the `sadSvgUri` were not supposed to be the same because one is an image `Uri` while the other isn't. After a bit of back-and-forth, we figured out the `tokenUri` was supposed to equal our `Sad SVG Uri`.\n\n<img src=\"/foundry-nfts/16-debug/debug2.png\" style=\"width: 100%; height: auto;\">\n\nSo in order to achieve that we need to assert the actual token URI correspond to the sad SVG URI. We added the following code to our test script:\n\n```javascript\nfunction testFlipTokenToSad() public {\n        vm.prank(USER);\n        moodNft.mintNft();\n\n        vm.prank(USER);\n        moodNft.flipMood(0);\n\n        assert(\n            keccak256(abi.encodePacked(moodNft.tokenURI(0))) ==\n                keccak256(abi.encodePacked(SAD_MOOD_URI))\n        );\n    }\n```\n\nWith the mystery solved, we performed another run and successfully passed all tests.\n\n## Unit Test Versus Integration Test\n\nIn a nutshell, the process of testing we've just gone through is a good demonstration of the differences between a unit test and an integration test.\n\n* **Unit Test**: In our case, it was testing the specific function on our Deploy Mood NFT and Mood NFT.\n* **Integration Test**: This type of test combined the deployer with the Mood NFT and Basic NFT, ultimately showing what an integration test should look like.\n\n## Script Writing to Automate Deployment and Testing\n\nDon't want to manually type all of those Forge script commands? Let's walk through the process of automating those actions for deployment and testing.\n\nIn our case, we created a script that, once run, deploys both of our NFTs and even flips the mood of our NFT. You can add this script in your make file. Be sure to create scripts for minting the Mood NFT and flipping the Mood NFT too. Even though they are skipped in this post, they are also crucial for a complete automation setup.\n\n## Working on Code Coverage\n\nLastly, we highly recommend improving your code coverage. Our current coverage looks good for Basic NFT and Mood NFT, but scripts' coverage can certainly be improved. Writing comprehensive tests boosts your confidence that the code will function as expected.\n\nTo check code coverage, run:\n\n```bash\nforge coverage\n```\n\nThis will give you a detailed report of the coverage for each code section.\n\n## Wrapping Things Up\n\nWe believe that this practice exercise will help you appreciate the importance of testing, debugging and automating scripts when working with smart contracts. It's a lot more fun to run a single command that deploys, tests and completes your NFT than to manually type each command individually.\n\nRemember to constantly evaluate your test coverage and keep it high. If you do, you will significantly increase your confidence that your code performs exactly as expected. Happy testing!\n",
          "updates": []
        },
        {
          "lessonId": "b715cff6-2fe2-4261-a51e-6f8b065a5b95",
          "number": 17,
          "slug": "svg-anvil",
          "title": "Deploy and interact using Anvil",
          "description": "This lesson covers deploying and interacting with NFTs using Anvil, a local Ethereum network. It includes setting up MetaMask with Anvil, deploying Mood NFTs, minting, and flipping their mood, demonstrating the process of NFT interaction on a local blockchain network.",
          "duration": 6,
          "videoUrl": "pVIQhmjo24kP42uDoVd3m5ysNIm2Rsv6oXG02WiemXDQ",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/17-svg-anvil/+page.md",
          "markdownContent": "***\n\n## title: SVG NFT Anvil Demo\n\n*Follow along the course with this video.*\n\n***\n\n## Deploying and Flipping a 100% On-Chain NFT on Anvil\n\nWelcome to this exciting tutorial where we will deploy and flip an on-chain NFT minted on our own local network, Anvil. Experience firsthand the speed and efficiency of Anvil, with all the steps demonstrated live in our MetaMask!\n\n## Setting up MetaMask with Anvil\n\nFor live interactions with our NFT, we'll utilize MetaMask. Follow these steps to set up MetaMask with your Anvil chain:\n\n1. Within MetaMask, choose `Add Network`.\n2. Edit the settings to coincide with your Anvil chain.\n3. Reset your Anvil chain to reflect these new settings.\n4. Verify your address is listed in the account. If not, import one from one of the private keys.\n5. Clear your activity tab- Go to your Account Settings -> Advanced -> Clear activity tab.\n\nWith these steps, your MetaMask is primed and ready for the Mood NFT.\n\n<img src=\"/foundry-nfts/17-anvil/anvil1.png\" style=\"width: 100%; height: auto;\">\n\n## Deploying the Mood NFT on Anvil\n\nWith our local chain in place and MetaMask set up, we're ready to deploy the Mood NFT on Anvil. Run the `Make Deploy Mood` command and if successful, you'll get a contract address for your Mood NFT.\n\n```makefile\ndeployMood:\n\t@forge script script/DeployMoodNft.s.sol:DeployMoodNft $(NETWORK_ARGS)\n```\n\n## Interacting with the Mood NFT\n\nReady to mint an NFT and interact with it? We'll utilize `cast` to accomplish this:\n\n1. Send a `mint NFT` call to your contract address.\n2. Ensure to pass in the private key from your account that has some money in it.\n3. Use the Anvil RPC URL from your `make` file.\n4. Execute the mint command with the right private key and, Voila- You've minted an NFT!\n\n```makefile\nmintMoodNft:\n\t@forge script script/Interactions.s.sol:MintMoodNft $(NETWORK_ARGS)\n```\n\nYou can then import the NFT into MetaMask using the contract address. Add the Token ID and behold- your Mood NFT is live and ready for action!\n\n## Flipping the Mood NFT\n\nPerhaps one of the most exciting features of our Mood NFT is the ability to flip its mood. In our command window, we call the `Flip Mood` function on our Token Zero, reflecting the change in MetaMask.\n\nRemove the NFT and re-add it using the contract address. Your Mood NFT strikes a different mood!\n\n<img src=\"/foundry-nfts/17-anvil/anvil2.png\" style=\"width: 100%; height: auto;\">\n\n## Wrapping up\n\nWe've created, deployed, and minted an NFT on our own network with Anvil, and interacted with it through MetaMask! You could replicate these steps to deploy on a testnet, or even a main net.\n\nAs a best practice, always aim to keep your NFTs decentralized. Use IPFS to store metadata regarding NFTs to ensure they're 100% on-chain, as opposed to being centrally controlled via websites or similar platforms.\n\nCongratulations and here's to your adventures in creating and flipping mood with NFTs!\n",
          "updates": []
        },
        {
          "lessonId": "5da078de-11b0-4a3e-bf28-4c5e3249842b",
          "number": 18,
          "slug": "introduction-to-filecoin-arweave",
          "title": "Introduction to Filecoin and Arweave",
          "description": "Introduces Filecoin and Arweave, two decentralized storage solutions for NFT metadata. The lesson explores their features, benefits, and use cases, with insights from an expert at the Filecoin Foundation, highlighting the future of decentralized data storage.",
          "duration": 8,
          "videoUrl": "Y6s5500CAKyopJFvpNK4XNPzcNXqYClZCrUUKHrCHDpw",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/18-filecoin-arweave/+page.md",
          "markdownContent": "***\n\n## title: Filecoin & Arweave\n\n*Follow along the course with this video.*\n\n***\n\nIn today's rapidly developing digital world, decentralized storage solutions are increasingly becoming the go-to for storing NFT (Non-Fungible Tokens) metadata. Among these solutions, Rweave and Filecoin stand out as the most popular. They present exciting opportunities for users to deploy their NFT metadata in a flexible and secure manner.\n\nWe'll explore these innovative storage platforms, diving deep into their core principles and benefits. Moreover, we'll also gain insights from a special guest, Ali, a developer relations engineer at the Filecoin Foundation.\n\n## Decentralized Storage Solutions - Rweave and Filecoin\n\nTo help you understand the concept of storing NFT metadata using decentralized storage solutions, we need to focus on two key players in the field - Rweave and Filecoin.\n\n1. **Arweave**\n\nArweave is a decentralized storage network that makes data immune to modification, ensuring data validity over very long periods. This is an ideal solution for anyone looking for a permanent database.\n\n1. **Filecoin**\n\nProviding reliable and cost-effective storage, Filecoin is a decentralized protocol that propels the open-market for data storage services.\n\nA great tool to help deploy your NFT metadata onto decentralized storage solutions such as Filecoin is **NFT Storage**. This site makes the deployment process seamless and smooth. You're not limited to SVGs on-chain; you can also upload actual images onto these decentralized storage solutions.\n\n## An Expert's Take: The Vision of Filecoin\n\nBringing expert insight into this subject, we welcome Ali from the Filecoin Foundation. Ali shares her view on the mission of Protocol Labs and Filecoin, as well as the vision they have to democratize the internet and web.\n\nShe elaborates on the growing importance of data in our daily lives and the tech stack, reinforcing its critical role in the web 3.0 revolution.\n\n<img src=\"/foundry-nfts/18-filecoin/filecoin1.png\" style=\"width: 100%; height: auto;\">\n\n## Filecoin: The Data Storage Revolution\n\nFilecoin, since its launch in 2020, has been working tirelessly towards decentralizing the data infrastructure for the internet. Their layer one solution, Filecoin Virtual Machine (FVM), has launched some impressive functionalities.\n\n* **Filecoin Data Deal Making:** It involves setting up an agreement between a client and a miner to store data.\n* **Tokenization of Data Sets:** With tokenization, data can be protected securely and transparently.\n* **Data DAOs:** Filecoin's on-chain tools allow data to be collectively owned and governed by an organization (DAO - Decentralized Autonomous Organization).\n\nAnd many more use cases are being developed, showcased in the [Filecoin docs](https://docs.filecoin.io/).\n\nTo build a robust computation over all the useful data stored in Filecoin, they are focusing on layer Two (L2) and computation over data projects like IPC (Interplanetary Consensus Project) and Bacquio.\n\nTo get started with Filecoin, try deploying a smart contract to FVM, or use the storage helper - Web3 Storage or NFT Storage, to engage with the technology directly.\n\n## The Role of ABI Encode Pack\n\nBut, what does all this mean, if we haven’t covered what Abi encode pack is and how it works? The Abi encode pack is an essential Ethereum function that we've been using throughout this course. It is used to define how data is formatted for the Ethereum Virtual Machine (EVM).\n\nIn our following lessons, we'll explain Abi encode pack in detail using live examples. To get a head start, you can find all the course codes and images in the SRC sublesson.\n\nIn conclusion, the embrace of decentralized storage solutions like Rweave and Filecoin opens up a myriad of opportunities and functionalities for users to deploy and manage NFT metadata. It’s indeed an intriguing space with much to offer, and it’s only bound to grow more prevalent in the future.\n\nStay tuned for more information on the complexities of working with and understanding these storage solutions. Happy learning!\n",
          "updates": []
        },
        {
          "lessonId": "31cb90f0-4c98-4621-9742-ac0b6cc989a2",
          "number": 19,
          "slug": "evm-opcodes-advanced",
          "title": "Advanced EVM - Opcodes, calling, etc",
          "description": "Delves into advanced Ethereum Virtual Machine (EVM) concepts, focusing on opcodes and function calls. It demonstrates decoding transaction data using MetaMask and highlights the importance of verifying transactions to ensure safety in the cryptocurrency world.",
          "duration": 23,
          "videoUrl": "yxZ7H4009019A5XRsCm02H3fSJT7g5luBlZtzrO00U600woo",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/19-advanced-evm/+page.md",
          "markdownContent": "***\n\n## title: Advanced EVM - Opcodes, Calling, and Encoding\n\n*Follow along the course with this video.*\n\n***\n\nToday, we're embarking on an exciting journey to unveil the mystery behind decoding transaction data using MetaMask. This wallet is used to perform many activities in the cryptocurrency world, but one activity that may seem challenging is the \"decoding of transaction data.\" Here, we explain this process using Wet, a contract that wraps native ETH into an ERC-20 token.\n\n## Setting up MetaMask\n\nThe first step in our journey is as easy as pie. It's the setup phase which calls for the connection to MetaMask. Here, we will be using the Sepolia Contract, as it is one of the existing contracts.\n\nFor this stage, all you need to do is:\n\n1. Navigate to your contract.\n2. Click on \"Write Contract.\"\n3. Connect to web3 and open up your MetaMask.\n\nIn this scenario, we will be calling the \"Transfer From\" function. As an aside, you should note that at times, MetaMask may fail to identify the function you are trying to call—this is where the fun begins.\n\n<img src=\"/foundry-nfts/19-evm/evm1.png\" style=\"width: 100%; height: auto;\">\n\n## Variance Check\n\nFrom there, you need to verify if your transaction data is accurate.\n\nTo do this, you decode the function you’re calling and its parameters by pasting the hex string from the transaction into the call data decode command.\n\nWhen you complete these steps, MetaMask will display your decoded data. This data keeps the essence of your transaction, the information about the function you're calling and the parameters it utilizes.\n\n<img src=\"/foundry-nfts/19-evm/evm2.png\" style=\"width: 100%; height: auto;\">\n\n## Performing Transactions Safely\n\nThe said steps are applicable when performing transactions of any form in the cryptocurrency world.\n\n### An example:\n\nLet's say you wish to swap ETH for a token using Uniswap. After initiating the \"swap\" process, MetaMask shows you a transaction, but are you sure it's the transaction you want to make?\n\nTo confirm, you follow the steps previously outlined:\n\n1. Check your contract addresses.\n2. Read the function of the contract.\n3. Check the function selector.\n4. Decode the call data parameters.\n\nBy doing so, you can be utterly sure your wallets are performing the expected transactions.\n\nMeanwhile, it's important to note that some upcoming projects like Fire are working on the creation of wallets that can automatically decode transaction data. Hopefully, this will make for safer transactions and effectively eliminate the chances of falling victim to malicious transactions.\n\n## Wrapping Up\n\nAlways remember to verify the details of your transactions when dealing with large amounts of money in the cryptocurrency world, as transactions cannot be undone. With this guide, sending transactions, especially on MetaMask, should be a walk in the park. Stay safe and Happy Trading!\n",
          "updates": []
        },
        {
          "lessonId": "523a059e-80b6-472f-a1d4-5d8cd49726a8",
          "number": 20,
          "slug": "evm-encoding",
          "title": "Advanced EVM - Encoding",
          "description": "Explores ABI encoding and decoding in the context of EVM. The lesson breaks down the process of converting variables for use in transaction data fields, emphasizing the importance of understanding bytecode and binary for blockchain transactions.",
          "duration": 6,
          "videoUrl": "2Kpc41cTMekmo7HM33oOh4R0163LvpF82Vn601vw1dmDw",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/20-evm-encoding/+page.md",
          "markdownContent": "***\n\n## title: Advanced EVM - Encoding functions directly\n\n*Follow along the course with this video.*\n\n***\n\n### Introduction\n\nToday, we're going to take a deep dive into a concept that's integral to interacting with Ethereum and any EVM-compatible chain - ABI encoding and decoding. With the basics of this concept under our belt, we'll see how it aligns itself to the bytecode the Ethereum Virtual Machine (EVM) uses. At its core, this process involves converting different variables into binary or other such low-level byte representation for use in transaction data fields.\n\n<img src=\"/foundry-nfts/20-function/function1.png\" style=\"width: 100%; height: auto;\">\n\nLet’s break down some vital elements before we delve into the intricacies of ABI encoding and decoding.\n\n### Understanding Bytecode and Binary\n\nBytecode and binary are low-level programming languages that computers or the Ethereum network use for their transactions. This strange series of characters, which seem utterly incoherent to us, are but different codes that execute various functions in the Ethereum Blockchain.\n\n### Contract Deployment and Function Calls\n\nWith a better grasp of binary and bytecode, let's investigate what happens when we deploy a contract or make a function call. Think of the `data` field in the contract deployment as the keeper of all the binary code of the contract. In a function call, the `data` field contains the function to call at the given address.\n\nIf we examine *Etherscan*, a popular Ethereum Blockchain explorer, we can look at the input data of a transaction. This seemingly indecipherable, convoluted bit of 'hex' or binary is the `data` field of the transaction. Essentially, this is what the EVM uses as a guide to know which function to execute.\n\n### Populating the 'Data' Piece\n\nThis knowledge equips us with a seemingly bizarre ability. Whenever we send a transaction, we can fill in the `data` field ourselves with the binary code we want to execute. If we glance back at one of the previous sections where we discussed Ethers, we can use our understanding of function calls and binary to populate this `data` field with a function that we want to call, in binary format.\n\nAt first glance, this might sound unappealing. After all, why would someone desire to manually feed in binary code into the `data` field when we have the ABI and other interfaces designed to make our lives easier? The answer lies in the flexibility this presents. Perhaps all you have is the function name, or maybe, you only have the parameters you want to send. If you'd like your code to make arbitrary function calls or perform intricate tasks, then manually defining your `data` field becomes an invaluable asset in your development arsenal.\n\n### Low-Level Keywords: 'Call' and 'Static Call'\n\nWith this newfound knowledge, how do we go about challenging the norms and making these custom `data` calls? Thankfully, Solidity extends some low-level keywords just for us: `call` and `static call`.\n\nThe `call` keyword lends us the ability to call functions and change the state of the blockchain. On the other hand, `static call` allows us to call 'view' or 'pure' functions, which don't alter the state of the blockchain and just return a value.\n\nIf we modify the data in our `call` function using these parameters, we'll find that we can influence the value of our transactions directly. Moreover, the `gasLimit` and `gasPrice`, which are integral to the financial aspect of transactions, can also be changed.\n\n### Using Parentheses to Add Data\n\nIf we pinpoint the location of the parentheses in a typical `call`, we come across a region where we can add our `data`. When specified, instead of merely sending money to a function, we can use this space to `call` different functions we desire.\n\n<img src=\"/foundry-nfts/20-function/function2.png\" style=\"width: 100%; height: auto;\">\n\nIn conclusion, ABI encoding and decoding enable us to have more control over our transactions and function calls. Therefore, understanding the low-level process enables not only a broader understanding of how Ethereum works but also opens the door to more complex and custom transaction handling in the blockchain.\n",
          "updates": []
        },
        {
          "lessonId": "166753f8-2135-4707-b712-c20471474ac9",
          "number": 21,
          "slug": "avanced-evm-recap",
          "title": "Advanced EVM - Recap",
          "description": "A recap of the advanced EVM concepts covered in the course. It revisits topics like string combination, low-level concepts, binary encoding, and the use of the 'call' function in Solidity, summarizing the key takeaways from the advanced sections of the course.",
          "duration": 2,
          "videoUrl": "LambPv2u0201jvTp8fbSdubbt3MEparXBXSgBwCRIclJE",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/21-evm-recap/+page.md",
          "markdownContent": "***\n\n## title: Advanced EVM - Encoding functions recap\n\n*Follow along the course with this video.*\n\n***\n\nHello there! Trust me when I say we've covered a lot of ground together on this fascinating journey into the world of Solidity. But fear not, we're not done unraveling its complexities and building our understanding one block at a time.\n\n## Quick Recap\n\nBefore we dive into today's topic – the magic of call function, let's do a quick refresher on what we've explored in our previous discussions.\n\n### Combining Strings\n\nYou remember how we’ve talked about combining strings with the syntax like `Abi.encodePacked()` and then typecast it to a string, right? And you’ll recall how we observed that in newer versions of Solidity, the syntax looks something like `string(\"hi mom, miss you\")`. It's important to note that this works well in the newer versions, but might throw an error in the older Solidity versions.\n\n### Understanding Low-Level Concepts\n\nWe also took a deep dive into some low-level concepts, didn't we? We learnt about compiling our contracts, dealing with the mysterious ABI file and that weird binary thing (you know, that string of numbers and letters that makes our heads spin!). When we deploy a contract, this obscure code is what gets sent in the 'data' field of our contract creation transaction.\n\nFor contract creations, the data is populated with binary code. When it comes to function calls, the data is used to define what functions need to be called and with what parameters. But fret not, this is precisely what we're prepping ourselves to learn next!\n\n### Decoding the Enigma of Binary Encoding\n\nRemember how we can encode just about anything we want into this 'number and letter' code to save space through a method called `encodePacked`? We also learnt we can decode stuff that's been encoded, although we can't decode stuff that was encoded with the `encodePacked` method. Interesting, isn't it? We mastered multi encoding and then multi decoding, thus adding several cool tricks to our Solidity hats!\n\n### Introducing the Call Function\n\nOnwards, we analyze the power of the 'call' function. We realized that we can add data in the call function to make any call we want to any smart contract. Powerful, isn’t it?\n\n<img src=\"/foundry-nfts/21-evm-recap/evm-recap1.png\" style=\"width: 100%; height: auto;\">\n\n## Next Up: Handling the Call Function\n\nI bet you're raring to go now! So, let's deep dive into this exciting concept of how to use the 'call' function to make any calls we want to any smart contract.\n\nBefore you head out though, now's a great time to take that much-needed break. We just went over some brain-racking concepts. And like I always say, it's absolutely fine if you don't get everything the first time around. It's a complex subject and we're here for the entire marathon, not just the sprint. So feel free to revisit these ideas at your own pace and keep exploring this fascinating world of Solidity. Until next time!\n",
          "updates": []
        },
        {
          "lessonId": "b6e9292c-29ee-4a69-8a29-910fd5b8eca3",
          "number": 22,
          "slug": "evm-signatures-selectors",
          "title": "EVM signatures selectors",
          "description": "Focuses on EVM encoding signatures and selectors. The lesson explains how to populate the data field in function calls, the role of function selectors, and the use of ABI to call functions without explicit interface definitions.",
          "duration": 15,
          "videoUrl": "WUsE7MASeXwiqPNpXCpxLFo023JuXcxqKE7dDMI02a00IE",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/22-evm-signatures-selectors/+page.md",
          "markdownContent": "***\n\n## title: Advanced EVM - Encoding Signatures & Selectors\n\n*Follow along the course with this video.*\n\n***\n\nWelcome back! Having discussed encoding before, let's now take our discussion a little further and understand how to populate the data field in a function call.\n\nIn essence, we will learn how to simplify transactions at the base level by means of binary, bytes, and hexadecimal to interact with smart contracts. Getting to grips with these concepts will allow us to emulate what the blockchain does at the fundamental level. Let's dive in and commence this learning journey.\n\n## Creating a New File and Setting Up\n\nTo kick things off, we'll create a new file called *call anything. sol*. We start with an SPDX license identifier of MIT and proceed to break down the code on this file.\n\nThe first thing to note is that to call a function with just the data field of the function call, we need to encode the function name & its parameters. When a function is called, we specify the function name and the parameters.\n\nThese need to be encoded down to the binary level to allow EVM (Ethereum-based smart contracts) and Solidity to comprehend what's happening.\n\n## Understanding Function Selectors and their Role\n\nTo achieve this, we need to delve into a couple of concepts. The first aspect relates to what is known as the 'function selector'. The function selector happens to be the first four bytes of the 'function signature'.\n\nThe function signature is essentially a string defining the function name and parameter. If 'transfer' is a function, for instance, it's going to have a function signature and will accept an address and a UN 256 as inputs.\n\nTo understand Solidity better, let's take a look at the bytecode and binary code. A function selector like 'transfer' informs Solidity to execute the transfer function. One of the ways to get the function selector is by encoding the function signature and grabbing its first four bytes.\n\n## Setting Up the Contract\n\nLet's now create the contract for our exercise with Solidity 0.8.7. We'll call this contract 'call anything'. With two storage variables in place, we have our function set up called 'transfer'.\n\nNotice that while the transfer function normally deals with an ERC-20 transfer, we are using it here with an address and a UN 256 amount. The idea is to set these values and work with the function to understand how it impacts our output.\n\nTo achieve this, we will create a function to get that function selector.\n\n```js\nfunction getSelectorOne() public pure returns(bytes4 selector){\n    selector = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n}\n```\n\nOnce we have compiled our code and run it, we access the function selector by clicking on 'getSelector1'. This provides us with the bytes that informs our Solidity contract that we refer to the transfer function with an address and a uint256 as input parameters.\n\n## Encoding The Parameters\n\nThe next step in this process involves encoding the parameters with our function selector.\n\n```js\nfunction getDataToCallTransfer(address someAddress, uint256 amount) pubic pure returns(bytes memory){\n    return abit.encodeWithSelector(getSelector1(), someAddress, amount);\n}\n```\n\nABI (Application Binary Interface) plays a key role here. ABI is instrumental in ensuring that different system components interact seamlessly with each other. Here, it encodes the function selector and the arguments and then attaches the encoding to the specified four-byte selector.\n\nCompiling and running it helps us see how all the encoded data fits into the transaction data field. This further facilitates the contract in calling the transfer function and passing an address and an amount.\n\n## The Power of ABI to Call a Function\n\nWith these aspects in place, we can now use ABI to call functions without explicitly having to mention the function. We can create a function that calls the transfer function by encoding all necessary parameters.\n\n```js\nfunction callTransferFunctionDirectly(address someAddress, uint256 amount) public returns(bytes4, bool){\n    (bool success, bytes memory returnData) = address(this).call(\n        //getDataCallTransfer(someAddress, amount)\n        abi.encodeWithSelector(getSelectorOne(), someAddress, amount)\n    );\n    return(bytes4(returnData), success);\n}\n```\n\nUsing the `address(this).call` method, we can directly call the function with the give parameters. The method returns a boolean value for success and the return data of the call.\n\nThis call function, while considered low-level, illustrates the ability to call the transfer function without actually having to call it directly. This demonstration lays the foundation for understanding how to interact between different contracts using ABI encoding and decoding methods.\n\n## Adjustments Using ABI: encodeWithSelector and encodeWithSignature\n\nABI function also provides us with another method: `encodeWithSignature`. This method simplifies the earlier mentioned processes as it turns the function string into a selector for us.\n\n```js\nfunction callTransferFunctionDirectly(address someAddress, uint256 amount) public returns(bytes4, bool){\n    (bool success, bytes memory returnData) = address(this).call(\n        //getDataCallTransfer(someAddress, amount)\n        abi.encodeWithSignature(\"transfer(address,uint256)\", someAddress, amount)\n    );\n    return(bytes4(returnData), success);\n}\n```\n\nThis new function varies in no way from the previous function. Both functions carry out the same tasks; the only difference lies in the approach, with the second case simplifying things by combining the encoding process. This streamlines the encoding of the function selector on our behalf.\n\n### Note\n\nIt's generally considered good practice to use high-level approaches such as import interfaces rather than low-level calls as they provide the compiler's support and ensure data type matching. Despite this, mastering such low-level Solidity techniques allows us to appreciate the flexibility and versatility of the code more fully.\n\n## Recap and Next Steps\n\nThis advanced lesson on coding in Solidity reveals the importance of using encoding and decoding to affect smart contracts. It's normal to find these processes challenging initially. However, as we continue to practice, we will grow more comfortable with them.\n\nFor those who want to dig a little deeper, I recommend [Deconstructing Solidity](https://blog.openzeppelin.com/deconstructing-a-solidity-contract-part-i-introduction-832efd2d7737/) by Open Zeppelin. This article goes further into the behind-the-scenes of a contract, a useful resource if you're interested in opcodes and lower-level components.\n\nThank you for sticking with me throughout this in-depth lesson on binary encoding in Solidity. Cheers and until the next time.\n",
          "updates": []
        },
        {
          "lessonId": "ba69714a-ca5e-456b-9c6c-1afc337661f0",
          "number": 23,
          "slug": "verifying-transaction-metamask",
          "title": "Verifying a transaction in Metamask",
          "description": "Provides a guide on verifying transactions in MetaMask. It includes steps to decode transaction data and emphasizes the importance of transaction verification for security purposes, especially when swapping tokens or interacting with smart contracts.",
          "duration": 8,
          "videoUrl": "TW5lOPKMmAPYPAlk4j77E53GKOjg7nlHmh8hY4MFtLE",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/23-verifying-metamask/+page.md",
          "markdownContent": "***\n\n## title: Verifying MetaMask transactions\n\n*Follow along with this video.*\n\n***\n\nToday, we're embarking on an exciting journey to unveil the mystery behind decoding transaction data using MetaMask. This wallet is used to perform many activities in the cryptocurrency world, but one activity that may seem challenging is the \"decoding of transaction data.\" Here, we explain this process using Wet, a contract that wraps native ETH into an ERC-20 token.\n\n## Setting up MetaMask\n\nThe first step in our journey is as easy as pie. It's the setup phase which calls for the connection to MetaMask. Here, we will be using the Sepolia Contract, as it is one of the existing contracts.\n\nFor this stage, all you need to do is:\n\n1. Navigate to your contract.\n2. Click on \"Write Contract.\"\n3. Connect to web3 and open up your MetaMask.\n\nIn this scenario, we will be calling the \"Transfer From\" function. As an aside, you should note that at times, MetaMask may fail to identify the function you are trying to call—this is where the fun begins.\n\n<img src=\"/foundry-nfts/23-metamask/metamask1.png\" style=\"width: 100%; height: auto;\">\n\n## Decoding the Call Data\n\nAfter setting up MetaMask, transacting, and the transaction confirmation pops up, you’re now ready to decode the transaction data.\n\nThe next step to take here is to copy the hex data and proceed to your terminal. Within your terminal, you'll use the `cast` helper. This tool comes with a vast array of commands like `call data decode` which is designed to decode ABI-encrypted input data.\n\n*Equation 1: cast call data decode SIG call data*\n\n<img src=\"/foundry-nfts/23-metamask/metamask2.png\" style=\"width: 100%; height: auto;\">\n\nIf your function selector doesn't match, you can use a different signature database to find the correct function. In some unusual cases, a contract might have two functions with the same signature, which is unsupported in Solidity.\n\n## Variance Check\n\nFrom there, you need to verify if your transaction data is accurate.\n\nTo do this, you decode the function you’re calling and its parameters by pasting the hex string from the transaction into the call data decode command.\n\n*Equation 2: cast call data decode SIG call data*\n\nWhen you complete these steps, MetaMask will display your decoded data. This data keeps the essence of your transaction, the information about the function you're calling and the parameters it utilizes.\n\n## Performing Transactions Safely\n\nThe said steps are applicable when performing transactions of any form in the cryptocurrency world.\n\n### An example:\n\nLet's say you wish to swap ETH for a token using Uniswap. After initiating the \"swap\" process, MetaMask shows you a transaction, but are you sure it's the transaction you want to make?\n\nTo confirm, you follow the steps previously outlined:\n\n1. Check your contract addresses.\n2. Read the function of the contract.\n3. Check the function selector.\n4. Decode the call data parameters.\n\nBy doing so, you can be utterly sure your wallets are performing the expected transactions.\n\nMeanwhile, it's important to note that some upcoming projects like Fire are working on the creation of wallets that can automatically decode transaction data. Hopefully, this will make for safer transactions and effectively eliminate the chances of falling victim to malicious transactions.\n\n## Wrapping Up\n\nAlways remember to verify the details of your transactions when dealing with large amounts of money in the cryptocurrency world, as transactions cannot be undone. With this guide, sending transactions, especially on MetaMask, should be a walk in the park. Stay safe and Happy Trading!\n",
          "updates": []
        },
        {
          "lessonId": "dfedd4c2-96d5-4093-b8ce-c669163e7936",
          "number": 24,
          "slug": "nft-and-andvanced-evm-recap",
          "title": "Section recap",
          "description": "A comprehensive recap of the entire course, summarizing key concepts such as NFT basics, storage options, advanced EVM topics, smart contract interaction, and the use of tools like MetaMask for transaction verification.",
          "duration": 4,
          "videoUrl": "Vjbg00RhOexykjOo01Iec01leXN3FnYnKqOwyTVx0201cCPk",
          "rawMarkdownUrl": "/routes/advanced-foundry/2-nfts/24-recap/+page.md",
          "markdownContent": "***\n\n## title: Recap\n\n*Follow along with this video.*\n\n***\n\nWow! We’ve traversed quite the technological terrain in this course. We've gained knowledge about NFTs, financial wallets, encoding, transaction viewing, decoding hex data and more. We have also had hands-on exercises to create a basic NFT with all the main functionalities necessary. So, let's do a quick run-through of all that we've covered in this course.\n\n## Understanding NFTs\n\nFirst and foremost, we demystified what an NFT actually is. NFT stands for Non-Fungible Token, a unique cryptographic token on blockchain that represents ownership or proof of authenticity of an item or asset, digital or physical.\n\nWe didn't stop at learning theoretically, we created our own basic NFT equipped with all the essential functions, such as the Token URI, which pointed to the metadata, and the Mint NFT function.\n\n```js\n  function mintNftOnContract(address basicNftAddress) public {\n        vm.startBroadcast();\n        BasicNft(basicNftAddress).mintNft(PUG_URI);\n        vm.stopBroadcast();\n    }\n```\n\n## Storing NFTs: On-chain vs IPFS\n\nNext, we learnt about NFT storage, specifically the difference between storing the NFT metadata on-chain vs on IPFS. On-chain storage translates into a higher cost but boasts a more decentralized version. Storing on IPFS, on the other hand, is a bit cheaper.\n\nAside from IPFS and on-chain, we also briefly explored Filecoin and Rweave, two other decentralized storage platforms to consider. These offer a more decentralized, yet still cost-effective, solution than storing on the ETH mainnet.\n\n## Beyond the Basics\n\nOur learning journey didn't end there. We delved into more advanced matters like file reading from scripts, base 64 encoding, function signatures, function selectors, different encoding types and diverse methods for data encoding. We also mastered calling any function regardless of whether we have the interface, provided we have the function signature.\n\n## Behind the Scenes of Transactions\n\nExploring further, we got a handle on the nitty-gritty of transactions on the blockchain and the data included when sending transactions. We also learnt how to view transactions on a block explorer and delve into the related input data.\n\nA great example can be found when checking out previous transactions. On any block explorer, select a transaction, and join us as we navigate to more details to discover function information and input data.\n\n<img src=\"/foundry-nfts/24-recap/recap1.png\" style=\"width: 100%; height: auto;\">\n\n## The Journey Ahead\n\nReflecting on the lessons, it's clear we've learnt so much! And it is exciting to see how quickly the knowledge and skills are growing. As we move forward, you'll go through more advanced sections like the Foundry DFI stablecoin, upgrades, governance and introduction to security.\n\nTake a well-deserved break, and when you're ready, tweet your excitement about your super advanced learnings. You're on the path towards becoming a phenomenal smart contract developer. I can't wait to see you in the next lessons.\n\n*\"By getting this far, you have learned some skills that even some top solidity devs don't even know. You are growing incredibly quickly.\"*\n\nGood job, everyone! Until next time.\n",
          "updates": []
        }
      ]
    },
    {
      "sectionId": "c78f2bb4-4bcd-4808-94e7-2e2b33e2522b",
      "number": 3,
      "slug": "develop-defi-protocol",
      "title": "Develop a DeFi Protocol",
      "lessons": [
        {
          "lessonId": "877d4fab-bf7c-483f-95ad-dab912ac5103",
          "number": 1,
          "slug": "defi-introduction",
          "title": "DeFi introduction",
          "description": "Explore the fundamentals of decentralized finance (DeFi) including key concepts, protocols, and the significance of DeFi in the financial sector.",
          "duration": 10,
          "videoUrl": "8WTtH77r01dyAqQnIbk5i00Pa94I6WBpu023LYB8MZvy54",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/1-defi-introduction/+page.md",
          "markdownContent": "***\n\n## title: DeFi Introduction\n\n*Follow along the course with this video.*\n\n# Diving into Decentralized Finance (DeFi)\n\nHello and welcome back. Today we will be delving into Foundry DeFi, taking a look at the code we will be working with throughout this course. It is important to mention that DeFi is an enormous and complex subject that fully deserves an exclusive course, but for now, let's start by delving into the basics of DeFi. Let’s get started!\n\n## I. An Overview of DeFi\n\nIf you are new to DeFi, a great starting point is [DeFi Llama](https://defillama.com/), a simple and intuitive website that provides a current snapshot of the DeFi industry, giving insights into total value locked in DeFi, leading apps, and dominant protocols. Top platforms include open-source decentralized banking like Aave, liquid staking platforms like Lido, decentralized exchanges like Uniswap and Curve Finance, and collateralized debt position protocols like MakerDAO which we will be building later in the course.\n\n### The Beauty of DeFi\n\n<img src=\"/foundry-defi/1-defi-introduction/defi-introduction1.PNG\" style=\"width: 100%; height: auto;\">\n\nThe beauty of DeFi and the reason for its growing popularity is the access it provides to sophisticated financial products and instruments in a decentralized context.\n\n<img src=\"/foundry-defi/1-defi-introduction/defi-introduction2.PNG\" style=\"width: 100%; height: auto;\">\n\nIn my opinion, DeFi is possibly the most exciting and important application of smart contracts. I highly recommend spending some time to become conversant with the basics of DeFi, if not becoming fully fluent. Start with useful resources such as the [Bankless](https://www.bankless.com/) podcast and [MetaMask Learn](https://learn.metamask.io/).\n\n## II. Getting Started with DeFi\n\nI encourage you to begin by playing around with apps such as Aave and Uniswap on their respective websites.\n\nFor newcomers, it is advisable to start on testnets. Some platforms, such as Ethereum, have high transaction fees, so beginners might want to consider cheaper alternatives like Polygon Optimism or Arbitrum.\n\nIt's crucial to remain aware of the concept of MEV (Miner Extractable Value or Maximal Extractable Value) which is a significant issue in the DeFi industry. In essence, if you are a validator who arranges transactions in a block, you can organize them in a manner that favors you - cultivating fair practices in this area is the focus of several protocols like Flashbots.\n\nFor those looking to delve deeper into DeFi, I recommend checking out the [Flashbots.net](https://www.flashbots.net/) website, which houses a wealth of videos and blogs.\n\n## III. The Project: Building A Stablecoin\n\nIn this course, we will be building our version of a stablecoin. The concept of stablecoins is advanced and widely misunderstood. To simplify it, they are assets that peg their market value to another stable asset, like gold or a fiat currency.\n\n## IV. Foundry Stablecoin Project is the Most Advanced.\n\n<img src=\"/foundry-defi/1-defi-introduction/defi-introduction3.PNG\" style=\"width: 100%; height: auto;\">\n\nEven though we have following lessons on upgrades, governance, introduction to security, this Foundry Stablecoin project is the most advanced one we're working with, hands down.\n\nStepping into DeFi and understanding everything in this lesson can be a daunting task. Seek help from [Chat GPT](https://chat.openai.com/), use the [GitHub repo](https://github.com/Cyfrin/foundry-full-course-f23/) discussion tab or even browse the [MakerDAO forum](https://forum.makerdao.com/) to understand how the industry stalwarts are working and implementing DeFi.\n\nYou can even check out Coinbase's educational content to get a headstart on DeFi.\n\nAnd remember,\n\n<img src=\"/foundry-defi/1-defi-introduction/defi-introduction4.PNG\" style=\"width: 100%; height: auto;\">\n\nIn the following section, we will be walking you through the code. Happy learning!\n",
          "updates": []
        },
        {
          "lessonId": "1d12f97f-cd50-4fbd-80d0-ca47bcffdbe8",
          "number": 2,
          "slug": "defi-code-walkthrough",
          "title": "Project code walkthrough",
          "description": "Delve into the detailed walkthrough of DeFi codebase including analysis of key files and their functionalities in the DeFi environment.",
          "duration": 4,
          "videoUrl": "ajFRzG9nsPE9aBeH63NAUAmXHnhIgTVVKHACvP3sYn00",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/2-defi-code-walkthrough/+page.md",
          "markdownContent": "***\n\n## title: DeFi Code Walkthrough\n\n*Follow along the course with this video.*\n\n# Diving into the Codebase for a Decentralized Stablecoin\n\nWelcome to our deep-dive exploration of a pretty robust and interesting codebase! Today, we're unveiling the inner workings of two primary files: `DecentralizedStableCoin.sol` and `DSCEngine.sol`. Both can be found within the SRC folder of our codebase.\n\n<img src=\"/foundry-defi/2-defi-code-walkthrough/defi-code-walkthrough1.PNG\" style=\"width: 100%; height: auto;\">\n\n## A Closer Look at decentralized stablecoin.sol\n\n`DcentralizedStableCoin.sol` is fundamentally a simplistic and minimalistic ERC20. What sets it aside, however, are the more intricate imports such as `ERC20Burnable` and `Ownable`.\n\nThe file contains pertinent functions such as the ERC20 constructor, a burn function (removes tokens), and a mint function (prints new tokens). At first glance, it bears striking resemblance to a classic ERC20.\n\n```javascript\nconstructor() ERC20 (\"DecentralizedStableCoin\", \"DSC\") {}\n\nfunction burn(uint256 _amount) public override onlyOwner{\n    uint256 balance = balanceOf(msg.sender);\n    if(_amount <= 0){\n        revert DecentralizedStableCoin__AmountMustBeMoreThanZero();\n    }\n    if (balance < _amount){\n        revert DecentralizedStableCoin__BurnAmountExceedsBalance();\n    }\n    super.burn(_amount);\n}\n\nfunction mint(address _to, uint256 _amount) external onlyOwner returns (bool){\n    if(_to == address(0)){\n        revert DecentralizedStableCoin__NotZeroAddress();\n    }\n    if(_amount <= 0){\n        revert DecentralizedStableCoin__AmountMustBeMoreThanZero();\n    }\n    _mint(_to,_amount);\n    return true;\n}\n```\n\n## Unraveling the DSCEngine\n\nOur main contract, `DSCEngine.sol`, controls the decentralized stablecoin. This file is brimming with specific functions. It accommodates functionalities such as the depositing and minting of DSC (Decentralized Stable Coin).\n\nPrimarily, the stablecoin operates by being collateral-backed, meaning that it's supported by collaterals with existing monetary value. This will be explored in greater detail further into this post.\n\n<img src=\"/foundry-defi/2-defi-code-walkthrough/defi-code-walkthrough2.PNG\" style=\"width: 100%; height: auto;\">\n\nOther functions include the ability to redeem or withdraw your collateral, burn DSC, and liquidate. If you're wondering what liquidation is, don't worry; we'll break that down later.\n\nAn individual can also mint DSC if they have sufficient collateral, aside from depositing and redeeming collateral.\n\n## Diving into the Test Folder\n\n<img src=\"/foundry-defi/2-defi-code-walkthrough/defi-code-walkthrough3.PNG\" style=\"width: 100%; height: auto;\">\n\nOur test folder includes unit tests for the engine, the stablecoin, and an Oracle Library. It also contains `mocks`, typical for any project.\n\nWe're also going to touch upon two intriguing aspects: fuzz tests and invariant tests. Especially, the introduction to `invariant tests` promises a fascinating journey as these tests discern average solidity developers from advanced ones.\n\n## Scripts\n\nOur scripts are astonishingly straightforward. Their principal purpose is to deploy the stablecoin. Here, we use Chainlink price feeds to gauge the price of underlying collateral.\n\nYou can find all the code and necessary information in this repo. However, be prepared, this section is advanced. So, understanding won't be a breeze, but remember, learning is never a race. You're encouraged to ask questions, code alongside, and fully comprehend what we're trying to accomplish.\n\n## The Importance of Stablecoins in DeFi\n\nBefore we proceed any further, I would like to mention that the reason for creating a stablecoin is my strong belief that they are pivotal in the universe of DeFi. The current solutions, however, are far from satisfying. Therefore, I hope this venture inspires you to create better, more efficient solutions.\n\nWith that said, let's go ahead and understand stablecoins better. Take your time, and keep learning! In the next part we'll be clarifying everything you need to know about stablecoins.\n",
          "updates": []
        },
        {
          "lessonId": "14c8bc73-7738-419b-bc4e-11fbd16e72e1",
          "number": 3,
          "slug": "defi-stablecoins",
          "title": "Introduction to stablecoins",
          "description": "Gain insights into stablecoins, their types, significance in DeFi, and the roles they play in maintaining economic stability in digital finance.",
          "duration": 15,
          "videoUrl": "LJKc4j6202Cgks62hSG2IIqg4sO3C6G00dWgDYfArwsow",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/3-defi-stablecoins-but-actually/+page.md",
          "markdownContent": "***\n\n## title: Stablecoins, but actually\n\n*Follow along the course with this video.*\n\n# Everything You Need to Know About Stablecoins\n\n## Introduction\n\nStablecoins have become one of the most talked about topics in the cryptocurrency and blockchain space. However, there is a lot of misleading information out there about what stablecoins really are and how they work. This blog post will provide a comprehensive overview of stablecoins, clarifying common misconceptions and providing key details that every crypto enthusiast should understand.\n\nWe'll cover what stablecoins are, why they matter, different categories and properties of stablecoins, designs of top stablecoins like Dai and USDC, and most importantly - the real incentives behind stablecoin creation and usage. There's a lot of ground to cover, so let's dive in!\n\n## What Are Stablecoins?\n\n<img src=\"/foundry-defi/3-defi-stablecoins-but-actually/defi-stablecoins-but-actually1.png\" style=\"width: 100%; height: auto;\">\n\nA stablecoin is a cryptocurrency designed to have minimal volatility and maintain a stable value over time. The key property of a stablecoin is that its \"buying power\" remains relatively constant.\n\nFor example, if 1 ETH could buy 10 apples last year but this year 1 ETH can only buy 5 apples due to ETH volatility, we would say ETH's buying power changed significantly. However, if $1 could buy 1 apple last year and $1 can still buy 1 apple today, the dollar's buying power remained stable.\n\nStablecoins aim to mimic the stability of fiat currencies like the dollar, while still retaining the benefits of cryptocurrencies like decentralization and security. A more formal definition is:\n\n<img src=\"/foundry-defi/3-defi-stablecoins-but-actually/defi-stablecoins-but-actually2.PNG\" style=\"width: 100%; height: auto;\">\n\nUnlike most cryptocurrencies, stablecoins are pegged to real-world assets like the US dollar or algorithmically controlled via supply and demand to maintain stability.\n\n## Why Do Stablecoins Matter?\n\nStablecoins fulfill 3 key functions of money that are needed for an efficient economy:\n\n1. **Store of value**: Allow people to preserve wealth over time.\n2. **Unit of account**: Provide a common measure of value to price goods and services.\n3. **Medium of exchange**: Enable transactions between parties via a payment method.\n\nFor crypto to become a mature asset class and decentralized ecosystem, it requires stable assets that can reliably perform these functions without volatility. Fiat currencies like the US dollar serve these roles in traditional finance.\n\nStablecoins allow decentralized protocols to have access to price stability and a reliable medium of exchange - unlocking use cases like decentralized lending, payments, and more.\n\n## Categorizing Stablecoins\n\nThere are 3 key ways to categorize different types of stablecoins:\n\n### 1. Relative Stability\n\n* **Pegged (anchored) stablecoins**: Pegged to the value of another asset like the US dollar. Examples include USDC, Tether.\n* **Floating (unpegged) stablecoins**: Not pegged to any external asset. Stability is maintained via supply and demand mechanisms. Example: RYE stablecoin.\n\n### 2. Stability Mechanism\n\n* **Algorithmic**: Stability is maintained programmatically via a decentralized algorithm. Examples: DAI, Frax.\n* **Governed (centralized)**: Stability is controlled manually by a central party. Examples: USDC, Tether.\n\n### 3. Collateral Type\n\n* **Exogenous**: Collateral comes from outside the stablecoin's ecosystem. If stablecoin fails, collateral is unaffected. Examples: DAI (ETH collateral), USDC (USD fiat collateral).\n* **Endogenous**: Collateral comes from inside the stablecoin's ecosystem. If stablecoin fails, collateral fails too. Example: TerraUSD (LUNA collateral).\n\n## Top Stablecoin Designs\n\nNow let's look at some top stablecoins and their key design properties:\n\n### DAI\n\nProperties:\n\n* Pegged to USD\n* Algorithmic\n* Exogenous collateral (overcollateralized ETH)\n\nDAI is one of the most influential DeFi stablecoins. Users deposit ETH as collateral to mint DAI stablecoins against it. Unique stability fees discourage excessive printing. Autonomous smart contracts maintain the peg and collateralization ratio.\n\n### USDC\n\nProperties:\n\n* Pegged to USD\n* Governed (centralized)\n* Exogenous collateral (USD fiat reserves in bank accounts)\n\nUSDC is a popular stablecoin back 1:1 by US dollar reserves. It is controlled by a consortium of centralized entities that manage the reserves.\n\n### TerraUSD (UST)\n\nProperties:\n\n* Formerly pegged to USD\n* Algorithmic\n* Endogenous collateral (LUNA tokens)\n\nUST relied on algorithmic mechanisms to maintain its peg to the US dollar. Its stability was dependent on LUNA, whose value collapsed along with UST. This shows the risks of endogenous collateral.\n\n### RYE\n\nProperties:\n\n* Floating (not pegged)\n* Algorithmic\n* Exogenous collateral (ETH)\n\nRYE uses supply and demand mechanisms to algorithmically maintain stability relative to purchasing power. It is one of the few prominent non-pegged stablecoins on the market today.\n\n## The Real Purpose of Stablecoins\n\nAt this point you may be wondering - if stablecoins are supposed to enable decentralized payments and commerce, why are they being printed in the billions?\n\nThe truth is, the primary users and beneficiaries of today's stablecoins are not average crypto users transacting in a decentralized economy. **The key demand for stablecoins actually comes from wealthy crypto investors seeking to amplify their holdings through leveraged trading strategies.**\n\nMost DeFi protocols allow users to deposit cryptoassets like ETH as collateral to take out stablecoin loans, often at attractive interest rates. Investors can then use these stablecoins to buy more ETH and increase their position size.\n\nEssentially, stablecoins unlock amplified exposure to volatile cryptoassets - also known as leverage. With the ability to go 2-3x leverage on their holdings via stablecoin loans, large crypto investors can maximize returns in bull markets.\n\nAnd because stablecoin systems charge fees for minting, they earn a nice revenue stream from traders pursuing these leveraged strategies.\n\n**So while stablecoins are marketed as bringing stability and usability to decentralized finance, the reality is speculative leverage is driving most of the growth in stablecoins today.**\n\n## Conclusion\n\nThis covers the key essentials you need to know about stablecoins. To recap:\n\n* Stablecoins are cryptocurrencies designed to maintain a stable value.\n* They bring stability and usability to decentralized finance.\n* But leverage and speculation are big drivers of stablecoin demand today.\n\nThere are still many open questions about the ideal stablecoin design and governance model. I'm excited to see how stablecoin technology and applications continue to evolve in years to come!\n\nLet me know in the comments if you have any other stablecoin topics you want me to cover in a future post. And don't forget to like and share this article!\n",
          "updates": []
        },
        {
          "lessonId": "34ba57b0-a5f2-4991-801b-a4f3a0f1c230",
          "number": 4,
          "slug": "defi-decentralized-stablecoin",
          "title": "Decentralised stablecoins",
          "description": "Understand the creation and management of decentralized stablecoins, focusing on their development, operational mechanics, and impact on DeFi.",
          "duration": 11,
          "videoUrl": "hHyZhQro6kCWr02tZLwTTeUxhdoJgwu00DsSRY01m01qyIA",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/4-defi-decentralized-stablecoin/+page.md",
          "markdownContent": "***\n\n## title: DecentralizedStableCoin.sol\n\n*Follow along the course with this video.*\n\n# Building a Decentralized Stablecoin: Step-by-Step Guide\n\nIn this section, we're diving into the exciting world of decentralized finance (DeFi) and going one step ahead by creating our very own stablecoin. We'll be covering everything you need to know to follow along and delve into the world of stablecoins with us.\n\n## What is a Stablecoin?\n\nA stablecoin is a form of cryptocurrency that is pegged to a reserve asset like the US Dollar. The idea behind it is to provide stability in the highly volatile world of cryptocurrencies.\n\n## Forging Ahead with Code\n\nIf you're as excited about this project as we are, you can follow along with all the code that we're creating in this tutorial. We have dedicated an entire GitHub repository to the code we'll be building - it's under the [foundry-defi-stablecoin-f23](https://github.com/Cyfrin/foundry-defi-stablecoin-f23) course section. We have big plans for this project, including getting the code audited to ensure its security and reliability.\n\nTo follow the updates about this audit, keep an eye on this GitHub repository as we will be posting all audit reports there.\n\nWe're diving straight into the nuts and bolts of this project. A lot of the information we'll be going over is likely to be familiar to you if you've done similar projects before. However, we'll also introduce a few new concepts like stateless fuzzing.\n\n## The Architecture of Our Stablecoin\n\nSo, before we dive straight into the code, let's take a glance at what our stablecoin's architecture is going to look like. We are building a stablecoin that's one, anchored, meaning it is pegged to the US Dollar. Secondly, our stability mechanism is algorithmic, meaning the process for minting is going to be entirely decentralized - there's no governing entity that is controlling our stablecoins. Lastly, we're using exogenous crypto-assets, specifically Ethereum and Bitcoin, as collateral for our stablecoin.\n\n<img src=\"/foundry-defi/4-defi-decentralized-stablecoin/defi-decentralized-stablecoin1.png\" style=\"width: 100%; height: auto;\">\n\n## Maintaining Our Stablecoin's Value\n\nTo ensure that our stablecoin is always worth $1, we have to match it to the dollar's price constantly. We do this using a chainlink price feed. Our program will run a feed from chainlink, and we will set a function to exchange Ethereum and Bitcoin for their equivalent dollar value. This function will help us maintain the stability of our stablecoin.\n\nTo make the stability mechanism algorithmic, we will have a condition in our code that only mints the stablecoin if there's enough collateral.\n\nThe collateral type, i.e., Ethereum and Bitcoin, is exogenous, meaning, we're only going to accept these two types of cryptocurrencies as collateral. We're going to use the ERC20 version of Ethereum and Bitcoin, also known as wrapped Ethereum (WETH) and wrapped Bitcoin (WBTC).\n\n<img src=\"/foundry-defi/4-defi-decentralized-stablecoin/defi-decentralized-stablecoin2.PNG\" style=\"width: 100%; height: auto;\">\n\nTo use this architecture, we create a code that over collateralizes the stablecoin using WETH and Bitcoin as the collateral.\n\n## Pulling up Our Sleeves and Coding Away\n\nWith the plan in place, it's time to dive into coding.\n\nHere is a step-by-step guide to creating your own decentralised stablecoin:\n\n### Step 1: Install OpenZeppelin\n\nWe begin by installing OpenZeppelin as it provides basic smart contract-building blocks. To do this, we use the following command:\n\n```bash\nforge install openzeppelin/openzeppelin-contracts --no-commit\n```\n\nThen open up the `foundry TOML` and add the following remappings:\n\n```javascript\nremappings = [\"@openzeppelin/contracts=lib/openzeppelin-contracts/contracts\"];\n```\n\n### Step 2: Import Libraries and Contract Functions\n\nOnce OpenZeppelin is correctly installed, open up our `DecentralizedStableCoin.sol` contract file where we will import necessary libraries. We start by importing three OpenZeppelin contracts: `ERC20`, `ERC20Burnable` and `Ownable`.\n\nThe `ERC20Burnable` contract provides us with a \"burn\" function, which is essential in maintaining the peg price of our stablecoin, as we'll be burning a lot of tokens. The \"burn\" function will be overridden by our function.\n\nIn contrast, when it comes to the \"mint\" function, we do not need to override any functions. Instead, we are going to call the \"\\_mint\" function directly.\n\n```javascript\n//SDPX-LICENSE-IDENTIFIER:MIT\npragma solidity 0.8.19;\n\nimport {ERC20Burnable, ERC20} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract DecentralizedStableCoin is ERC20Burnable, Ownable {\n    error DecentralizedStableCoin__AmountMustBeMoreThanZero();\n    error DecentralizedStableCoin__BurnAmountExceedsBalance();\n    error DecentralizedStableCoin__NotZeroAddress();\n\n    constructor() ERC20(\"DecentralizedStableCoin\", \"DSC\") {}\n\n    function burn(uint256 _amount) public override onlyOwner {\n        uint256 balance = balanceOf(msg.sender);\n        if (_amount <= 0) {\n            revert DecentralizedStableCoin__AmountMustBeMoreThanZero();\n        }\n        if (balance < _amount) {\n            revert DecentralizedStableCoin__BurnAmountExceedsBalance();\n        }\n        super.burn(_amount);\n    }\n\n    function mint(address _to, uint256 _amount) external onlyOwner returns (bool) {\n        if (_to == address(0)) {\n            revert DecentralizedStableCoin__NotZeroAddress();\n        }\n        if (_amount <= 0) {\n            revert DecentralizedStableCoin__AmountMustBeMoreThanZero();\n        }\n        _mint(_to, _amount);\n        return true;\n    }\n}\n```\n\nThat's it! We've now sown the seeds of creating a stablecoin.\n\nIt's always a good practice to keep updating and checking your code as you progress. You can run `forge build` to compile the contract and check for any issues or errors. In a little bit, we'll be writing tests and a deploy script.\n\n## Wrapping it up\n\nVoila! With that, we've built the basis our own stablecoin that with be pegged to the US dollar, fully decentralized, and powered by exogenous crypto-assets Ethereum and Bitcoin.\n\nStarting a DeFi project such as this raises numerous possibilities in the world of cryptocurrencies and blockchain technologies. The tools and technologies available to developers today, like Solidity and OpenZeppelin, are making it easier than ever to get started in this exciting field. So whether you are a beginner or a pro-developer, the landscape of stablecoins offers an intriguing opportunity for everyone.\n\nHappy coding!\n",
          "updates": []
        },
        {
          "lessonId": "139d8d5e-5fa9-4982-b591-6e4bd3f67fc5",
          "number": 5,
          "slug": "defi-dscengine-setup",
          "title": "Project setup - DSCEngine ",
          "description": "Learn about setting up the DSCEngine project in DeFi, including configuration, development practices, and key components of the engine.",
          "duration": 11,
          "videoUrl": "izZ00tZEeLxITGGzJQVniTa00oDOvKhUc00D0001MZHeYMYA",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/5-defi-dscengine-setup/+page.md",
          "markdownContent": "***\n\n## title: DSCEngine.sol Setup\n\n*Follow along the course with this video.*\n\n# Building a Decentralized Stablecoin Engine\n\nBuilding a stablecoin engine is not for the faint-hearted. But with the right tools and a dash of code fluency, you too can do it. If you're at this stage and feel a sense of achievement, clap yourself on the back! Alternatively, pause this and try your hand at crafting your own tests and deploy scripts. But don't get too comfortable just yet; we're only getting started.\n\nWe'll approach this project a bit differently from the ones people are used to. We won't shy away from doing some tests along the way to ensure we're on the right course. Let's get right into it and create an engine for our decentralized stablecoin (DSC) system.\n\n### Creating the DSC Engine\n\nStart by creating a new file `DSCEngine.sol`. This will serve as our centralized stablecoin engine. Now, launch right into building the engine.\n\nNext, copy and paste this beginning part into the engine to lay the groundwork for our contract. We have our SPDX statement, layout of contracts, pragma solidity etc:\n\n```javascript\n// Layout of Contract:\n// version\n// imports\n// errors\n// interfaces, libraries, contracts\n// Type declarations\n// State variables\n// Events\n// Modifiers\n// Functions\n\n// Layout of Functions:\n// constructor\n// receive function (if exists)\n// fallback function (if exists)\n// external\n// public\n// internal\n// private\n// internal & private view & pure functions\n// external & public view & pure functions\n\n//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ncontract DSCEngine{\n    //engine body\n}\n```\n\nLet's not forget to include a lot of Nat spec to our contract body. More detailed information in our code makes it easier for people to understand - think of it as making notations in a book that hundreds of people will read.\n\n```javascript\n/*\n * @title DSCEngine\n * @author Patrick Collins\n *\n * The system is designed to be as minimal as possible, and have the tokens maintain a 1 token == $1 peg at all times.\n * This is a stablecoin with the properties:\n * - Exogenously Collateralized\n * - Dollar Pegged\n * - Algorithmically Stable\n *\n * It is similar to DAI if DAI had no governance, no fees, and was backed by only WETH and WBTC.\n *\n * @notice This contract is the core of the Decentralized Stablecoin system. It handles all the logic\n * for minting and redeeming DSC, as well as depositing and withdrawing collateral.\n * @notice This contract is based on the MakerDAO DSS system\n */\n```\n\n<img src=\"/foundry-defi/5-defi-dscengine-setup/defi-dscengine-setup1.PNG\" style=\"width: 100%; height: auto;\">\n\nThe DSC system's role is to retain tokens at a one token-equals-$1 peg. It bears similar features to DAI in terms of being a stablecoin. Still, it operates without governance, fees, and runs only on wrapped ETH and wrapped Bitcoin.\n\n### Core Functions of the DSC Engine\n\nWith our contract body in place, it's time to think about the core functions of our project. What actions should our system facilitate?\n\nFirstly, our system should be able to deposit collateral and mint DSC tokens. This action allows users to deposit either their DAI or Bitcoin to generate our stablecoin.\n\nSecondly, the system should also facilitate the redemption of collateral or DSC. Once users have finished using our stablecoin, they should be able to exchange it back for the collateral they used initially.\n\nAnother critical function is the ability to burn DSC. This functionality matters when a user fears having too much stablecoin and very little collateral. It provides a quick way to get more collateral than DSC, thus maintaining the balance within the system. Accordingly, our DSC system should always have more collateral than DSC.\n\nWe also need a liquidation function. Its importance comes into play when the price of a user's collateral falls too much. For example, if a user deposits collateral worth $100 and uses it to mint $50 worth of DSC, if the ETH price drops to $40, the collateral is less than DSC - a scenario we mustn't let happen. In such a case, the user should be liquidated and knocked off the system.\n\nThe fifth core function is the `healthFactor`. This external view function, `getHealthFactor`, allows us to see how healthy a particular user's portfolio is.\n\nLastly, we will need functions for `depositCollateral`, `redeemCollateral`, and `mintDSC`.\n\n```javascript\n    // Functions we'll need\n    function depositCollateralAndMintDSC() external {};\n    function depositCollateral() external {};\n    function redeemCollateralForDSC() external {};\n    function redeemCollateral() external {};\n    function mintDSC() external {};\n    function burnDSC() external {};\n    function liquidate() external {};\n    function getHealthFactor() external view {};\n```\n\n### Testing as You Build\n\nTesting as we go on ensures that we're on the right track. Consider writing tests describing what each function should do to the system.\n\nIn conclusion, we've successfully begun constructing the engine for the Decentralized Stablecoin (DSC) system. It might feel overwhelming, but with diligence, testing, and code readability, we're off to a good start.\n\nWe'll be looking at tests and a deploy script next as well as additionial functions to improve our DSC System.\n\n<img src=\"/foundry-defi/5-defi-dscengine-setup/defi-dscengine-setup2.PNG\" style=\"width: 100%; height: auto;\">\n\nHappy coding!\n",
          "updates": []
        },
        {
          "lessonId": "430a6668-1bb7-4b24-8593-7df423fe2681",
          "number": 6,
          "slug": "defi-deposit-collateral",
          "title": "Create the deposit collateral function",
          "description": "This lesson covers the process of creating a function to deposit collateral in a DeFi project, highlighting key aspects of its implementation.",
          "duration": 19,
          "videoUrl": "fshZYe6Vybmnc3de2tjSdG2Irk02TmUy5qecG8dl01K48",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/6-defi-deposit-collateral/+page.md",
          "markdownContent": "***\n\n## title: Deposit Collateral\n\n*Follow along the course with this video.*\n\n# The Easiest Way to Learn Blockchain: Start with Depositing\n\nIn this section, I'm going to dive into the one place it's easiest to start when creating a blockchain protocol: Depositing collateral. After all, that's likely the first thing users will do with this protocol.\n\n## Depositing Collateral\n\nTo start, we'll need code that allows users to deposit their collateral. Something like:\n\n```js\nfunction depositCollateral(address tokenCollateralAddress, uint256 amountCollateral) external {...}\n```\n\nFrom here, we have a good starting point for explaining what's likely to happen in this function.\n\nLet's add a Natspec (Natural Specification) comment to help clarify what’s happening in the code.\n\n```js\n/*\n * @param tokenCollateralAddress: The address of the token to be deposited as collateral.\n * @param amountCollateral: The amount of collateral to deposit.\n */\n```\n\n## Code Sanitization\n\nWe'll want a way to ensure amountCollateral is more than zero, in order to prevent potential issues down the line with zero-valued transactions.\n\nTo do this, we can create a **modifier** called `moreThanZero`. Remember to reference our contract layout if you forget where things should go:\n\n```js\n// Layout of Contract:\n// Version\n// Imports\n// Errors\n// Interfaces, Libraries, Contracts\n// Type Declarations\n// State Variables\n// Events\n// Modifiers\n// Functions\n```\n\nOur modifier should look something like this:\n\n```js\nmodifier moreThanZero(uint256 amount) {\n    if (amount == 0) {\n        revert DSCEngine__NeedsMoreThanZero();\n    }\n    _;\n}\n```\n\n*Modifiers* are used to change the behavior of functions in a declarative way. In this case, using a modifier for `moreThanZero` will allow its reuse throughout the functions.\n\n```js\nfunction depositCollateral(address tokenCollateralAddress, uint256 amountCollateral) external moreThanZero(amountCollateral) {...}\n```\n\nIf the amount deposited is zero, the function will revert and cancel the transaction, saving potential errors or wasted transactions.\n\n## Allow and Deny Tokens\n\nAnother thing we'll need is a restriction on what tokens can be used as collateral. So let's create a new modifier called `isAllowedToken`.\n\n```js\nmodifier isAllowedToken(address token) {\n    if (tokenNotallowed){...};\n}\n```\n\nCurrently we have no 'token allow list', so we're going to handle this with a state mapping of addresses to addresses, which we provide in our contract's constructor. We know as well that our 'DSCEngine is going to need the `burn` and `mint` functions of our DSC contract, so we'll provide that address here as well:\n\n```js\ncontract DSCEngine {\n    error DSCEngine__TokenAddressesAndPriceFeedAddressesAmountsDontMatch();\n    ...\n    DecentralizedStableCoin private i_dsc;\n    mapping(address collateralToken => address priceFeed) private s_priceFeeds;\n    ...\n    constructor(address[] memory tokenAddresses, address[] memory priceFeedAddresses, address dscAddress){\n        if (tokenAddresses.length != priceFeedAddresses.length) {\n            revert DSCEngine__TokenAddressesAndPriceFeedAddressesAmountsDontMatch();\n        }\n        // These feeds will be the USD pairs\n        // For example ETH / USD or MKR / USD\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\n            s_priceFeeds[tokenAddresses[i]] = priceFeedAddresses[i];\n            s_collateralTokens.push(tokenAddresses[i]);\n        }\n        i_dsc = DecentralizedStableCoin(dscAddress);\n    }\n}\n```\n\nFinally, after all this prep, we can return to our modifier to complete it:\n\n```js\nmodifier isAllowedToken(address token){\n    if (s_priceFeeds[token] == address(0)){\n        revert DSCEngine__NotAllowedToken();\n    }\n    _;\n}\n```\n\nHere, function calls with this modifier will only be valid if the inputted token address is on an allowed list.\n\n## Saving User Collateral Deposits\n\nFinally, we get to the heart of the deposit collateral function.\n\nWe need a way to save the user's deposited collateral. This is where we come to ‘*state variables*’:\n\n```js\nmapping(address user => mapping(address collateralToken => uint256 amount)) private s_collateralDeposited;;\n```\n\nThis is a mapping within a mapping. It connects the user's balance to a mapping of tokens, which maps to the amount of each token they have.\n\nWith this, we have developed a good foundation for our deposit collateral function.\n\n## Safety Precautions\n\nEven though we've added quite a bit already, there's still more that can be done to ensure this function is as safe as possible. One way is by adding the `nonReentrant` modifier, which guards against the most common attacks in all of Web3.\n\n```js\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n...\n    function depositCollateral(address tokenCollateralAddress, uint256 amountCollateral) external moreThanZero(amountCollateral) isAllowedToken(tokenCollateralAddress) nonReentrant {\n        s_collateralDeposited[msg.sender][tokenCollateralAddress] += amountCollateral;\n        emit CollateralDeposited(msg.sender, tokenCollateralAddress, amountCollateral);\n        bool success = IERC20(tokenCollateralAddress).transferFrom(msg.sender, address(this), amountCollateral);\n        if (!success) {\n            revert DSCEngine__TransferFailed();\n        }\n}\n```\n\n## Wrapping It Up\n\nIn conclusion, through this section, we have built an efficient deposit collateral function.\n\nAll the checks, such as ensuring the deposit is more than zero and the token is allowed, are done effectively. The state updates with the deposited collateral. Any interactions externally are safe from reentrancy attacks, ensuring a secure environment for our deposit function.\n\nAs seen above, to end the function, the function will emit a `CollateralDeposited` event.\n\n```js\nemit CollateralDeposited(msg.sender, tokenCollateralAddress, amountCollateral);\n```\n\nThis will give us more information about when and where the deposit function is called, which aids in debugging and development of the blockchain.\n\nRemember, learning about the functioning of blockchain can be a bit intimidating. But by breaking down the different steps and understanding each process, you'll begin to see it's not as complicated as it may first seem. Happy coding!\n\n<img src=\"/foundry-defi/6-defi-deposit-collateral/defi-deposit-collateral1.PNG\" style=\"width: 100%; height: auto;\">\n",
          "updates": []
        },
        {
          "lessonId": "3ce5a367-ce44-43f8-93e7-8a0028a5d16d",
          "number": 7,
          "slug": "defi-mint-dsc",
          "title": "Creating the mint function",
          "description": "Explore the intricacies of creating a mint function in DeFi, focusing on its role, functionality, and integration within the DeFi ecosystem.",
          "duration": 17,
          "videoUrl": "X9OZfWnvmX5QpA8Ks8IQnbTNbuN4IocMCGu9A00Q7S8I",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/7-defi-mint-dsc/+page.md",
          "markdownContent": "***\n\n## title: Mint DSC\n\n*Follow along the course with this video.*\n\n# Building a Mechanism for Minting Decentralized StableCoin\n\nIn our exciting journey to developing a decentralized finance system, we have reached the point where we are now able to deposit collateral into our system. Now that we have successfully done this, the next logical step is for us to develop a function for minting our Decentralized StableCoin (DSC).\n\nThe minting function, by its nature, is substantially more complex than the deposit feature. It involves, among other things, checking if the collateral value is greater than the amount of DSC to be minted. This function must also take into consideration price feeds and other essential checks. Therefore, its implementation will be our primary focus in this lesson.\n\n## Creating the Mint DSC Function\n\nWe start by creating the `mintDsc` function, which accepts as its parameter a unsigned integer256, `amountDscToMint`. The parameter allows users to specify the amount of DSC they want to mint.\n\nLet's look at an illustrative scenario: A user deposits $200 worth of ETH as collateral. They may however only want to mint $20 worth of DSC. In this case, they can specify so using the `amountDSCtoMint` parameter.\n\n```javascript\nfunction mintDsc(unint256 amountDscToMint){}\n```\n\nNow we add checks to validate the functionality. It becomes mandatory to ensure that the users mint an amount greater than zero. Also, the function should be non-reentrant to ensure security and maintain control of function calls against the recursion, although in this case, non-reentrancy might not be strictly necessary as it's our DSC token. Don't forget NatSpec!\n\n```javascript\n    /*\n     * @param amountDscToMint: The amount of DSC you want to mint\n     * You can only mint DSC if you hav enough collateral\n     */\n    function mintDsc(uint256 amountDscToMint) public moreThanZero(amountDscToMint) nonReentrant {}\n```\n\n## Keeping Track of the Minted DSC\n\nThe minting process corresponds to creating debt within our system. Therefore, we will require to keep track of each user's minted DSC.\n\nA suitable way of achieving this is by creating a state variable to map an `address user` to the `uint256 amountDSCMinted`. This can be achieved as follows:\n\n```javascript\nmapping(address user => uint256 amountDscMinted) private s_DSCMinted;\n```\n\nOur newly created mapping, `s_DSCMinted`, will ensure we keep track of all the minted DSC. If, for instance, a user tries to mint more DSC than their deposited collateral can cover, our function should instantly revert. We will ensure this via a separate internal function named `revertIfHealthFactorIsBroken` that takes user as the input parameter.\n\n## Addressing the Health Factor & Account Information\n\nThis is where it gets a bit windy. The health factor is a term borrowed from the Aave documentation, which calculates how close to liquidation a user is. We can determine the ratio of collateral to DSC minted using a function called `getAccountInformation`.\n\n```javascript\n    function _getAccountInformation(address user)\n        private\n        view\n        returns (uint256 totalDscMinted, uint256 collateralValueInUsd)\n    {\n        totalDscMinted = s_DSCMinted[user];\n        collateralValueInUsd = getAccountCollateralValue(user);\n    }\n```\n\nTo check the health factor, we need to ensure the user's collateral value is greater than the DSC minted in USD. Consequently, we need yet another function, `getAccountCollateralValue`, to evaluate the collateral's total value.\n\n```javascript\n    function getAccountCollateralValue(address user) public view returns (uint256 totalCollateralValueInUsd) {\n        for (uint256 index = 0; index < s_collateralTokens.length; index++) {\n            address token = s_collateralTokens[index];\n            uint256 amount = s_collateralDeposited[user][token];\n            totalCollateralValueInUsd += _getUsdValue(token, amount);\n        }\n        return totalCollateralValueInUsd;\n    }\n```\n\nThe `getAccountInformation` and `getAccountCollateralValue` functions are quite straightforward, but the real challenge is evaluating the USD value.\n\n## Evaluating the USD Value\n\nTo get the USD value, we loop through each collateral token, fetch the corresponding deposited amount, and map it to its price in USD. Simple enough, right? This is accomplished by this `for loop`:\n\n```javascript\n    for (uint256 index = 0; index < s_collateralTokens.length; index++) {\n                address token = s_collateralTokens[index];\n                uint256 amount = s_collateralDeposited[user][token];\n                totalCollateralValueInUsd += _getUsdValue(token, amount);\n            }\n```\n\nFinally, we need a way to get each token's value in USD to be added to the account's total collateral. How do we do that? You guessed it, another function `_getUsdValue`. We'll be leveraging Chainlink price feeds for our purposes.\n\n```javascript\n    function _getUsdValue(address token, uint256 amount) private view returns (uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(s_priceFeeds[token]);\n        (, int256 price,,,) = priceFeed.staleCheckLatestRoundData();\n        // 1 ETH = 1000 USD\n        // The returned value from Chainlink will be 1000 * 1e8\n        // Most USD pairs have 8 decimals, so we will just pretend they all do\n        // We want to have everything in terms of WEI, so we add 10 zeros at the end\n        return ((uint256(price) * ADDITIONAL_FEED_PRECISION) * amount) / PRECISION;\n    }\n```\n\n## Wrapping Up\n\nWow, we've learnt a lot! This section was dense and complex, so don't hesitate to go back over what we've done here and really commit to understanding the workflow. In the next part we'll be learning about an account's `Health Factor` and how we use it grade a user's account health and available collateral.\n\n<img src=\"/foundry-defi/7-defi-mint-dsc/defi-mint-dsc1.PNG\" style=\"width: 100%; height: auto;\">\n",
          "updates": []
        },
        {
          "lessonId": "e759be52-1320-4d27-b21f-5c6bb152c3b9",
          "number": 8,
          "slug": "defi-health-factor",
          "title": "Creating and retrieving the health factor",
          "description": "Delve into the concept of 'Health Factor' in DeFi protocols, its calculation, significance, and impact on the stability and risk management of DeFi projects.",
          "duration": 7,
          "videoUrl": "7QlM6ZByORvzs5noZhWKubct9KiE59302k4JBQbiU1fc",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/8-defi-health-factor/+page.md",
          "markdownContent": "***\n\n## title: Health Factor\n\n*Follow along the course with this video.*\n\n# Upgrading the Health Factor Function of a DeFi Platform\n\nIn our previous discussions, we have looked at creating and integrating various parts needed for a *Decentralized Finance (DeFi)* platform. Now, it's time to take a deeper dive into one of its critical components – the *Health Factor*.\n\nSo, let's get started!\n\n![](https://cdn.videotap.com/7XaXzANzYumN0wCD3MU5-19.89.png)\n\n## Working with The Health Factor\n\nThe health factor function presented a challenge as it was initially designed not to accomplish anything. However, we can now modify it as we have successfully integrated the Health Factor into our system. Here's what it should look like:\n\n```\nfunction updateHealthFactor() public {// function body}\n```\n\nNow that we have the *collateral value in USD* and the *total USD minted*, our health factor can be retrieved by dividing the collateral value by the total amount minted. This would likely look something like this:\n\n```javascript\nreturn collateralValueInUSD / totalUSDMinted;\n```\n\n...if we didn't wan't to remain overcollateralized.\n\n## Understanding Overcollateralization\n\nIt is important to understand that we need to always maintain an overcollateralized state. The reason being, if the collateral value falls below 100, then our system becomes compromised. To prevent this, we should set a threshold.\n\nThis leads us to introduce the *liquidation threshold*, which can be created at the top. We add:\n\n```javascript\nuint256 private constant LIQUIDATION_THRESHOLD = 50; //200% overcollateralized\n```\n\nThis means for your collateral to be safe, it needs to maintain 200% overcollateralization.\n\n<img src=\"/foundry-defi/8-defi-health-factor/defi-health-factor1.PNG\" style=\"width: 100%; height: auto;\">\n\nTo get our health factor, we will not directly divide the collateral value and the total amount minted. Solidity does not handle decimals, so dividing small amounts may return just 1, eliminating our desired precision.\n\n## Handling Precision\n\nTo ensure precision in the calculations, we need to adjust the collateral given the threshold.\n\n```javascript\nuint256 collateralAdjustedForThreshold = (collateralValueInUsd * LIQUIDATION_THRESHOLD) / 100;\n```\n\nHere, the constant `liquidationThreshold` multiplies our collateral value, making our value bigger, hence the need to divide by 100 to ensure no floating numbers.\n\n## The Math Explained\n\nAt this point, the math may seem a bit tricky. Let’s illustrate this with two examples:\n\n1. If we have $1,000 worth of ETH and 100 DSC, the math would go as such:\n\n```javascript\n1000 (collateral in ETH) * 50 (liquidation threshold), divided by100 (liquidation precision) = 500 (collateralAdjustedForThreshold)\n```\n\n1. For $150 worth of ETH and $100 minted DSC:\n\n```javascript\n150 (collateral in ETH) * 50 (liquidation threshold), divided by100 (liquidation precision) = 75 (collateralAdjustedForThreshold)\n```\n\nTo find the correct health factor, let's divide the `collateralAdjustedForThreshold` by the `totalDscMinted`.\n\n```javascript\n    function _healthFactor(address user) private view returns (uint256) {\n        (uint256 totalDscMinted, uint256 collateralValueInUsd) = _getAccountInformation(user);\n        return _calculateHealthFactor(totalDscMinted, collateralValueInUsd);\n    }\n\n    function _calculateHealthFactor(uint256 totalDscMinted, uint256 collateralValueInUsd)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (totalDscMinted == 0) return type(uint256).max;\n        uint256 collateralAdjustedForThreshold = (collateralValueInUsd * LIQUIDATION_THRESHOLD) / 100;\n        return (collateralAdjustedForThreshold * 1e18) / totalDscMinted;\n    }\n```\n\n## Rounding Up\n\nOnce we sector in the health factor, we can now successfully execute the function `revertIfHealthFactorIsBroken` in our `mintDsc` function.\n\n```javascript\n    function mintDsc(uint256 amountDscToMint) public moreThanZero(amountDscToMint) nonReentrant {\n        s_DSCMinted[msg.sender] += amountDscToMint;\n        revertIfHealthFactorIsBroken(msg.sender);\n        bool minted = i_dsc.mint(msg.sender, amountDscToMint);\n\n        if (minted != true) {\n            revert DSCEngine__MintFailed();\n        }\n    }\n```\n\nWith `MIN_HEALTH_FACTOR` being defined as 1:\n\n```javascript\n    function revertIfHealthFactorIsBroken(address user) internal view {\n        uint256 userHealthFactor = _healthFactor(user);\n        if (userHealthFactor < MIN_HEALTH_FACTOR) {\n            revert DSCEngine__BreaksHealthFactor(userHealthFactor);\n        }\n    }\n```\n\nIf the User's health factor is less than the minimum health factor, the function will revert, preventing any issues with the health factor.\n\nThis is a lot of math, but hopefully, it gives you a glimpse into the complexity of designing a robust DeFi platform. If any part of this discussion was unclear, please do not hesitate to reach out in the comments or run it with your AI to ensure it makes sense.\n\n## That's a wrap!\n\nAnd there we go! We've successfully upgraded our health factor function, ensuring absolute clarity and precision in the numbers. Remember, success in DeFi comes down to robust code and a precise understanding of the algorithms backing it up. Happy coding!\n",
          "updates": []
        },
        {
          "lessonId": "58cb46b8-ad9f-4236-9074-26baa608d5a6",
          "number": 9,
          "slug": "defi-wrap-mint-function",
          "title": "Finish the mint function",
          "description": "Complete the development of the mint function in DeFi, focusing on optimizing functionality, ensuring security, and integrating with the overall system.",
          "duration": 2,
          "videoUrl": "rKFynz9orcOh8sS6YN00sAPKxgsu4s2brQ1009wF2MplY",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/9-defi-minting-the-dsc/+page.md",
          "markdownContent": "***\n\n## title: Minting the DSC\n\n*Follow along the course with this video.*\n\n# New Fascinating Additions to the Mint DSC - Creating a Healthier User Experience\n\nLet's dive right into the heart of the matter. We last left off exploring the updates on Mint DSC. Previously, we discussed the intricacies of the code and delved into how the DSC mint function operates within this codebase. In this post, we are going to understand this process in depth, throw light on the health factor, and discuss the possibility of self-liquidation by users. We will also guide you on how to prevent users from minting DSC that might break the health factor.\n\n## Adding More Mint DSC\n\n<img src=\"/foundry-defi/9-defi-minting-the-dsc/defi-minting-the-dsc1.png\" style=\"width: 100%; height: auto;\">\n\nNotably, if any addition to this DSC causes a break in the health factor, we should retreat immediately. Why should we back off? Because it's not a very user-friendly experience. It could lead to users causing themselves to get liquidated. Technically, we could go forward and let users carry out the act. However, it would not reflect well on overall user experience. Consequently, it's crucial that we prevent any user from minting DSC that could potentiate the health factor break.\n\n## DSC Mint Function - The Owner's Prerogative\n\nThe intricacies of the DSC Minting function deserves close scrutiny. Interesting to note, that the DSC has a `mint function` that can be invoked solely by its owner. The owner of this function, in this case, is the DSC engine.\n\nObserve the following code block from `DecentralizedStableCoin.sol`:\n\n```javascript\n  function mint(address _to, uint256 _amount) external onlyOwner returns (bool) {\n        if (_to == address(0)) {\n            revert DecentralizedStableCoin__NotZeroAddress();\n        }\n        if (_amount <= 0) {\n            revert DecentralizedStableCoin__AmountMustBeMoreThanZero();\n        }\n        _mint(_to, _amount);\n        return true;\n    }\n```\n\nThrough the above code, we notice that it returns a boolean. This boolean value enables us to understand if the minting was successful or not.\n\nThis function accepts two arguments - `address _to` and `uint256 _amount`. The `address _to` parameter is going to be assigned to the message sender and the `_amount` parameter will represent the amount of DSC being minted.\n\n## Error Checks in the Minting Process\n\nSo what happens when the minting process fails? This possibility is taken care of in the following code snippet:\n\n```javascript\n  function mintDsc(uint256 amountDscToMint) public moreThanZero(amountDscToMint) nonReentrant {\n        s_DSCMinted[msg.sender] += amountDscToMint;\n        revertIfHealthFactorIsBroken(msg.sender);\n        bool minted = i_dsc.mint(msg.sender, amountDscToMint);\n\n        if (minted != true) {\n            revert DSCEngine__MintFailed();\n        }\n    }\n```\n\nIf the minting is not successful, signified by boolean value \"false\", the function reverts to an error. A new error title `DSCEngine__MintFailed()` is specified. Remember to create this error at the top of your script.\n\nIf the minting process fails, the function reverts to the error of `DSCEngine__MintFailed()`.\n\nRemember:\n\n<img src=\"/foundry-defi/9-defi-minting-the-dsc/defi-minting-the-dsc2.PNG\" style=\"width: 100%; height: auto;\">\n\nIn conclusion, we have taken significant strides in enhancing the DSC and its related functions. These updates not only promote a healthier user experience but also prevent undesired system behaviors such as self-liquidation.\n\nDive into the code, brush up your knowledge, and let's continue exploring the ever-evolving world of coding together!\n",
          "updates": []
        },
        {
          "lessonId": "69e2f5d9-446d-4996-873d-4d81dc757843",
          "number": 10,
          "slug": "defi-deploy-script",
          "title": "Creating the deployment script",
          "description": "Learn the process of creating a deploy script for DeFi projects, including setup, configuration, and deploying smart contracts to the blockchain.",
          "duration": 15,
          "videoUrl": "z01JK10202V4802ShIJrCiGNorPfyn6wZ2FRyIpthlmOp9o",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/10-defi-deploy-script/+page.md",
          "markdownContent": "***\n\n## title: Deploy Script\n\n*Follow along the course with this video.*\n\n# Testing and Deployment\n\nWe've done a lot, so far and it's getting really complex. Now's a great time to perform a sanity check and write some tests.\n\n## 1. The Importance of Testing\n\n*I have no idea if what I'm doing makes any sort of sense. I want to make sure I write some tests here.*\n\nTesting is crucial to ensure that our code is functioning as intended. We can go ahead and create a new folder under 'test' named 'unit'. If you wish, you could skip writing the scripts and deploy in your unit tests. In our scenario, we'll have our unit tests also serve as our integration tests.\n\n## 2. Deploying DSC\n\nTo set the ball rolling, let's write a script to deploy our DSC. Here is a snippet of how this might look:\n\n```javascript\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\ncontract DeployDSC is Script {\n    function run() external returns (DecentralizedStableCoin, DSCEngine, HelperConfig){\n        //Code here\n        }\n    }\n```\n\nThe `run` function is going to return a few things such as the DSC and the DSCEngine. To import our DSC, we're going to use the following line of code:\n\n```javascript\nimport { DecentralizedStableCoin } from \"../src/DecentralizedStableCoin.sol\";\n```\n\nYour `run()` function may look something like this:\n\n```javascript\n    function run() external returns (DecentralizedStableCoin, DSCEngine, HelperConfig) {\n        HelperConfig helperConfig = new HelperConfig(); // This comes with our mocks!\n\n        (address wethUsdPriceFeed, address wbtcUsdPriceFeed, address weth, address wbtc, uint256 deployerKey) =\n            helperConfig.activeNetworkConfig();\n        tokenAddresses = [weth, wbtc];\n        priceFeedAddresses = [wethUsdPriceFeed, wbtcUsdPriceFeed];\n\n        vm.startBroadcast(deployerKey);\n        DecentralizedStableCoin dsc = new DecentralizedStableCoin();\n        DSCEngine dscEngine = new DSCEngine(\n            tokenAddresses,\n            priceFeedAddresses,\n            address(dsc)\n        );\n```\n\nThe DSCEngine plays a critical role in our contract. However, deploying it involves a lot of parameters, making the task a bit complicated. It takes parameters such as `tokenAddresses`, `priceFeedAddresses`, and the DSC address.\n\nThe question then arises, where do we get these addresses from ?\n\nHere, a HelperConfig saves the day.\n\n## 4. HelperConfig\n\nThe HelperConfig will provide us with the addresses needed by the DSCEngine.\n\nHere is a little sneak-peek into the helper config file:\n\n```javascript\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {MockV3Aggregator} from \"../test/mocks/MockV3Aggregator.sol\";\nimport {Script} from \"forge-std/Script.sol\";\nimport {ERC20Mock} from \"@openzeppelin/contracts/mocks/ERC20Mock.sol\";\n\ncontract HelperConfig is Script {\n    NetworkConfig public activeNetworkConfig;\n\n    uint8 public constant DECIMALS = 8;\n    int256 public constant ETH_USD_PRICE = 2000e8;\n    int256 public constant BTC_USD_PRICE = 1000e8;\n\n    struct NetworkConfig {\n        address wethUsdPriceFeed;\n        address wbtcUsdPriceFeed;\n        address weth;\n        address wbtc;\n        uint256 deployerKey;\n    }\n\n    uint256 public DEFAULT_ANVIL_PRIVATE_KEY = 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80;\n\n    constructor() {\n        if (block.chainid == 11155111) {\n            activeNetworkConfig = getSepoliaEthConfig();\n        } else {\n            activeNetworkConfig = getOrCreateAnvilEthConfig();\n        }\n    }\n```\n\nThe `getSepoliaEthConfig` function returns the network configuration for Sepolia:\n\n```javascript\nfunction getSepoliaEthConfig() public view returns (NetworkConfig memory sepoliaNetworkConfig) {\n        sepoliaNetworkConfig = NetworkConfig({\n            wethUsdPriceFeed: 0x694AA1769357215DE4FAC081bf1f309aDC325306, // ETH / USD\n            wbtcUsdPriceFeed: 0x1b44F3514812d835EB1BDB0acB33d3fA3351Ee43,\n            weth: 0xdd13E55209Fd76AfE204dBda4007C227904f0a81,\n            wbtc: 0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063,\n            deployerKey: vm.envUint(\"PRIVATE_KEY\")\n        });\n    }\n```\n\nThe `getOrCreateAnvilEthConfig` function either returns the existing anvil configuration or creates a new one.\n\n```javascript\nfunction getOrCreateAnvilEthConfig() public returns (NetworkConfig memory anvilNetworkConfig) {\n        // Check to see if we set an active network config\n        if (activeNetworkConfig.wethUsdPriceFeed != address(0)) {\n            return activeNetworkConfig;\n        }\n\n        vm.startBroadcast();\n        MockV3Aggregator ethUsdPriceFeed = new MockV3Aggregator(\n            DECIMALS,\n            ETH_USD_PRICE\n        );\n        ERC20Mock wethMock = new ERC20Mock(\"WETH\", \"WETH\", msg.sender, 1000e8);\n\n        MockV3Aggregator btcUsdPriceFeed = new MockV3Aggregator(\n            DECIMALS,\n            BTC_USD_PRICE\n        );\n        ERC20Mock wbtcMock = new ERC20Mock(\"WBTC\", \"WBTC\", msg.sender, 1000e8);\n        vm.stopBroadcast();\n\n        anvilNetworkConfig = NetworkConfig({\n            wethUsdPriceFeed: address(ethUsdPriceFeed), // ETH / USD\n            weth: address(wethMock),\n            wbtcUsdPriceFeed: address(btcUsdPriceFeed),\n            wbtc: address(wbtcMock),\n            deployerKey: DEFAULT_ANVIL_PRIVATE_KEY\n        });\n    }\n```\n\n## 5. Final Steps\n\nWe're almost there. Having obtained the needed addresses from our HelperConfig, we can now return to our DeployDSC script. We can import HelperConfig like so:\n\n```javascript\nimport { HelperConfig } from \"./HelperConfig.s.sol\";\n```\n\nOnce imported, if we look back to our run function, we can see we pull the addresses from the `activeNetworkConfiguration` of our HelperConfig and then create the arrays for token addresses and price feeds.\n\n```javascript\n    function run() external returns (DecentralizedStableCoin, DSCEngine, HelperConfig) {\n        HelperConfig helperConfig = new HelperConfig(); // This comes with our mocks!\n\n        (address wethUsdPriceFeed, address wbtcUsdPriceFeed, address weth, address wbtc, uint256 deployerKey) =\n            helperConfig.activeNetworkConfig();\n        tokenAddresses = [weth, wbtc];\n        priceFeedAddresses = [wethUsdPriceFeed, wbtcUsdPriceFeed];\n\n        vm.startBroadcast(deployerKey);\n        DecentralizedStableCoin dsc = new DecentralizedStableCoin();\n        DSCEngine dscEngine = new DSCEngine(\n            tokenAddresses,\n            priceFeedAddresses,\n            address(dsc)\n        );\n        dsc.transferOwnership(address(dscEngine));\n        vm.stopBroadcast();\n        return (dsc, dscEngine, helperConfig);\n```\n\nWith our arrays in place, we're ready to deploy our DSCEngine. Our last step involves transferring ownership of the deployed contract to the DSCEngine, in this line:\n\n```javascript\ndsc.transferOwnership(address(engine));\n```\n\nOnly the engine can now interact with the DSC.\n\n## 6. Conclusion\n\nWow, we've covered a lot and we have so much more to go. In this section we set up a HelperConfig to assist us with assigning network and token addresses. We also wrote a deployment script which uses that HelperConfig to deploy our contract AND we assign ownership of that contract to our DSCEngine. Whew, take a break - you've earned it!\n",
          "updates": []
        },
        {
          "lessonId": "1e420664-a74f-4b4c-b057-af62356da282",
          "number": 11,
          "slug": "test-defi-protocol",
          "title": "Test the DSCEngine smart contract",
          "description": "Understand the process and importance of testing DSCEngine smart contracts in DeFi, including methodologies, best practices, and common test scenarios.",
          "duration": 12,
          "videoUrl": "28W2LRJrFV1aKxYFHqr7UlxsTPV01pesWOdHVu3zWQtg",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/11-defi-tests/+page.md",
          "markdownContent": "***\n\n## title: Tests\n\n*Follow along the course with this video.*\n\n# Developing Unit Tests for Smart Contracts using Deploy Scripts\n\nHello, developers! In the process of writing our smart contracts, it's incredibly crucial that we have a comprehensive testing suite. Recently, I came across a method that could potentially streamline your testing process. By incorporating the use of deploy scripts into the creation of our unit tests, we can test as we write our code, thereby making the entire development process much smoother. Intrigued yet? Let's dive right in!\n\n## Starting with Preliminaries: DSCEngine Test\n\nBefore we can begin testing, let's first establish why we are doing this in the first place. If you recall, our DSCEngine has a series of functions that we must validate. Functions such as `getUsdValue`, `getAccountCollateralValue` are crucial to check. Moreover, we also need to ensure that Minting, the constructor, and depositing work effectively.\n\nAs we embark on testing these functions, we will concurrently write tests and deploy scripts to ensure that glaring mistakes are spotted immediately—ideally reducing the need to refactor or rewrite code. The biggest advantage here is that an improved confidence in the correctness of your code can directly speed up your coding process.\n\nWe'll start by setting up the `DSCEngineTest.t.sol` contract.\n\n```javascript\n//SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\nimport {Test} from \"forge-std/Test.sol\";\n\n\nContract DSCEngineTest is Test {\n\n}\n```\n\nIn the function `setUp`, we'll need to deploy our contract. We do this by importing `DeployDSC` from the `DeployDSC.s.sol` file and then creating a new instance of `DeployDSC` called `deployer`. On top of that, we'll also need to import the `DecentralizedStableCoin` and `DSCEngine` contracts from their respective solidity files.\n\n```javascript\n//SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\nimport {Test} from \"forge-std/Test.sol\";\nimport {DeployDSC} from \"../../script/DeployDSC.s.sol\";\nimport {DSCEngine} from \"../../src/DSCEngine.sol\";\nimport {DecentralizedStableCoin} from \"../../src/DecentralizedStableCoin.sol\";\nimport {HelperConfig} from \"../../script/HelperConfig.s.sol\";\n\n\nContract DSCEngineTest is Test {\n    DeployDSC deployer;\n    DecentralizedStableCoin dsc;\n    DSCEngine dsce;\n    HelperConfig config;\n\n    function setUp() public {\n        deployer = new DeployDSC();\n        (dsc, dsce, config) = deployer.run();\n    }\n}\n```\n\nPlease note: It is pretty handy to use GitHub copilot or any AI that you prefer to assist in these scenarios.\n\n## Establishing the First Test: Price Feeds\n\nWith our contract now set up, let's move on to creating the first actual test. Here, we want to validate our `getUsdValue` function.\n\n```javascript\nfunction testGetUsdValue() public {\n    //Test goes here//\n}\n```\n\nFor this particular test, we need to pass a token address and an amount. We can easily fetch these tokens from our `helperConfig`. Also, let's handle the `ethUsdPriceFeed` and `weth` at this stage.\n\n```javascript\nContract DSCEngineTest is Test {\n    DeployDSC deployer;\n    DecentralizedStableCoin dsc;\n    DSCEngine dsce;\n    HelperConfig config;\n    address ethUsdPriceFeed;\n    address weth;\n\n    ...\n\n}\n\n```\n\nIn the `setUp` function, we'll get the `weth` and `ethUsdPriceFeed` addresses from the HelperConfig, like so:\n\n```javascript\n    (ethUsdPriceFeed,, weth,,) = config.activeNetworkConfig();\n```\n\nNext, let's calculate the expected USD value assuming that there are 15 ETH, each priced at $2,000. The calculation would be simple: `15ETH * $2000 per ETH = $30,000`. Afterward, we call the `getusdvalue` function on the DSC engine and compare the expected and actual USD amounts. The test function should look something like this:\n\n```javascript\n    function testGetUsdValue() public {\n        uint256 ethAmount = 15e18;\n        // 15e18 ETH * $2000/ETH = $30,000e18\n        uint256 expectedUsd = 30000e18;\n        uint256 usdValue = dsce.getUsdValue(weth, ethAmount);\n        assertEq(usdValue, expectedUsd);\n    }\n```\n\nWe can run this test by using the following command in our terminal:\n\n```bash\nforge test -mt testGetUsdValue\n```\n\n...and if everything went smoothly, it should pass! Great work!\n\nThe previous section might appear as lots of steps for a single test, but I have found this approach of integrating my deploy scripts into my test suite from the beginning quite helpful. However, depending on your project needs, you may choose to use them as integration tests.\n\n## Dealing with Depositing Collateral\n\nWith our first test written and running fine, let's shift our focus to the next critical function, `depositCollateral`. For this test, we'll imitate a user and deposit collateral. Here, we are taking advantage of the prank functionality to temporarily modify the global state.\n\n```javascript\n    function testRevertsIfCollateralZero() public {\n        vm.startPrank(user);\n        ERC20Mock(weth).approve(address(dsce), amountCollateral);\n\n        vm.expectRevert(DSCEngine.DSCEngine__NeedsMoreThanZero.selector);\n        dsce.depositCollateral(weth, 0);\n        vm.stopPrank();\n    }\n```\n\nThinking about it, we may want to mint the user some weth. As this could be used in more than one test, it would be efficient to do this right in the setup. Doing this in the setup ensures that it won't have to be performed for every single test. Don't forget to import `ERC20Mock` from OpenZeppelin for this.\n\nImport\n\n```javascript\nimport { ERC20Mock } from \"@openzeppelin/contracts/mocks/ERC20Mock.sol\";\n```\n\nsetUp\n\n```javascript\n    uint256 amountCollateral = 10 ether;\n    uint256 public constant STARTING_USER_BALANCE = 10 ether;\n\n    function setUp() external {\n        DeployDSC deployer = new DeployDSC();\n        (dsc, dsce, helperConfig) = deployer.run();\n        (ethUsdPriceFeed, btcUsdPriceFeed, weth, wbtc, deployerKey) = helperConfig.activeNetworkConfig();\n\n        ERC20Mock(weth).mint(user, STARTING_USER_BALANCE);\n        ERC20Mock(wbtc).mint(user, STARTING_USER_BALANCE);\n    }\n```\n\nFor now, I am content with these tests. However, eventually, we will likely need a test for collateral being deposited into these data structures. Then again, testing is a continuous process. As you write your code, keep writing tests and *don't stop*. Remember, there isn't an absolute, singular process that works for all, but experimenting and finding what works for you is the key.\n\nI hope you enjoyed this in-depth tutorial on writing unit tests for your smart contracts using deploy scripts. Incorporating these practices can significantly aid you in constructing robust, error-free smart contracts. Experience the difference today! Happy coding!\n\n<img src=\"/foundry-defi/11-defi-tests/defi-tests1.PNG\" style=\"width: 100%; height: auto;\">\n",
          "updates": []
        },
        {
          "lessonId": "8a83df4b-a80d-4593-a713-c8bfc26bfb6b",
          "number": 12,
          "slug": "defi-deposit-and-mint-function",
          "title": "Create the depositAndMint function",
          "description": "This lesson focuses on developing a combined deposit and mint function in DeFi, emphasizing its efficiency and integration into the DeFi framework.",
          "duration": 3,
          "videoUrl": "4EwEFMZPS01KISCQVCyassnpSvfgycWeBPiUEN4NuVkU",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/12-defi-deposit-and-mint/+page.md",
          "markdownContent": "***\n\n## title: depositCollateralAndMintDSC\n\n*Follow along the course with this video.*\n\n# Adding Functionality to Our Smart Contract: One-Stop for Depositing Collateral and Minting DSC\n\nWelcome back! As we continue down the road on our smart contract journey, we've now arrived at an important crossroads. To refresh your memory, we've successfully developed a method for depositing collateral and a separate procedure for minting our native token, the DSC.\n\nOur tests here have been exploratory in nature and although we're assuming these functions are operationally sound, we have yet to put them under the microscope of an extensive unit test suite. However, now we're making substantial progress!\n\n## Where We Are\n\nBy now, we've not only created a way to deposit collateral and mint our DSC token, but also we've allowed for substantial access to critical information concerning our financial ecosystem. This is great! Yet, our journey is far from over. Our next step is to merge the deposit and mint mechanisms into a function we anticipate many of our protocol participants will frequently utilize — `depositCollateralAndMintDsc()`.\n\n### Why this Function?\n\nThis function is strategically important for our protocol, primarily because its purpose directly aligns with the key flow of our system: users deposit collateral and mint DSC. It combines both operations in a swift, efficient, and convenient manner. Swift and efficient because it accomplishes both operations in one transaction. Convenient because users are spared the requirement of separately interacting with two operations: `mint` and `depositCollateral`.\n\nWithout further ado, let's dive into the implementation of this function.\n\n### Merging `mint` and `depositCollateral` Functions\n\n```javascript\n    function depositCollateralAndMintDsc(\n        address tokenCollateralAddress,\n        uint256 amountCollateral,\n        uint256 amountDscToMint)\n        external {\n\n        depositCollateral(tokenCollateralAddress, amountCollateral);\n        mintDSC(amountDscToMint);\n    }\n```\n\nNote that we've shifted `depositCollateral()` and `mintDSC()` from being external to public functions, enabling them to be called within our smart contract.\n\n```javascript\n    function depositCollateral(address tokenCollateralAddress, uint256 amountCollateral) public {\n        //implementation\n    }\n    function mintDSC(uint256 amountDscToMint) public {\n        //implementation\n    }\n```\n\n### Adding NatSpec\n\nAs usual, we'll garnish our function with NatSpec comments to bring more clarity to our code. As we annotate `depositCollateralAndMintDsc()`, GitHub Copilot, the AI code-completion tool, proves to be a great companion.\n\n```javascript\n    /*\n     * @param tokenCollateralAddress: The address of the token to be deposited as collateral\n     * @param amountCollateral: The amount of collateral to deposit\n     * @param amountDscToMint The amount of DecentralizedStableCoin to mint\n     * @notice This function will deposit your collateral and mint DSC in one transaction\n     */\n    function depositCollateralAndMintDSC(address tokenCollateralAddress, uint256 amountCollateral, uint256 amountDSCToMint) public {...}\n```\n\nTo paraphrase poet Oliver Holmes, we're staking out the distance between the goal and where we are now. A large chunk of our protocol now focuses on the simultaneous depositing of collateral and minting of our native stablecoin, DSC, all within one user-friendly function. We're making a major stride into simplifying and optimizing the protocol user experience.\n\n<img src=\"/foundry-defi/12-defi-deposit-and-mint/defi-deposit-and-mint1.PNG\" style=\"width: 100%; height: auto;\">\n",
          "updates": []
        },
        {
          "lessonId": "5cdf96d4-5a9f-48c4-9394-c33bacea8604",
          "number": 13,
          "slug": "defi-how-to-redeem-collateral",
          "title": "Create the redeem collateral function",
          "description": "Explore the development of a function for redeeming collateral in DeFi, including its significance, operational process, and impact on users.",
          "duration": 12,
          "videoUrl": "AVCvDHe02NVRIcXwpBnSvoYakCLqXsn4IkPdFz2UEEwU",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/13-defi-redeem-collateral/+page.md",
          "markdownContent": "***\n\n## title: Redeem Collateral\n\n*Follow along the course with this video.*\n\n# Deconstructing the 'Redeem Collateral' Function\n\nIn this section we're going to be diving deep into our `redeemCollateral` function with a focus on safe and efficient transactions for our users.\n\n## Creating the 'redeemCollateral' Function\n\nFirst things first, in order for users to redeem the collateral, they need to have a health factor above one even after their collateral is pulled out. Ensuring this is the operating protocol will maintain the platform's integrity and ensure safe transactions.\n\n```javascript\nfunction redeemCollateral(address tokenCollateralAddress, uint256 amountCollateral) external nonReentrant moreThanZero(amountCollateral){...}\n```\n\nIn our redeem collateral function, we start by allowing the user to select the type of collateral they would like to redeem. The function then checks the balance to ensure that the requested amount is available for withdrawal. It is crucial that there are no zero-amount transactions, as these often signify errors.\n\nTo streamline the process, we ensure this function is 'non-reentrant', meaning it can't be recursively called by an external contract, preventing potential attacks and ensuring greater safety. If necessary, these protective measures will be relayed later during a gas audit.\n\n## Ensuring Consistency\n\nIn computing science there's a concept called \"DRY: Don't Repeat Yourself\". If you find that you are writing the same code repeatedly, it's usually a sign that you need to refactor your code. Thus, while this function may currently be written in a particular style, it could be subject to change in the future to ensure that our code remains efficient and clean.\n\n## Updating Our Internal Accounting\n\nIn order to keep track of the collateral that each individual user has in their account, we use internal accounting. This eliminates the possibility of users withdrawing more collateral than they have in their accounts.\n\n```javascript\nfunction redeemCollateral(address tokenCollateralAddress, uint256 amountCollateral) external nonReentrant moreThanZero(amountCollateral){\n    s_collateralDeposited[msg.sender][tokenCollateralAddress] -= amountCollateral;\n}\n```\n\nDigging in, the first part of our function updates our internal accounting, deducting the amount withdrawn from the account. If a user tries to withdraw more than they have, the Solidity compiler will throw an error, which is highly useful for preventing any unnecessary headaches.\n\n## Issuing Event Updates\n\nUpon updating the state, we will emit an event to reflect the redeeming of collateral, showing the message sender, the amount of collateral, and the token collateral address.\n\n```javascript\n...\nevent CollateralRedeemed(address indexed user, address indexed token, uint256 indexed amount);\n...\nfunction redeemCollateral(address tokenCollateralAddress, uint256 amountCollateral) external nonReentrant moreThanZero(amountCollateral){\n    s_collateralDeposited[msg.sender][tokenCollateralAddress] -= amountCollateral;\n\n    emit CollateralRedeemed(msg.sender, tokenCollateralAddress, amountCollateral)\n}\n```\n\n## Refactoring the Function\n\nFor now, we've written our `redeemCollateral` function to represent a single instance of someone redeeming their collateral. However, in future iterations of this code, we will likely refactor this function to make it more modular and easily applicable in different scenarios.\n\n## Implementing the CEI Pattern\n\nThe Checks-Effects-Interactions (CEI) pattern is key in ensuring a super-safe contract. First, we perform some checks on the state variables; then, we effectuate changes; finally, we interact with other contracts. We adhere to this practice tightly unless we need to check something after a token transfer has taken place. In some of these instances, we might bypass the CEI pattern but always ensure that transactions are reverted if health-factor conditions are not met.\n\n## Health Factor Maintenance\n\nThe health factor (more commonly known as the collateralization ratio) is key to evaluating the risk of a particular loan, so it's vital to ensure that the health factor doesn't break when the collateral is pulled. We've made a function to check this:\n\n```javascript\n    function redeemCollateral(address tokenCollateralAddress, uint256 amountCollateral)\n    external\n    nonReentrant\n    moreThanZero(amountCollateral){\n    s_collateralDeposited[msg.sender][tokenCollateralAddress] -= amountCollateral;\n\n    emit CollateralRedeemed(msg.sender, tokenCollateralAddress, amountCollateral)\n\n    bool success = IERC20(tokenCollateralAddress).transfer(msg.sender, amountCollateral);\n    if (!success){\n        revert DSCEngine__TransferFailed();\n    }\n    _revertIfHealthFactorIsBroken(msg.sender);\n    }\n\n```\n\nOur `redeemCollateral` function comes with a built-in safeguard to prevent the health factor from falling below acceptable levels.\n\n## The Burn Function\n\nThe burning of DSC reflects removing debt from the system and will likely not affect the health factor since the action lowers debt rather than increasing it. Despite this, we ensure to leave room for checks to protect the integrity of the process. The `_burnDsc` function should look something similar to this:\n\n```js\n    function _burnDsc(uint256 amountDscToBurn, address onBehalfOf, address dscFrom) private {\n        s_DSCMinted[onBehalfOf] -= amountDscToBurn;\n\n        bool success = i_dsc.transferFrom(dscFrom, address(this), amountDscToBurn);\n        // This conditional is hypothetically unreachable\n        if (!success) {\n            revert DSCEngine__TransferFailed();\n        }\n        i_dsc.burn(amountDscToBurn);\n        // revertIfHealthFactorIsBroken(msg.sender); - we don't think this is ever going to hit.\n    }\n```\n\n## Combining Redemption and Burning of DSC\n\nIn the current process, a user first has to burn their DSC and then redeem their collateral, causing a two-transaction process. However, for convenience's sake, let's combine these two transactions into one – making the process much more fluid and efficient. We'll do this in our `redeemCollateralForDsc` function:\n\n```js\n    /*\n     * @param tokenCollateralAddress: The ERC20 token address of the collateral you're depositing\n     * @param amountCollateral: The amount of collateral you're depositing\n     * @param amountDscToBurn: The amount of DSC you want to burn\n     * @notice This function will withdraw your collateral and burn DSC in one transaction\n     */\n    function redeemCollateralForDsc(address tokenCollateralAddress, uint256 amountCollateral, uint256 amountDscToBurn)\n        external\n        moreThanZero(amountCollateral)\n    {\n        _burnDsc(amountDscToBurn, msg.sender, msg.sender);\n        _redeemCollateral(tokenCollateralAddress, amountCollateral, msg.sender, msg.sender);\n        //redeem collateral already checks health factor\n    }\n```\n\nDon't forget NatSpec!\n\n## Conclusion\n\nThe `redeemCollateral` function, while seemingly complex, is necessary to ensure safe, secure transactions on the blockchain. By walking through each step of the function – from creating it to refactoring it – we offer a comprehensive view of how such a function operates.\n\nWhile the structure of these functions described here may change slightly in the future, it's crucial to understand the basics: enforce checks, maintain health factors, and avoid redundant code. Happy coding!\n",
          "updates": []
        },
        {
          "lessonId": "df0ffbd6-b926-4bde-84d6-3977d17ed15d",
          "number": 14,
          "slug": "defi-liquidation-setup",
          "title": "Setup liquidations",
          "description": "Dive into setting up liquidations in DeFi protocols, understanding their mechanics, importance, and their role in maintaining financial stability. ",
          "duration": 17,
          "videoUrl": "jRJbUl3wMkuJE1w5unH00wtjNd702RW5KWyc4IE51nvlU",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/14-defi-liquidation-setup/+page.md",
          "markdownContent": "***\n\n## title: Liquidation Setup\n\n*Follow along the course with this video.*\n\n# Understanding and Implementing De-Fi Liquidation Function\n\nIn the world of crypto and blockchain, understanding and executing key concepts such as depositing collateral, minting stablecoins, redeeming collateral, and liquidation is essential. A user can mint our stablecoin by depositing collateral, redeem their collateral for the minted stablecoin, or burn their stablecoin to improve their health factor.\n\n## Implementing the Liquidation Function\n\nAn integral part of the system is the `liquidate()` function. This comes into play when we approach the phase of under-collateralization - we must start liquidating positions to prevent the system from crashing. Here's an example: suppose you have $100 worth of ETH backing $50 worth of DSC, and the price of ETH drops to $20. Now, we have $20 worth of ETH backing $50 worth of DSC, which makes the DSC worth less than a dollar. Hence, to prevent this scenario, positions need to be liquidated and removed from the system if the price of the collateral tanks.\n\nThe base of our `liquidate` function, with NatSpec should look like this:\n\n```js\n    /*\n    * @param collateral: The ERC20 token address of the collateral you're using to make the protocol solvent again.\n    * This is collateral that you're going to take from the user who is insolvent.\n    * In return, you have to burn your DSC to pay off their debt, but you don't pay off your own.\n    * @param user: The user who is insolvent. They have to have a _healthFactor below MIN_HEALTH_FACTOR\n    * @param debtToCover: The amount of DSC you want to burn to cover the user's debt.\n    *\n    * @notice: You can partially liquidate a user.\n    * @notice: You will get a 10% LIQUIDATION_BONUS for taking the users funds.\n    * @notice: This function working assumes that the protocol will be roughly 150% overcollateralized in order for this to work.\n    * @notice: A known bug would be if the protocol was only 100% collateralized, we wouldn't be able to liquidate anyone.\n    * For example, if the price of the collateral plummeted before anyone could be liquidated.\n    */\n    function liquidate(address collateral, address user, uint256 debtToCover) external moreThanZero nonReentrant {...}\n```\n\nIn cases of nearing under-collateralization, the protocol pays someone to liquidate the positions. This gamified incentive system provides an opportunity for users to earn \"free money\" by removing other people's positions in the protocol.\n\n## Bonus for Liquidators\n\nTo incentivize the liquidation process, the protocol offers a bonus for the liquidators. For example, upon liquidating $75, the liquidator can claim the whole amount by paying back $50 of DSC, effectively gaining a bonus of $25.\n\nNote that this system works only when the protocol is always over-collateralized. If the price of the collateral plummets before anyone can liquidate, the bonuses would no longer be available to the liquidators.\n\n## Checking the User's Health Factor\n\nThe first thing we have to be sure of when calling the `liquidate` function is, can this user be liquidated? We're going to implement a check which will revert if the user's health factor is OK. Fortunately we already have a function we can use to check (`healthFactor()`)!\n\n```js\n...\nerror DSCEngine__HealthFactorOk();\n...\n    function liquidate(address collateral, address user, uint256 debtToCover)\n        external\n        moreThanZero(debtToCover)\n        nonReentrant {\n        uint256 startingUserHealthFactor = _healthFactor(user);\n        if (startingUserHealthFactor >= MIN_HEALTH_FACTOR) {\n            revert DSCEngine__HealthFactorOk();\n        }\n        uint256 tokenAmountFromDebtCovered = getTokenAmountFromUsd(collateral, debtToCover);\n        ...\n    }\n```\n\n```js\n    function getTokenAmountFromUsd(address token, uint256 usdAmountInWei) public view returns (uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(s_priceFeeds[token]);\n        (, int256 price,,,) = priceFeed.staleCheckLatestRoundData();\n        // $100e18 USD Debt\n        // 1 ETH = 2000 USD\n        // The returned value from Chainlink will be 2000 * 1e8\n        // Most USD pairs have 8 decimals, so we will just pretend they all do\n        return ((usdAmountInWei * PRECISION) / (uint256(price) * ADDITIONAL_FEED_PRECISION));\n    }\n```\n\nFor a precise liquidation process, you need to know exactly how much of a token (say ETH) is equivalent to a particular amount of USD. The above function takes care of this conversion.\n\n## Liquidating and Multifying the Collateral\n\nIn order to incentivize liquidators and ensure the protocol remains over collateralized, the liquidator receives a bonus -- In our model, we've given a 10% bonus.\n\n```js\n...\ncontract DSCEngine is ReentrancyGuard {\n    ...\n    uint256 private constant LIQUIDATION_BONUS = 10; // This means you get assets at a 10% discount when liquidating\n    ...\n    function liquidate(address collateral, address user, uint256 debtToCover)\n        external\n        moreThanZero(debtToCover)\n        nonReentrant\n    {\n        ...\n        uint256 bonusCollateral = (tokenAmountFromDebtCovered * LIQUIDATION_BONUS) / 100;\n        uint256 totalCollateralToRedeem = tokenAmountFromDebtCovered + bonusCollateral;\n        ...\n    }\n    ...\n}\n```\n\nThe liquidator gets a bonus and the total collateral to redeem becomes a sum of the token amount from debt covered and the bonus collateral.\n\n## Wrapping Up\n\nIn conclusion, implementing a liquidation function in a cryptocurrency protocol guarantees its survival and stability in times of under-collateralization. Remember, in a decentralized ecosystem, the health of the system has to be maintained over and above all.\n\nIf any part of this post doesn't make sense, don't hesitate to ask in the discussions forum, or Google it. Use the resources that you have to your advantage! In the next part we'll be refactoring and finishing up the `liquidate()` function.\n",
          "updates": []
        },
        {
          "lessonId": "7376cbd3-3cbd-4335-8d15-56868dfcd8ae",
          "number": 15,
          "slug": "defi-liquidation-refactor",
          "title": "Refactor liquidations",
          "description": "This lesson focuses on refining the DeFi protocol by refactoring the 'redeemCollateral()' function. It covers the importance of testing and refactoring for building a reliable DeFi protocol, enhancing security, and improving functionality.",
          "duration": 13,
          "videoUrl": "xZ17uj5HVjUTBbvVYKTgq9vJ4oXp985EUkE2KIGCvmo",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/15-defi-liquidation-refactor/+page.md",
          "markdownContent": "***\n\n## title: Liquidation Refactor\n\n*Follow along the course with this video.*\n\n# Creating a Robust DeFi Protocol\n\nHello everyone and welcome back! In this section, we will discuss the importance of thorough testing and regular refactoring to build a robust and reliable decentralized finance (DeFi) protocol, we will also illustrate how code modifications can improve protocol functionality.\n\n## Refining a DeFi protocol\n\nLet's talk about the `redeemCollateral()` function in our DeFi protocol. Currently, it's a public function and takes token collateral address and amount collateral as inputs. It's hardcoded to the message sender, which works perfectly if the token collateral, address, and amount collateral belong to the person calling the function. However, it fails when we need to redeem someone else's collateral, as in the case of a third-party user with bad debt.\n\n<img src=\"/foundry-defi/15-defi-liquidation-refactor/defi-liquidation-refactor1.PNG\" style=\"width: 100%; height: auto;\">\n\nWith our DeFi protocol, we need to enhance this feature by augmenting our code. Thankfully, code modification can resolve this.\n\n### Internal redeem collateral function\n\n<img src=\"/foundry-defi/15-defi-liquidation-refactor/defi-liquidation-refactor2.PNG\" style=\"width: 100%; height: auto;\">\n\nRefactoring the code lets us create an internal `_redeemCollateral()` function to redeem collateral from anyone. Creating an internal function makes it accessible only by other functions within the contract, therefore enhancing the protocol's security by preventing unauthorized usage.\n\n```js\nfunction _redeemCollateral (address tokenCollateralAddress, uint256 amountCollateral, address from, address to) private {...}\n```\n\nWe can include `address from` and `address to` in our input parameters in our internal function to enhance functionality. So, when someone undergoes liquidation, an address can be given from which to redeem and another one to receive the rewards.\n\nWe then move the original code in the public redeem collateral function to our newly created private function. We revise `msg.sender` to `from` and update our `CollateralRedeemed` event info accordingly.\n\n```js\n...\ncontract DSCEngine is ReentrancyGuard {\n    ...\n    event CollateralRedeemed(address indexed redeemFrom, address indexed redeemTo, address token, uint256 amount); // if redeemFrom != redeemedTo, then it was liquidated\n    ...\n    function _redeemCollateral(address tokenCollateralAddress, uint256 amountCollateral, address from, address to)\n        private\n    {\n        s_collateralDeposited[from][tokenCollateralAddress] -= amountCollateral;\n        emit CollateralRedeemed(from, to, tokenCollateralAddress, amountCollateral);\n        bool success = IERC20(tokenCollateralAddress).transfer(to, amountCollateral);\n        if (!success) {\n            revert DSCEngine__TransferFailed();\n        }\n    }\n    ...\n}\n```\n\nThis provides internal function usage in our public redeem collateral function. We then replace the original code with a call to our `_redeemCollateral` function, passing appropriate addresses for liquidation or redemption.\n\n```js\n    function redeemCollateral(address tokenCollateralAddress, uint256 amountCollateral)\n        external\n        moreThanZero(amountCollateral)\n        nonReentrant\n    {\n        _redeemCollateral(tokenCollateralAddress, amountCollateral, msg.sender, msg.sender);\n        revertIfHealthFactorIsBroken(msg.sender);\n    }\n```\n\nFinally, in the liquidation process, we use `_redeemCollateral` to pull collateral from the user undergoing liquidation and transfer the amount to whoever called the `liquidate` function.\n\n```js\n    function liquidate(address collateral, address user, uint256 debtToCover)\n        external\n        moreThanZero(debtToCover)\n        nonReentrant\n    {\n        uint256 startingUserHealthFactor = _healthFactor(user);\n        if (startingUserHealthFactor >= MIN_HEALTH_FACTOR) {\n            revert DSCEngine__HealthFactorOk();\n        }\n        // If covering 100 DSC, we need to $100 of collateral\n        uint256 tokenAmountFromDebtCovered = getTokenAmountFromUsd(collateral, debtToCover);\n        // And give them a 10% bonus\n        // So we are giving the liquidator $110 of WETH for 100 DSC\n        // We should implement a feature to liquidate in the event the protocol is insolvent\n        // And sweep extra amounts into a treasury\n        uint256 bonusCollateral = (tokenAmountFromDebtCovered * LIQUIDATION_BONUS) / 100;\n        // Burn DSC equal to debtToCover\n        // Figure out how much collateral to recover based on how much burnt\n        _redeemCollateral(collateral, tokenAmountFromDebtCovered + bonusCollateral, user, msg.sender);\n        ...\n    }\n```\n\n## Iterative Refactoring\n\nIterative refactoring is indispensable for boosting protocol performance. In our case, besides revising the `redeemCollateral()` function, the `burnDSC()` function required a similar treatment. Just as in the redeem function, we created an internal `_burnDSC()` function to allow burning from any address.\n\nThe principal code changes entailed revising `msg.sender` to `onBehalfOf` and `dscFrom` within the burning event. Ensuring proper comments inside our code, specify that this internal function should only be called if the health factor checks are in place.\n\n```js\n    ...\n    function burnDsc(uint256 amount) external moreThanZero(amount) {\n        _burnDsc(amount, msg.sender, msg.sender);\n        revertIfHealthFactorIsBroken(msg.sender); // I don't think this would ever hit...\n    }\n    ...\n    function _burnDsc(uint256 amountDscToBurn, address onBehalfOf, address dscFrom) private {\n        s_DSCMinted[onBehalfOf] -= amountDscToBurn;\n\n        bool success = i_dsc.transferFrom(dscFrom, address(this), amountDscToBurn);\n        // This conditional is hypothetically unreachable\n        if (!success) {\n            revert DSCEngine__TransferFailed();\n        }\n        i_dsc.burn(amountDscToBurn);\n    }\n    ...\n```\n\nApplying these changes to the public `burnDSC()` function allows us to incorporate the burn DSC feature into the liquidation process. Here, the liquidator pays down the debt, thus reducing the minted DSC.\n\n```js\n    ...\n    function liquidate(address collateral, address user, uint256 debtToCover)\n        external\n        moreThanZero(debtToCover)\n        nonReentrant\n    {\n        ...\n        _redeemCollateral(collateral, tokenAmountFromDebtCovered + bonusCollateral, user, msg.sender);\n        _burnDsc(debtToCover, user, msg.sender);\n\n        uint256 endingUserHealthFactor = _healthFactor(user);\n        // This conditional should never hit, but just in case\n        if (endingUserHealthFactor <= startingUserHealthFactor) {\n            revert DSCEngine__HealthFactorNotImproved();\n        }\n        revertIfHealthFactorIsBroken(msg.sender);\n    }\n    ...\n```\n\nNote that we've also created Health Factor checks to ensure the integrity of the accounts of both the liquidator and the liquidatee is safe throughout this process.\n\n<img src=\"/foundry-defi/15-defi-liquidation-refactor/defi-liquidation-refactor3.PNG\" style=\"width: 100%; height: auto;\">\n\nAfter such modifications, we should thoroughly validate protocol operation.\n\n## Running tests and fine-tuning\n\nProper unit testing is crucial for creating a solid DeFi protocol. It ensures the code correctly handles various scenarios and edge cases. With modifications in place, we must fix any syntax errors and ensure our code compiles successfully. Regression testing can then assure us that the changes haven't caused any unforeseeable issues that cause existing features to break.\n\nIt is also crucial to keep a clear and coherent code structure with neat comments and clear variable names. This practice not only helps in debugging, but also aids security auditors and other developers in understanding the code smoothly.\n\n<img src=\"/foundry-defi/15-defi-liquidation-refactor/defi-liquidation-refactor4.PNG\" style=\"width: 100%; height: auto;\">\n\nTakeaways:\n\n* Good readable code along with comprehensive unit tests builds a strong DeFi protocol.\n* Regular refactoring helps us improve protocol functionality, decrease chances of bugs and increases code maintainability.\n* Adherence to CHECKS-EFFECTS-INTERACTIONS pattern ensures contract's state doesn't change unexpectedly during a transaction.\n\nIn the next few sections, we'll dive deep into testing methodologies and bug management. But for now, take that much-deserved break. So stretch those legs, fuel up, and meet us back here soon. Happy Coding!\n",
          "updates": []
        },
        {
          "lessonId": "35970bac-04ed-4d1a-93e1-8d71cb2486af",
          "number": 16,
          "slug": "defi-protocols-advanced-testings-testing",
          "title": "DSCEngine advanced testing",
          "description": "This lesson dives into advanced testing techniques for Ethereum smart contracts using Foundry. It emphasizes the significance of testing for function initialization and demonstrates constructing and executing thorough test cases.",
          "duration": 15,
          "videoUrl": "x5X00U2CIg39S01dW67zgq1Tz9Hq9p9mZYuMVTYA4kk5A",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/16-defi-leveling-up-testing/+page.md",
          "markdownContent": "***\n\n## title: Leveling Up Testing\n\n*Follow along the course with this video.*\n\n# In-depth Guide to Testing for the Ethereum Smart Contract\n\nWriting tests for Ethereum smart contracts can be challenging even for experienced developers. In this section, I will guide you through some practical techniques to improve your testing structure using Foundry, our robust solidity framework. Note that this is a hands-on guide, so please open up your terminal to follow along.\n\n## Getting Started\n\nUsually, getting started is the hardest part. Open up your terminal, let's dive in. Our aim is to increase our code coverage.\n\n```bash\nforge coverage\n```\n\n## Constructor and Price Feed Tests\n\nLet's begin with some constructor tests. We will also want to set up some price feed tests. These will confirm whether things have been initialized correctly in our code. 'What are we testing?' you may ask. Your query should lead you to the constructor in your code. Check that you are correctly reverting when token lengths are not matching. For this test, you will need to create some address arrays — one for token addresses and another for price feed addresses.\n\nHere's our first constructor test:\n\n```js\n    ///////////////////////\n    // Constructor Tests //\n    ///////////////////////\n    address[] public tokenAddresses;\n    address[] public feedAddresses;\n\n    function testRevertsIfTokenLengthDoesntMatchPriceFeeds() public {\n        tokenAddresses.push(weth);\n        feedAddresses.push(ethUsdPriceFeed);\n        feedAddresses.push(btcUsdPriceFeed);\n\n        vm.expectRevert(DSCEngine.DSCEngine__TokenAddressesAndPriceFeedAddressesAmountsDontMatch.selector);\n        new DSCEngine(tokenAddresses, feedAddresses, address(dsc));\n    }\n```\n\nYour code should revert and pass the test. If it does, bravo! If it doesn't, you'll have to review your logic and keep debugging until it works.\n\nWe also want to test our `getTokenAmountFromUsd()` functon:\n\n```js\n     //////////////////\n    // Price Tests  //\n    //////////////////\n\n    function testGetTokenAmountFromUsd() public {\n        // If we want $100 of WETH @ $2000/WETH, that would be 0.05 WETH\n        uint256 expectedWeth = 0.05 ether;\n        uint256 amountWeth = dsce.getTokenAmountFromUsd(weth, 100 ether);\n        assertEq(amountWeth, expectedWeth);\n    }\n```\n\n## The Holy Grail of Tests: Is the Deposit Collateral Reverting?\n\nLet's now proceed to test more of our `depositCollateral()` function, specifically checking the it reverts with unapproved tokens. Dive into the `depositCollateral()` function in your code, our test is going to look something like this:\n\n```js\n    function testRevertsWithUnapprovedCollateral() public {\n        ERC20Mock randToken = new ERC20Mock(\"RAN\", \"RAN\", user, 100e18);\n        vm.startPrank(user);\n        vm.expectRevert(abi.encodeWithSelector(DSCEngine.DSCEngine__TokenNotAllowed.selector, address(randToken)));\n        dsce.depositCollateral(address(randToken), amountCollateral);\n        vm.stopPrank();\n    }\n```\n\nThe result of this test should show a revert.\n\n## Testing Getter Functions\n\nWhen you write your getter functions, also write tests for them. We've written a public verson of the `_getAccountInformation()` function.\n\n```js\n...\ncontract DSCEngine is ReentrancyGuard {\n    ...\n    function getAccountInformation(address user)\n        external\n        view\n        returns (uint256 totalDscMinted, uint256 collateralValueInUsd)\n    {\n        return _getAccountInformation(user);\n    }\n    ...\n}\n```\n\nEnsure that the return values of this function are correct by asserting the output in our test. Note: we've created a modifier here to make it easier to test already deposited collateral.\n\n```js\n...\ncontract DSCEngineTest is StdCheats, Test {\n    ...\n    modifier depositedCollateral() {\n        vm.startPrank(user);\n        ERC20Mock(weth).approve(address(dsce), amountCollateral);\n        dsce.depositCollateral(weth, amountCollateral);\n        vm.stopPrank();\n        _;\n    }\n    ...\n    function testCanDepositedCollateralAndGetAccountInfo() public depositedCollateral {\n        (uint256 totalDscMinted, uint256 collateralValueInUsd) = dsce.getAccountInformation(user);\n        uint256 expectedDepositedAmount = dsce.getTokenAmountFromUsd(weth, collateralValueInUsd);\n        assertEq(totalDscMinted, 0);\n        assertEq(expectedDepositedAmount, amountCollateral);\n    }\n    ...\n}\n```\n\nAfter this, we can run `forge coverage` again to see what our test coverage is like. I'm not going to walk you through writing all these tests (you can find more examples on the repo), but I encourage you to challenge yourself to write more tests for `DSCEngine.sol`.\n\nAt this point, it's important to note that you don't have to attain 100% code coverage. Sometimes, 85%-90% coverage is great, but your test architecture should be set up to spot glaring bugs.\n\n## In Conclusion\n\nRemember that writing tests is the critical way to validate that your code works as expected. Let AI bots like OpenAI's ChatGPT help you write tests, especially for those hard scenarios that need advanced logic. Bear in mind that sometimes your code is correct, but the test may be wrong. Keep debugging until your tests pass and cover as much of your code as possible. Lastly, be ready to refactor your code to make it testable, readable, and maintainable.\n\nWith this guide, you should be able to run adequate tests for your Ethereum smart contracts. Happy coding!\n",
          "updates": []
        },
        {
          "lessonId": "0dce8f57-7346-45fa-84f9-b9384b575d59",
          "number": 17,
          "slug": "defi-writing-fuzz-tests",
          "title": "Write fuzz tests",
          "description": "Lesson 17 explores the implementation of fuzz tests in smart contract development, discussing both stateful and stateless fuzz testing. It focuses on enhancing the robustness of DApps through meticulous unit testing and refactoring.",
          "duration": 17,
          "videoUrl": "L4WAlTQ02dhsiWtsGcjte76FljvanlUEVvVmdqOw6CAU",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/17-defi-open-fuzz-tests/+page.md",
          "markdownContent": "***\n\n## title: Open Fuzz Tests\n\n*Follow along the course with this video.*\n\n# Unit Testing and Refactoring: Building Better and Secure DApps\n\nHello everyone! Welcome back, if you have been following along, you would remember that in our previous section, we had taken a dive into the world of bugs and test cases. We looked at how to identify bugs and, more importantly, how to build a comprehensive battery of test cases. 'Now, are your tests similar to the one I provided? Better? Worse? The point is to have high test coverage for all logical branches in our code. It’s an awesome feeling when we can identify and fix bugs proactively through high-quality tests.\n\n<img src=\"/foundry-defi/17-defi-open-fuzz-tests/defi-open-fuzz-tests1.png\" style=\"width: 100%; height: auto;\">\n\n## Enhancing The Health Factor Function\n\nDuring this testing, I found a need to refactor some code. One significant change was the introduction of a `_calculateHealthFactor()` function. Why did I introduce it? This new function allowed me to create a similar `public` function which provided a great deal of clarity in calculating our service’s health factor. This indirectly turned out to be a very useful tool in our tests, enabling us to get an expected health factor. Consequently, it allowed easy handling of any errors if the actual and expected health factors didn’t match – especially in our test cases when we expected certain events.\n\n```js\n...\ncontract DSCEngine is ReentrancyGuard {\n    ...\n    function _calculateHealthFactor(uint256 totalDscMinted, uint256 collateralValueInUsd)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (totalDscMinted == 0) return type(uint256).max;\n        uint256 collateralAdjustedForThreshold = (collateralValueInUsd * LIQUIDATION_THRESHOLD) / 100;\n        return (collateralAdjustedForThreshold * 1e18) / totalDscMinted;\n    }\n    ...\n    function calculateHealthFactor(uint256 totalDscMinted, uint256 collateralValueInUsd)\n        external\n        pure\n        returns (uint256)\n    {\n        return _calculateHealthFactor(totalDscMinted, collateralValueInUsd);\n    }\n    ...\n}\n```\n\nThis refactoring served a double purpose – a much cleaner code and better visibility of our health factor calculation. In fact, by making this function `public`, the users of our service can play around with it to see how their changes impact the health factor.\n\n## Bug Hunting\n\nIn the debugging exercise, the main point of interest was the `Health Factor` functionality. The `_calculateHealthFactor()` function worked by fetching the account information and then appling the health factor calculation. Here, I found a bug relating to `totalDscMinted`. My fix included a new checker that would detect if the `totalDsdMinted` was zero. If it was indeed zero, we capped the health factor to a maximum (e.g., 256).\n\n```js\n    ...\n    if (totalDscMinted == 0) return type(uint256).max;\n    ...\n```\n\nWhy was this checker important? Well, let’s consider a scenario. What if a user deposits a massive amount of collateral, but doesn't have any DSC Minted? The health factor calculation would divide by zero, causing the system to crash. We have to consider all edge cases to ensure our system is fail-proof.\n\n## Essential External Functions\n\nAdditionally, I added a lot of `external view functions` which would make it easier to interact with our protocol. This eased readability and made our protocol user-friendly.\n\nOf course, with every refactoring, there was an expanded library of test cases to cover all possible scenarios and close all loopholes. Nothing new here, as you’re already well-versed with writing robust test cases. And if your test coverage is around something like 90% – kudos, my friend! You’ve mastered the art of diligent testing in a complex project.\n\n## But...Are We Done Yet?\n\nI’m sure you’re beaming with pride on your accomplishments, and rightly so. But, I have to break it to you – we’re not done yet! We’re now taking up the gauntlet to write the most epic, mind-blowingly awesome code there ever is!\n\n<img src=\"/foundry-defi/17-defi-open-fuzz-tests/defi-open-fuzz-tests2.png\" style=\"width: 100%; height: auto;\">\n\nRight off the bat, the question that you need to repeatedly ask yourself is, ‘What are our invariants properties?’ If you can answer this question correctly, you can write stateful and stateless fuzz tests for your code and harden your application against unforeseen edge cases.\n\n## Understanding Fuzz Testing\n\nIn the world of programming, regardless of how hard you try, it’s almost guaranteed that you will miss a certain edge case scenario. This is where an advanced form of testing called `Fuzz Testing` comes into play.\n\n<img src=\"/foundry-defi/17-defi-open-fuzz-tests/defi-open-fuzz-tests3.PNG\" style=\"width: 100%; height: auto;\">\n\nAs we look at Fuzz Testing, we'll be exploring both stateful and stateless variants.\n\n## Stateless versus Stateful Fuzz Testing\n\nTo put it simply, the previous state doesn't impact the next run in stateless fuzzing. On the other hand, stateful fuzzing uses the state of the previous test run as the starting point for the next one. Here's an example of stateless fuzz testing:\n\nOur Contract:\n\n```js\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    uint256 public shouldAlwaysBeZero = 0;\n    uint256 hiddenValue = 0;\n\n    function doStuff(uint256 data) public {\n        if (data ==2){\n            shouldAlwaysBeZero = 1;\n        }\n        if (hiddenValue == 7){\n            shouldAlwaysBeZero = 1;\n        }\n        hiddenValue = data;\n    }\n}\n```\n\nOur Test:\n\n```js\n    ...\n    function testIAlwaysGetZeroFuzz(uint256 data) public {\n        exampleContract.doStuff(data);\n        assert(exampleContract.shouldAlwaysBeZero() == 0);\n    }\n```\n\nIn the above example, the `doStuff` function should always return zero. The fuzz test will pass varying random arguments to our function, attempting to break this function. Here's a stateful fuzz test:\n\n```js\n...\nimport {StdInvariant} from \"forge-std/StdInvariant.sol\";\n\ncontract MyContractTest is StdInvariant, Test {\n    MyContract exampleContract;\n\n    function setUp() public {\n        exampleContract = new MyContact();\n        targetContract(address(exampleContract));\n    }\n\n    function invariant_testAlwaysReturnsZero() public {\n        assert(exampleContract.shouldAlwaysBeZero() == 0);\n    }\n}\n\n```\n\nThe above example is going to call the functions of `MyContract` randomly, with random data.\n\nThis functionality doesn't stop at the basics. If you're interested in exploring more advanced fuzzing strategies - stay tuned! We'll be diving deeper into this topic in our future posts.\n\n## Wrap Up\n\nLet's have a quick wrap-up of what we discussed today.\n\n* Unit testing is crucial in identifying and fixing bugs.\n* Refactoring not only yields cleaner code but also makes the system easier to understand and interact with.\n* Stateless and stateful fuzz testing is crucial in securing your smart contract.\n\nOverall, enhancements to your testing strategies can significantly increase the resilience and robustness of your platform. In conclusion, I urge you to keep those invariants in mind, keep writing those functions, and don’t let anyone undervalue your tests!\n\nUntil then – happy coding!\n",
          "updates": []
        },
        {
          "lessonId": "d8723ab8-f2c0-4738-a404-7d67735bec48",
          "number": 18,
          "slug": "create-fuzz-tests-handler",
          "title": "Create the fuzz tests handler pt.1",
          "description": "Part 1 of this lesson introduces the concept of fuzz testing in Foundry, focusing on creating detailed invariant tests for smart contracts. It guides through setting up the testing environment and structuring invariants and handlers.",
          "duration": 14,
          "videoUrl": "IPIrYsKq5ylG8oeqkM021e4i1Q00c7qQFiS500mpCsZZ5Q",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/18-defi-handler-fuzz-tests/+page.md",
          "markdownContent": "***\n\n## title: Handler Fuzz Tests\n\n*Follow along the course with this video.*\n\n# Decoding the Magic of Fuzz Testing in Foundry\n\nChances are, you're here because you've heard about the magic that is **fuzz testing** or **invariant testing**. As developers, it's absolutely crucial for us to gain confidence that our code works as intended, especially when it comes to complex projects.\n\nAnd trust me, there's no better way to do this than by writing robust invariant tests.\n\n## Fuzz Testing - An Overview\n\nFuzz testing, also known as fuzzing, is a software testing technique that involves providing invalid, unexpected, or random data as inputs to a computer program. The program is then monitored for exceptions such as crashes, failing built-in code assertions, or potential memory leaks.\n\n<img src=\"/foundry-defi/18-defi-handler-fuzz-tests/defi-handler-fuzz-tests1.png\" style=\"width: 100%; height: auto;\">\n\nIt's like throwing a wrench into a machine and watching to see if and how the machine breaks, giving you a better understanding of the machine's robustness, and how it might break in the future.\n\nWe could compare fuzz testing to an open basketball court where you get to shoot from anywhere you like. It's a fun way to get warmed up and get a feel for the game, especially at the beginning. But the problem is, you could be wasting valuable shots from improbable distances or awkward angles. Instead, you might want to focus on the three-point line or the free-throw line, which hold a higher value in an actual game scenario.\n\nThat's where targeted invariants and fuzz testing with handlers come in!\n\n## Fuzz Testing Vs Invariant Testing\n\nTo clarify, invariant testing is simply a type of fuzz testing. 'Invariant' just means stateful, or persistent.\n\nThe basic methodology, like we saw in the previous video, works okay. But as we start building more complex systems, we begin to see its limitations. Suffice to say, it represents an \"open\" targeted fuzz testing where all functions in a contract are called in any order, attempting to break the invariants.\n\nEnter **invariant testing with handlers**, the more advanced sibling, which curtails these seemingly random efforts with more focused techniques, and is what we'll be focusing more on in this piece.\n\n## Let's Get To Testing!\n\nEnough explanation, let's get our hands dirty! We are about to create some very detailed invariant tests to increase your confidence in your code.\n\n### Setting Up Your Environment\n\n<img src=\"/foundry-defi/18-defi-handler-fuzz-tests/defi-handler-fuzz-tests2.png\" style=\"width: 100%; height: auto;\">\n\nFor our testing purposes, we're going to be using Foundry, a core framework which has a built-in test runner with invariants and handlers.\n\nTo set up your test, create a new test directory within your contract's root directory and add two test files; an invariants test file ( `InvariantsTest.t.sol` ) and a handlers file ( `Handlers.t.sol` ).\n\nIn your invariants test file, you will specify the properties of your system that should remain unaltered or invariant. Handlers, on the other hand, will ensure that these properties are observed in an orderly manner without wastage.\n\n### Invariants and Handlers Uncovered\n\nLet's take a deeper dive into our two new scripts — the invariants and handlers.\n\nYour invariants test file should look something like this:\n\n```js\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {Test} from \"forge-std/Test.sol\";\nimport {StdInvariant} from \"forge-std/StdInvariant.sol\";\nimport {DeployDSC} from \"../../script/DeployDSC.s.sol\";\nimport {DSCEngine} from \"../../src/DSCEngine.sol\";\nimport {DecentralizedStableCoin} from \"../../src/DecentralizedStableCoin.sol\";\nimport {HelperConfig} from \"../../script/HelperConfig.s.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract OpenInvariantsTest is StdInvariant, Test {\n    DeployDSC deployer;\n    DSCEngine dsce;\n    HelperConfig config;\n    address weth;\n    address wbtc;\n\n    function setUp() external {\n        deployer = new DeployDSC();\n        (dsc,dsc,config) = deployer.run();\n        (,, weth, wbtc,) = config.activeNetworkConfig();\n        targetContract(address(dsce));\n    }\n\n    function invariant_protocolMustHaveMoreValueThanTotalSupply() public view{\n        //get the value of all the collateral in the protocol\n        //compare it to all the debt (dsc)\n        uint256 totalSupply = dsc.totalSupply();\n        uint256 totalWethDeposited = IERC20(weth).balanceOf(address(dsce));\n        uint256 totalBtcDeposited = IERC20(wbtc).balanceOf(address(dsce));\n\n        uint256 wethValue = dsce.getUsdValue(weth, totalWethDeposited);\n        uint256 wbtcValue = dsce.getUsdValue(wbtc, totalBtcDeposited);\n\n        assert(wethValue + wbtcValue > totalSupply);\n    }\n```\n\nHere, `totalSupply()` represents one such property that should always hold, geared towards maintaining the total supply of tokens.\n\nNow, let's move on to the handlers file. The handlers help you make efficient test runs and avoid wastage, by ensuring the invariants are checked in a specific order.\n\nFor instance, if you want to test the deposit of a token, the handlers ensure that the token is approved before depositing; this helps to avoid a wasted test run.\n\n### Using Invariant in Foundry\n\nIn the Foundry docs, we can see, the [invariant](https://book.getfoundry.sh/forge/invariant-testing) section allows you to\n\n* set the total number of `runs` for a test.\n* specify `depth`, representing the number of calls in a single run.\n* use `fail_on_revert`, to indicate whether the test should fail upon encountering a revert.\n\nWe can include the following in our `foundry.toml`:\n\n```js\n[invariant];\nruns = 128;\ndepth = 128;\nfail_on_revert = true;\n```\n\nLet's dissect the `fail_on_revert` keyword a bit further. By setting it to false, the test runner tolerates transaction reverts without causing the entire test run to fail. This is useful when you're first getting started or dealing with larger and more complex systems, where not all calls might make sense. This aligns better with the spirit of fuzz testing, where the tests can make wild attempts at breaking the invariants and those that fail with a revert are quietly ignored.\n\nOn the other hand, if set to true, any transaction that reverts is immediately flagged as a test failure. This is useful when you want a stricter assertion of behavioral norms and to quickly identify the condition that’s causing the revert.\n\nHere's some free advice for you: don't get overly excited if your tests pass initially. Instead, aim to find issues, by increasing the number of runs and depth, thus giving our fuzz testing more opportunities to find any hidden bugs.\n\nYou're also likely to find calls that reverted in the process, which should ring some alarm bells and prompt you to look into what could have caused these to fail. This is a easier job with `fail_on_revert: true`.\n\nThe reason for most reverts is that the fuzz may have tested a function with random values that didn't make sense in that context. To prevent such erroneous testing, this is where handlers come knocking once more, as they ensure your functions are called with values in the correct order and format.\n\n## In Conclusion, Invariance and Handlers are Your Allies\n\nThe benefit of working with handlers is that they guide the testing process in a way that makes sense within the context of your protocol, unlike traditional fuzz testing which can end up causing a multitude of function calls in random and improbable combinations.\n\nSo, one of our key takeaways from this deep dive into advanced testing practices is the utility and effectiveness of invariant testing with handlers. As our contract systems become more complex, traditional methods of fuzz testing become increasingly inefficient and can lead to significantly wastage.\n\nSo let's embrace the utility of handlers and tailor our testing specifically to the nuances of our contracts to get the most out of the process and shine a light on any hidden bugs that may be lurking in the shadows.\n\nI hope this guide sheds some light on fuzz and invariant testing, their upsides, and downsides, and how to get started writing such tests. I’ll love to hear how implementing these testing strategies work out for you. Keep coding!\n",
          "updates": []
        },
        {
          "lessonId": "66e7be7e-257f-49a6-b4d2-d1dbf8806564",
          "number": 19,
          "slug": "create-fuzz-tests-handler-part-2",
          "title": "Create the fuzz tests handler pt.2",
          "description": "In Part 2, the focus shifts to crafting optimized handlers for valid function calls in smart contracts. The lesson covers the groundwork of creating function handlers and improving test efficiency through valid and efficient function calls.",
          "duration": 20,
          "videoUrl": "dohUk9vWfHAjPSXZhuG4UB1yHWQFYtf74UVWUsfd568",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/19-defi-handler-stateful-fuzz-tests/+page.md",
          "markdownContent": "***\n\n## title: Handler Fuzz Tests\n\n*Follow along the course with this video.*\n\n# Smart Contract Fuzz Testing: Crafting Handlers for Optimized Valid Calls\n\nSoftware fuzz testing employs a variety of techniques, one of which is handling functions in a manner to ensure valid calls. This section takes you on a comprehensive examination on how to create handlers for smart contracts that will allow you to make valid calls and scan for potential vulnerabilities in your contracts.\n\n## Establishing the Groundwork\n\nIn simple terms, handlers are scripts we create that handle the way we make calls to the Decentralized Stablecoin Engine (`dsce`) - only enabling calls under the condition that the required variables or functions for the call are available and valid.\n\nThis minimizes the chance of wasted function calls which attempt to execute tasks with no valid foundation.\n\n```js\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {Test} from \"forge-std/Test.sol\";\nimport {DSCEngine} from \"../../src/DSCEngine.sol\";\nimport {DecentralizedStableCoin} from \"../../src/DecentralizedStableCoin.sol\";\n\ncontract Handler is Test {\n    DSCEngine dsce;\n    DecentralizedStablecoin dsc;\n\n    constructor(DSCEngine _dscEngine, DecentralizedStablecoin _dsc) {\n        dsce = _dsce;\n        dsc = _dsc;\n        }\n}\n```\n\nTo make sure we generate valid calls, we consider several factors. For instance, there's no logic in calling the 'redeemCollateral' function when there is no collateral to redeem. The handler-script becomes a fail-safe mechanism to avoid such redundancies.\n\n## Handling Function Calls\n\nTo guard against invalid random calls, we define how to make function calls in the handler. For example, the `depositCollateral` function should first validate the collateral before calling it.\n\n```js\n...\ncontract Handler is Test {\n    ...\n    function depositCollateral(address collateral, uint256 amountCollateral) public {\n        dsce.depositCollateral(collateral, amountCollateral);\n    }\n}\n```\n\nWe need to adjust our `Invariants.t.sol` script to leverage the handler contract we're creating. To do this, we change the target contract the test script is referencing for it's fuzz testing:\n\n```js\n...\nimport {Handler} from \"./Handler.t.sol\";\n...\ncontract OpenInvariantsTest is StdInvariant, Test {\n    DeployDSC deployer;\n    DSCEngine dsce;\n    HelperConfig config;\n    address weth;\n    address wbtc;\n    Handler handler;\n\n    function setUp() external {\n        deployer = new DeployDSC();\n        (dsc,dsc,config) = deployer.run();\n        (,, weth, wbtc,) = config.activeNetworkConfig();\n        handler = new Handler(dsce,dsc);\n        targetContract(address(handler));\n    }\n...\n```\n\nNow, when we run our invariant tests, they will target our `Handler` and only call the functions we've specified within the `Handler` contract, in this case `depositCollateral`. However, the function is still being called randomly, with random data and we can do better. We know that random data for the collateral addresses is going to fail, so we can mitigate unnecessary calls be providing our function with seed addresses:\n\n```js\n...\nimport {ERC20Mock} from \"@openzeppelin/contracts/mocks/ERC20Mock.sol\";\n...\ncontract Handler is Test {\n    ...\n    ERC20Mock weth;\n    ERC20Mock wbtc;\n    ...\n    constructor (DSCEngine _dscEngine, DecentralizedStableCoin _dsc){\n        dsce = _dsce;\n        dsc = _dsc;\n\n        address[] memory collateralTokens = dsce.getCollateralTokens();\n        weth = ERC20Mock(collateralTokens[0]);\n        wbtc = ERC20Mock(collateralToken[1]);\n    }\n\n    function depositCollateral(uint256 collateralSeed, uint256 amountCollateral) public {\n        ERC20Mock collateral = _getCollateralFromSeed(collateralSeed)\n        dsce.depositCollateral(address(collateral), amountCollateral);\n    }\n\n    // Helper Functions\n    function _getCollateralFromSeed(uint256 collateralSeed) private view returns (ERC20Mock){\n        if (collateralSeed % 2 == 0){\n            return weth;\n        }\n        return wbtc;\n    }\n}\n```\n\nWhew, that's a lot! Now when we call the tests in our handler, the `depositCollateral` functon will only use valid addressed for collateral provided by our `_getCollateralFromSeed()` function\n\n## Improving Efficiency\n\nThe key to handling function calls is efficiency. Unnecessary or invalid function calls increase iteration loops, resulting in performance issues.\n\nAs you gradually cut down on unnecessary calls, monitor your error reports. Configuring the `failOnRevert` parameter to `true` helps you identify why a test is failing.\n\nLastly, remember not to artificially narrow down your handler function to a state where valid edge cases get overlooked.\n\n<img src=\"/foundry-defi/19-defi-handler-stateful-fuzz-tests/defi-handler-stateful-fuzz-tests1.PNG\" style=\"width: 100%; height: auto;\">\n\n## Wrapping Up\n\nIn conclusion, the vital role of handler-functions in making valid calls during fuzz testing is to optimize performance and catch potential vulnerabilities in the smart contracts. The process demands a continuous balance between weeding out invalid calls and maintaining allowance for valid edge cases.\n\nHowever, always aim for a minimal rejection rate i.e., the `failOnRevert` parameter set to `false`. A perfect handler function will maximize successful runs and reduce reverts to zero.\n\nYou may need to adjust the deposit size to a feasible limit to prevent an overflow when depositing collateral. Ideally, the collateral deposited is lower than the maximum valid deposit size. After completion, every function call should pass successfully, signifying a well-secured contract with high potential for longevity.\n\nHappy testing!\n",
          "updates": []
        },
        {
          "lessonId": "1e5c8f0c-1f20-48bb-ad1f-553b3efa7759",
          "number": 20,
          "slug": "defi-handler-redeeming-collateral",
          "title": "Create the collateral redeemal handler",
          "description": "This lesson delves into the mechanisms of handling collateral in blockchain transactions. It focuses on the implementation and testing of functions for depositing and redeeming collateral, emphasizing the importance of validity checks.",
          "duration": 6,
          "videoUrl": "r4d9lct625a02cT29iprU5SylyFuzHI6qbgSiXjxxPIM",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/20-defi-handler-redeeming-collateral/+page.md",
          "markdownContent": "***\n\n## title: Handler - Redeeming Collateral\n\n*Follow along the course with this video.*\n\n# Handling Collaterals in Blockchain Transactions\n\nToday we will dive into blockchain transactions and the handling of collaterals within those transactions. Specifically the deposit and redemption process of the collateral will be our focus. We will decipher a function for depositing collateral and subsequently a validation function for redeeming it. Details of implementing these functions and some interesting test cases will also be discussed.\n\n## Implementation : Collateral Deposit Function\n\nThis function ensures that the submitted collateral is a valid deposit.\n\n```js\n...\ncontract Handler is Test {\n    ...\n    function depositCollateral(uint256 collateralSeed, uint256 amountCollateral) public {\n        ERC20Mock collateral = _getCollateralFromSeed(collateralSeed)\n        dsce.depositCollateral(address(collateral), amountCollateral);\n    }\n    ...\n}\n```\n\nIn this function, the type of collateral to deposit and amount of collateral to deposit are two required inputs which are Blockchain's unsigned integer represented in form of function arguments.\n\n## Implementation : Collateral Redemption Function\n\nAfter defining the deposit function, let's talk about the collateral redemption function. It's the process of retrieving a specific type of collateral from the deposited pool. The `redeemCollateral()` function, similar to the deposit function, takes an argument that specifies the type of collateral to redeem.\n\nThe function below shows the implementation of this process:\n\n```js\n    function redeemCollateral(uint256 collateralSeed, uint256 amountCollateral) public {\n        ERC20Mock collateral = _getCollateralFromSeed(collateralSeed);\n        dscEngine.redeemCollateral(address(collateral), amountCollateral);\n    }\n```\n\n<img src=\"/foundry-defi/20-defi-handler-redeem-collateral/defi-handler-redeem-collateral1.PNG\" style=\"width: 100%; height: auto;\">\n\n```js\n...\n    function getCollateralBalanceOfUser(address user, address token) external view returns(uint256){\n        return s_collateralDeposited[user][token];\n    }\n...\n```\n\n## Implementing Validity Checks\n\nThe `redeemCollateral()` function must have an the above check for validity. This is to ensure that the redemption request is not more than what the user has deposited. We do this by bounding the redemption amount between one and the max collateral to redeem.\n\n```js\n    ...\n    uint256 maxCollateral = dscEngine.getCollateralBalanceOfUser(msg.sender, address(collateral));\n\n        amountCollateral = bound(amountCollateral, 1, maxCollateral);\n        if (amountCollateral == 0) {\n            return;\n        }\n    ...\n```\n\nThe whole function should look like this:\n\n```js\n    ...\n    function redeemCollateral(uint256 collateralSeed, uint256 amountCollateral) public {\n        ERC20Mock collateral = _getCollateralFromSeed(collateralSeed);\n        uint256 maxCollateral = dscEngine.getCollateralBalanceOfUser(msg.sender, address(collateral));\n\n        amountCollateral = bound(amountCollateral, 1, maxCollateral);\n        if (amountCollateral == 0) {\n            return;\n        }\n        dscEngine.redeemCollateral(address(collateral), amountCollateral);\n    }\n    ...\n```\n\n## Exploring Edge Cases and Fixing Code Breaks\n\nRunning the above function may result in throwing an edge case as an error. In our example, it exposed a mistake in the bounding process. If the max collateral to redeem is zero, the system breaks. A solution to this is to keep zero as a valid input.\n\nThen, we need to check if the collateral amount after bounding is equal to zero. If yes, we can simply return, else we would call the redeem collateral function.\n\n```js\namountCollateral = bound(amountCollateral, 0, maxCollateral);\nif (amountCollateral == 0) {\n  return;\n}\n```\n\n## Enhancing Adequacy of Test Cases with Fail and Revert\n\nSo far, we have ensured that the transactions are operating as intended. However, to stream out all possible scenarios for handling Collaterals, failing criteria with blanket reverts should be avoided. Inclusion of test cases which do not fail on revert allows broader coverage of potential edge cases and glitches in transaction handling. Consideration of such trade-off prospects in the design of fail criteria lends to the overall system robustness.\n\nIn conclusion, handling collaterals effectively necessitates robust deposit and redemption functions, comprehensive edge testing and safeguards for potential system inadequacy through well-thought strategies. Happy coding!\n",
          "updates": []
        },
        {
          "lessonId": "37d41dd8-7170-4be4-aeb9-4e85822650f6",
          "number": 21,
          "slug": "defi-handler-minting-dsc",
          "title": "Create the mint handler",
          "description": "Lesson 21 guides through testing the 'mintDsc()' function in DSCEngine. It involves creating a handler function to ensure safe minting of DSC, considering the user's health factor and the system's overall stability.",
          "duration": 6,
          "videoUrl": "SzNVux01Xv5rnRxvGJ5xLSnPIi01UAB8LNZ9TmVHPQFm00",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/21-defi-handler-minting-dsc/+page.md",
          "markdownContent": "***\n\n## title: Handler - Minting DSC\n\n*Follow along the course with this video.*\n\n# Decoding DSC: A Journey into testing the \"Mint Function\"\n\nIn our previous parts, we discussed the concepts of fuzz testing our `depositCollateral()` and `redeemCollateral()` functions. Today, we'll be walking you through one of the key functions we need to test, the `mintDsc()` function.\n\n## A Walk Through the Mint Function Test\n\nOur `mintDsc()` function within `DSCEngine.sol` takes a `uint256 amount`. So our handler test will do the same, we also have to restrict our handler function to avoid reverts! Our `mintDsc()` function currently requires that `amount` not be equal to zero, and that the amount minted, does not break the user's `Health Factor`. Let's look at how this handler function is built:\n\n```js\n...\ncontract Handler is Test {\n    ...\n    function mintDsc(uint256 amountDsc) public {\n        vm.prank(dsc.owner());\n        dsc.mint(msg.sender, amountDsc);\n    }\n    ...\n```\n\nThe above handler function ensures we're minting a random amount of DSC. But, there's a catch, we can't just let \"amount\" be an undefined value. It can't be zero, and the user should ideally have a stable health factor.\n\n```js\namount = bound(amountDsc, 1, MAX_DEPOSIT_SIZE);\n```\n\nThis adjustment makes sure the \"amount\" sits in between 1 and the maximum deposit size. Now let's make sure we aren't breaking the user's `Health Factor` with this call. We can do this by calling the `getAccountInformation()` function and checking what's returned with what the user is trying to mint:\n\n```js\n...\ncontract Handler is Test {\n    ...\n    function mintDsc(uint256 amount) public {\n        (uint256 totalDscMinted, uint256 collateralValueInUsd) = dsce.getAccountInformation(msg.sender);\n\n        int256 maxDscToMint = (int256(collateralValueInUsd)/2) - int256(totalDscMinted);\n        if(maxDscToMint < 0){\n            return;\n        }\n        amount = bound(amount, 0, uint256(maxDscToMint));\n        if (amount == 0){\n            return;\n        }\n\n        vm.startPrank(msg.sender);\n        dsce.mintDsc(amount);\n        vm.stopPrank();\n    }\n}\n```\n\nIn the above function, we are constraining the amount minted to be greater than zero before minting any DSC. In addition to this, we're checking the user's `totalDscMinted` vs their `collateralValueInUsd` to ensure their account's `health factor` is not at risk and they don't risk liquidation.\n\n## Victory Looks Like This!\n\nLo and behold, let's run the functional mint DSC and observe the result.\n\n<img src=\"/foundry-defi/21-defi-handler-minting-dsc/defi-handler-minting-dsc1.PNG\" style=\"width: 100%; height: auto;\">\n\nYou should notice that we've performed multiple calls without any reverts, and that's exactly what success looks like! Your mint function is now up and running and ready to increase the supply of DSC.\n\nStay tuned for our next adventure! We hope you are now more comfortable with testing the mechanism used for injecting tokens into the DSC ecosystem.\n\n<img src=\"/foundry-defi/21-defi-handler-minting-dsc/defi-handler-minting-dsc2.PNG\" style=\"width: 100%; height: auto;\">\n",
          "updates": []
        },
        {
          "lessonId": "399e5ce5-9d20-42f0-ac73-202b21e53bd0",
          "number": 22,
          "slug": "defi-handler-fuzz-debugging",
          "title": "Debugging the fuzz tests handler",
          "description": "This lesson explores debugging strategies for smart contracts, particularly focusing on the use of 'ghost variables' to track function calls. It provides insights into handling errors and refining the testing process for better outcomes.",
          "duration": 9,
          "videoUrl": "OvQlzlXLUvoQM01YYGr01uHioUspMf5rxleFBReLxVjyM",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/22-defi-handler-fuzz-debugging/+page.md",
          "markdownContent": "***\n\n## title: Handler - Stateful Fuzz Test Debugging\n\n*Follow along the course with this video.*\n\n# Debugging Your Code Using Ghost Variables\n\nRecently, I was stuck in frustrating debugging mode, continually getting a 'total supply of zero' message, even though there was plenty of WETH and wrapped bitcoin about. The questions plaguing my attempts were: are we ever calling this function? Why are we getting a total supply of zero all the time? Eventually, I managed to crack the nut and here's how I did it, featuring a mysterious ghost variable, and other coding challenges to wrap your brain around.\n\n## What are Ghost Variables?\n\nIf you have ever wondered if your function is not being called, then it's time to introduce a `ghost variable`. Although it sounds incredibly spooky, they are a practical way to track if a function is even being called. Here's how to use one. We want to create a variable named `timesMintIsCalled` which we use in our `Handler.t.sol` to track whether or not our `_mintDsc()` function is being called.\n\n```js\n...\ncontract Handler is Test {\n    ...\n    uint256 public timesMintIsCalled;\n    ...\n    function mintDsc(uint256 amount) public {\n        (uint256 totalDscMinted, uint256 collateralValueInUsd) = dsce.getAccountInformation(msg.sender);\n\n        int256 maxDscToMint = (int256(collateralValueInUsd)/2) - int256(totalDscMinted);\n        if(maxDscToMint < 0){\n            return;\n        }\n        amount = bound(amount, 0, uint256(maxDscToMint));\n        if (amount == 0){\n            return;\n        }\n\n        vm.startPrank(msg.sender);\n        dsce.mintDsc(amount);\n        vm.stopPrank();\n        timesMintIsCalled++;\n    }\n}\n```\n\nThen, when you run your test once again, you might see that `mintDsc()` is never called. Baffling indeed, but it might be because of a hit return that is stopping the call prematurely.\n\nIt's crucial to debug this situation, and there are various methods you could employ to achieve that. Personally, I found the most successful way through moving the `timesMintIsCalled++;` further upwards in the code until I found the line it was breaking on. Then, by console logging all the values of the variables around, I unearthed some very interesting insights, which brings us onto the second part:\n\n## The Importance of the Message Sender\n\n<img src=\"/foundry-defi/22-defi-handler-fuzz-debugging/defi-handler-fuzz-debugging1.PNG\" style=\"width: 100%; height: auto;\">\n\nAnd, how does one keep a track of users who have deposited collateral? One way is, we can create an array of addresses in `Handler.t.sol` and push to this array `msg.sender` each time collateral is deposited. We'll then use this array in our `mintDsc()` function as a seed.\n\n```js\n...\ncontract Handler is Test {\n    ...\n    uint96 public constant MAX_DEPOSIT_SIZE = type(uint96).max;\n    uint256 public timesMintIsCalled;\n    address[] public usersWithCollateralDeposited;\n    ...\n    function depositCollateral(uint256 collateralSeed, uint256 amountCollateral) public {\n        ERC20Mock collateral = _getCollateralFromSeed(collateralSeed)\n        amountCollateral = bound(amountCollateral, 1, MAX_DEPOSIT_SIZE);\n        dsce.depositCollateral(address(collateral), amountCollateral);\n\n        vm.startPrank(msg.sender);\n        collateral.mint(msg.sender, amountCollateral);\n        collateral.approve(address(dsce), amountCollateral);\n        dsce.depositCollateral(address(collateral), amountCollateral);\n        vm.stopPrank();\n        usersWithCollateralDeposited.push(msg.sender);\n    }\n}\n```\n\nNote that this can cause duplicate users by pushing the same address multiple times, but hey, let's keep it simple for now.\n\nNow, back in Mint DSC, you can do something similar to what you did with collateral. Here's a small code snippet to help:\n\n```js\n...\ncontract Handler is Test {\n    ...\n    function mintDsc(uint256 amount, uint256 addressSeed) public {\n        address sender = usersWithDepositedCollateral[addressSeed % usersWithDepositedCollateral.length];\n        (uint256 totalDscMinted, uint256 collateralValueInUsd) = dsce.getAccountInformation(sender);\n\n        int256 maxDscToMint = (int256(collateralValueInUsd)/2) - int256(totalDscMinted);\n        if(maxDscToMint < 0){\n            return;\n        }\n        amount = bound(amount, 0, uint256(maxDscToMint));\n        if (amount == 0){\n            return;\n        }\n\n        vm.startPrank(sender);\n        dsce.mintDsc(amount);\n        vm.stopPrank();\n    }\n}\n```\n\nWhen you run the above test, you may get an error...\n\n## Avoid Errors With Some Conditions\n\nIt's also crucial to handle any errors. The error we're seeing is due to our modulo `%` resulting in zero when `usersWithCollateralDeposited.length` is zero. In this case, before the code runs, you can add a condition to return if users with collateral length equals zero. This helps you skip calls where collateral is not deposited.\n\n```js\n...\nfunction mintDsc(uint256 amount, uint256 addressSeed) public {\n    if(usersWithDepositedCollateral.length == 0) {\n        return;\n    }\n    ...\n}\n```\n\nAfter these corrections, I found that the total times Mint was called was now 31 and we were getting a total supply. This signaled that the `mintDsc()` function in our handler was now actually working, and we were successfully calling `mintDsc()`!\n\n## Always Check Your Getters\n\nFinally, be sure to always check your getters. It's wise to always include an invariant function `invariant_gettersShouldNotRevert()`. Getters can be inserted here and if any of them revert, that would mean the function broke an invariant.\n\n```js\nfunction invariant_gettersShouldNotRevert() public view {\n    ...\n    dsce.getLiquidationBonus();\n    dsce.getPrecision();\n    ...\n}\n```\n\nAnd to make sure you're including everything, you can use something like `forge inspect <Contract> methods`. This will reveal all methods that this contract has along with its function selectors. Look for all the view functions, and that can be used as a checklist of functions to call on a contract in your tests.\n\nThat's all for today! I hope you found this helpful for debugging your code and understanding better how to navigate the inevitable coding obstacles. Most importantly, remember to enjoy the journey - because that's where the real learning happens.\n",
          "updates": []
        },
        {
          "lessonId": "aab32068-01bb-469f-8341-d07424a92369",
          "number": 23,
          "slug": "defi-price-feed-handler",
          "title": "Create the price feed handler",
          "description": "The lesson focuses on integrating price feed updates in smart contract handlers. It covers the creation of functions for updating collateral prices and emphasizes the importance of handling price fluctuations to maintain protocol integrity.",
          "duration": 8,
          "videoUrl": "Cj01SgwcIx73nh600wsgXpNfajc85shOX45MsclQ01jrmY",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/23-defi-price-feed-handling/+page.md",
          "markdownContent": "***\n\n## title: Price Feed Handling\n\n*Follow along the course with this video.*\n\n# Enhancing Smart Contracts with Handlers and Invariant Testing In DSC Engine\n\nIn the smart contract world, it's crucial to simulate the entire lifecycle of our contracts. And to achieve this, handlers are a crucial part of the puzzle. However, their utility extends beyond just handling the DSCEngine. In fact, handlers can effectively simulate any contract we want to test on the blockchain.\n\nWhen creating handlers, we often interact with various other contracts. Some of these may include the price feed, the WETH (Wrapped Ether) token, and the wrapped Bitcoin token.\n\n## Introducing Price Feed Updates In Our Handler\n\nGiven their significant impact on the protocol, it's imperative to incorporate price feed updates in our handler. In order to achieve this feat, we start by importing the MockV3Aggregator.\n\n```js\nimport { MockV3Aggregator } from \"mocks/MockV3Aggregator.sol\";\n```\n\nThe MockV3Aggregator has functions that ease the process of updating a price, allowing our protocol to conveniently update prices. Once we have imported the MockV3Aggregator, we can extract the WETH price from our system using the view function `DSE get collateral token price feed()`.\n\nWe can now declare a new public `ethUsdPriceFeed` variable of type `MockV3Aggregator`. Your constructor should look something like this:\n\n```js\n...\nimport { MockV3Aggregator } from \"mocks/MockV3Aggregator.sol\";\n...\ncontract Handler is Test {\n    ...\n    MockV3Aggregator public ethUsdPriceFeed;\n    ...\n    constructor(DSCEngine _dscEngine, DecentralizedStableCoin _dsc){\n        ...\n        ethUsdPriceFeed = MockV3Aggregator(dsce.getCollateralTokenPriceFeed(address(weth)));\n        ...\n    }\n}\n```\n\nNow that we successfully have the ETH USD price feed, it's time to include a new function in our handler. This will involve updating the collateral price to a given price feed.\n\n```js\nfunction updateUpdateCollateral(uint96 newPrice) public {...}\n```\n\nNext, we need to convert the uint96 to an int256 because price feeds intake int256 data types, then we use this `newPriceInt` to update the price in our `ethUsdPriceFeed`:\n\n```js\nfunction updateUpdateCollateral(uint96 newPrice) public {\n    int256 newPriceInt = int256(uint256(newPrice));\n    ethUsdPriceFeed.updateAnswer(newPriceInt);\n}\n```\n\nAnd voilà! We now have a function that updates the collateral price in our handler.\n\n## Testing the Handler\n\nOnce our handler is complete, it's time to test it to see how it fares. Will it run smoothly or encounter some errors?\n\nWhen we do run it, you may find it detected a sequence where there was an issue. It indicates a violation of our invariant: the total supply doesn't add up to the sum of the WETH value and Bitcoin value.\n\nOn further inspection of the sequence, we discover a process: first, it deposited some collateral, followed by minting some DSC. Then, it updated the collateral price to a certain value, say 471. This changed the ETH collateral from its existing rate to 471, an immense difference which caused the system to revert. It had minted a humongous amount of DSC which broke the system.\n\nThis is a crucial reminder of the importance of volatility in our system. Our system can easily get busted if the price of an asset plummets or spikes swiftly. So, handling price fluctuations becomes pivotal in maintaining the integrity of the protocol.\n\n<img src=\"/foundry-defi/23-defi-price-feed-handling/defi-price-feed-handling1.PNG\" style=\"width: 100%; height: auto;\">\n\nTherefore, it becomes impetrative to revisit our assumptions and protocols when designing the system. For instance, we assumed a liquidation bonus of 10%, and that the collateral always needs to be 200% over collateralized. In case the price drops significantly, resulting in let's say just 50% collateralization, our system breaks and the invariant gets compromised.\n\nTherefore, we should either brainstorm ways to prevent such drastic reductions in collateralization, or acknowledge that this is a recognized loophole, where the protocol can turn worthless if the price fluctuates wildly. While neither seems to be a satisfactory solution, these are challenges we need to keep in mind, thereby proving the supreme importance of invariant tests.\n\n<img src=\"/foundry-defi/23-defi-price-feed-handling/defi-price-feed-handling2.PNG\" style=\"width: 100%; height: auto;\">\n\n## Wrapping Up\n\nThere's an exciting journey awaiting us ahead. We have to learn about proper Oracle use and write many more tests (a task we leave up to you!). We also need to prepare ourselves for a smart contract audit. All of this, while juggling with our existing contracts like the decentralized stablecoin.\n\nIt's an exhilarating journey that is all about continuous learning, discovery, and improvements! Stay tuned for more exciting updates in our upcoming blogs.\n",
          "updates": []
        },
        {
          "lessonId": "6e1c63ff-90a4-43c1-be61-f68f9cb4b376",
          "number": 24,
          "slug": "managing-oracles-connections",
          "title": "Manage your oracles connections",
          "description": "This lesson addresses the implementation and management of Chainlink Price Feeds in DSCEngine. It includes creating a library for ensuring price feed accuracy and discusses the implications of stale prices on the protocol's functionality.",
          "duration": 9,
          "videoUrl": "g8Y6bv1dQcBXv003wDKr0000dlKmsZh4XjYYMR00eIL3u5w",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/24-defi-oracle-lib/+page.md",
          "markdownContent": "***\n\n## title: OracleLib\n\n*Follow along the course with this video.*\n\n# Checking Chainlink Price Feeds with DSC Engine\n\nLet's discuss the process of using Chainlink Price Feeds in our `DSCEngine`. When working with Oracles, an assumption that we often make in our protocol is that these price feeds would work seamlessly. However, price feeds are systems just like any other and therefore can have potential glitches. To ensure that our protocol doesn't end up breaking due to a malfunction in the price feed system, we can put some safety checks in our code. This section will guide you through the process of putting some checks on price feeds using a library methodology we developed.\n\n## Setting Up The Library\n\n<img src=\"/foundry-defi/24-defi-oracle-lib/defi-oracle-lib1.PNG\" style=\"width: 100%; height: auto;\">\n\nLet start by creating a libraries folder. In this folder, we'll make a new contract titled `OracleLib.sol`. The purpose of this contract is to ensure that the prices in the price feed aren't stale. Chainlink price feeds have a unique feature known as the heartbeat, which updates the prices every 3600 seconds.\n\nAn essential check we need to enforce in our contract is that these prices should update every 3600 seconds. If not, our contract should pause its functionality. It's worth noting that by freezing our protocol's functionality, if Chainlink were to explode, that money will be frozen on the protocol. For now we'll recognize this as a known issue and move on.\n\n## Creating The Check Function\n\nIn a more advanced setting, when shifting towards a production product, even the smallest details start to matter more and more. Effective function creation becomes even more critical.\n\nFirst, we create a `staleCheckLatestRoundData()` function. The input parameter will take an `AggregatorV3Interface priceFeed`. This will be a public view function and would return different values like `uint80, int256, uint256, uint256`, and `uint80`.\n\n```js\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n...\nlibrary OracleLib {\n    function staleCheckLatestRoundData(AggregatorV3Interface priceFeed) public view returns (uint80, int256, uint256, uint256, uint80){...}\n}\n```\n\nIn this function, we will call `priceFeed.latestRoundData()`. Since each price feed has its own heartbeat, we should ask them what their heartbeat is. For simplicity, we hardcode ours for `three hours`.\n\nWe calculate the seconds since the last price update, and if it's greater than our timeout, we revert with a new error: `Oraclelib__StalePrice()`.\n\n```js\nlibrary OracleLib {\n    error OracleLib__StalePrice();\n\n    uint256 private constant TIMEOUT = 3 hours;\n\n    function staleCheckLatestRoundData(AggregatorV3Interface priceFeed) public view returns (uint80, int256, uint256, uint256, uint80){\n        (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) = priceFeed.latestRoundData();\n\n        uint256 secondsSince = block.timestamp - updatedAt;\n        if(secondsSince > TIMEOUT) revert OracleLib__StalePrice();\n        return (roundId, answer, startedAt, updatedAt, answeredInRound)\n    }\n}\n```\n\nNow, in our `DSCEngine`, every time we call `latestRoundData`, we swap it out for `staleCheckLatestRoundData`, thanks to our library.\n\nMake sure to remember to import `Oraclelib` from libraries and to specify the that we're using it for `AggregatorV3Interface`s.\n\n```js\n...\nimport {OracleLib} from \"./libraries/OracleLib.sol\";\n...\ncontract DSCEngine is ReentrancyGuard{\n    ...\n    using OracleLib for AggregatorV3Interface;\n    ...\n    function getUsdValue(address token, uint256 amount) public view returns (uint256){\n        AggregatorV3Interface priceFeed = AggregatorV3Interace(s_priceeFeeds[token]);\n        (, int256 price,,,) = priceFeed.staleCheckLatestRoundData();\n        ...\n    }\n    ...\n}\n```\n\nNote: There are more functions than shown here that will need updating!\n\nOnce all of these changes have been done, run the `forge test` which will run the entire test suite, including the new invariant test suite. Following a successful run, we can conclude that our code is functioning as expected!\n\n## Future Considerations\n\nAlthough we've done a lot of refactoring, there are still several ways the code can be improved. For example, writing additional tests for the contacts. Running `forge coverage` can help identify areas needing improvement.\n\n<img src=\"/foundry-defi/24-defi-oracle-lib/defi-oracle-lib3.PNG\" style=\"width: 100%; height: auto;\">\n\nLet's mark this as our next step — testing these contracts more thoroughly to ensure that we've covered all the possible edge cases and have robust error-checking before pushing it to production. Until then — happy coding!\n",
          "updates": []
        },
        {
          "lessonId": "f47144e5-fe2d-4dc1-94d8-ac79b2a044c1",
          "number": 25,
          "slug": "preparing-your-protocol-for-an-audit",
          "title": "Preparing your protocol for an audit",
          "description": "This lesson provides a comprehensive guide on preparing smart contracts for audits. It emphasizes the importance of audits, offers a readiness checklist, and introduces the concept",
          "duration": 2,
          "videoUrl": "dROpFGHP01O9aMaAzrZo5uWSelx2M5RrcxN1fKjOUEWI",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/25-defi-audit-prep/+page.md",
          "markdownContent": "***\n\n## title: Audit Prep\n\n*Follow along the course with this video.*\n\n# Preparing for Your Smart Contract Audit: A Comprehensive Guide\n\nIn the vast and rapidly evolving world of smart contracts, security is paramount. While the course encompasses various aspects of smart contract development, one topic that we've briefly touched upon, but warrants a closer, more focused discussion is that of **smart contract audits**. While we've yet to delve deep into the details of security, this section aims to provide some guidance on preparing for smart contract audits.\n\n<img src=\"/foundry-defi/25-defi-audit-prep/defi-audit-prep1.png\" style=\"width: 100%; height: auto;\">\n\n## What Are Smart Contract Audits?\n\nA smart contract audit involves thorough scrutinizing of the smart contract's codebase to identify potential security vulnerabilities, errors, or violation of best practices. Think of it as a rigorous debugging process that goes beyond just identifying errors — it ensures the robustness of your smart contract by checking that it functions as expected without any security threats.\n\n<img src=\"/foundry-defi/25-defi-audit-prep/defi-audit-prep2.PNG\" style=\"width: 100%; height: auto;\">\n\n## Audit Readiness Checklist: Your Go-to Guide\n\nNow, you might wonder: Where should I begin? Good question, and here’s a head start: refer to the audit readiness checklist on the **[Nascent XYZ GitHub repo](https://github.com/nascentxyz/simple-security-toolkit/blob/main/audit-readiness-checklist.md)**.\n\nThis checklist offers an array of pointers that you need to keep in mind while conducting your tests in preparation for the smart contract audit. It’s like a playbook, guiding you to ensure your smart contract codebase is on par with the best global standards.\n\n## An Introduction to Security\n\nIn case you're looking forward to gaining a fundamental grasp of security from a smart contract development perspective, stay tuned for the upcoming section of our course titled \"**Introduction to Smart Contract Security**\".\n\nWe'll cover the nitty-gritty of security measures. This extensive section will delve into the lower level security facets that are vital for all smart contract developers.\n\nUnderstanding these security basics is crucial to ensure your smart contracts are safe, robust, and reliable within the blockchain network.\n\n<img src=\"/foundry-defi/25-defi-audit-prep/defi-audit-prep3.png\" style=\"width: 100%; height: auto;\">\n\n## Wrapping Up\n\nA smart contract audit may seem daunting at first as it requires meticulous attention to detail, a thorough understanding of your codebase, and in-depth knowledge of the prevailing threats and vulnerabilities. However, it's an essential step in ensuring the safety and reliability of your smart contract protocols.\n\nThe aforementioned audit readiness checklist will be your trusted ally through this process and don't forget to keep an eye out for our upcoming course section on security, which we're confident will prove invaluable.\n\nIn the world of smart contract development, security isn't the most glamorous part of the job. But it's potentially the most important. By paying due attention to audits and security measures, you're not just bulletproofing your code; you're bolstering the integrity of the projects built on it. It's not just about finding and fixing flaws; it's about fostering trust.\n\nStay tuned. Stay secure.\n",
          "updates": []
        },
        {
          "lessonId": "8c36523c-6dbf-4c8c-adff-e14ed269494d",
          "number": 26,
          "slug": "defi-recap",
          "title": "Section recap",
          "description": "This lesson serves as a comprehensive recap of the advanced project covered in the Web 3.0 course. It celebrates the milestones achieved in exploring varied concepts such as Decentralized Finance (DeFi), advanced fuzzing techniques, digital security, and working with Oracle",
          "duration": 4,
          "videoUrl": "zhV1jNdbP7fQ5L40002XQ1UkM00WSZYED00vt4QJPL00LoBo",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/26-defi-recap/+page.md",
          "markdownContent": "***\n\n## title: DeFi Recap\n\n*Follow along the course with this video.*\n\n# Celebrating a Milestone In Web 3.0 Project Development\n\nIn the world of programming and development, nothing quite matches the thrill, satisfaction, and accomplishment felt when navigating through a complex project and finally bringing it all together. This sense of achievement isn't just well-deserved, it is 1000% a badge of honor you should proudly display on your GitHub repo. If you've successfully navigated this far through the hardest, most complicated, and most advanced project in our Web 3.0 course, I tip my hat to you.\n\nThis section will recap the intricacies and nuances of our recent project, celebrate the milestones achieved, and look forward to what's next.\n\n## Diving Into the Deep End of Web 3.0\n\n<img src=\"/foundry-defi/26-defi-recap/defi-recap1.png\" style=\"width: 100%; height: auto;\">\n\nThis project drew on varied and cutting-edge concepts, many of which are at the forefront of Web 3.0's evolutionary curve. We delved into Decentralised Finance (DeFi), got hands-on with state-of-the-art fuzzing techniques and even dipped our toes into the landscape of digital security. We wrote an enormously advanced test suite, worked with Oracles, and built deploy scripts from scratch.\n\nIn all these, the emphasis was on leveraging safer methods and learning through interaction with diverse libraries. The course project also explored `failOnRevert`s and runs and depth of invariance tests.\n\nYet, the journey has not been devoid of learning omissions. We've not covered the crafting of a proper README. This is a 100% essential part of any comprehensive project and I strongly recommend you write one. To understand what it entails, you can refer to the [foundry-defi-stablecoin-f23 README](https://github.com/Cyfrin/foundry-defi-stablecoin-f23/blob/main/README.md) for more clarity on its structure and content.\n\nAs I've said before, this project is lined up for an audit. The journey, as well as the audit reports, will be diligently documented in a new branch on this repository. Follow it and you can take cues from it for your own project's security journey. To successfully launch production code, you need to intimately understand security paths and the mechanics at play.\n\n## Time to Recharge\n\nThe labour of software development can be taxing, which is why after your glorious achievement, you deserve a break. After your well-earned rest, I urge you to push this codebase up to GitHub and start tidying it - removing any redundant code and adding comments where necessary.\n\nThere's also an identified glaring issue with this project, which you might consider as your next challenge - perfect for after a break. Our code becomes insolvent if the price of the assets collapse too quickly. Perhaps you can come up with an ingenious way to fix it, and then maybe even launch your own stablecoin. Why not, right?\n\n## Three More Steps To Glory\n\n<img src=\"/foundry-defi/26-defi-recap/defi-recap2.PNG\" style=\"width: 100%; height: auto;\">\n\nEnergized after your break? Great! We only have three more lessons left to conclude this course. Here's a peek at what's coming next:\n\n* Lesson 13: Foundry Upgrades\n* Lesson 14: Foundry Governance | Plutocracy (And why it's bad)\n* Lesson 15: Introduction to Smart Contract Security (All security interested parties...get here)\n\nThese topics are significantly more manageable than what you've already faced in the previous lessons. So ease back into your seat, and get ready for the next exciting stage of your Web 3.0 journey.\n\nPat yourself on the back, and relish in the success of coming this far, it’s a milestone worth celebrating. Just three more steps, and you will have triumphantly conquered this comprehensive course. Here's to those final steps, and to seeing you at the finish line very soon!\n",
          "updates": []
        },
        {
          "lessonId": "579492c9-95ff-411e-8149-1ee0c1967c98",
          "number": 27,
          "slug": "introduction-to-lens-protocol",
          "title": "Bonus: introduction to Lens Protocol",
          "description": " This bonus lesson introduces the Lens Protocol, a decentralized social platform by the Aave team, presented by Nader Dabit, the head of DevRel for Lens Protocol. Lens Protocol empowers developers to build social media applications in the decentralized space, leveraging Web3 features such as native payments, ownership, and composability.",
          "duration": 3,
          "videoUrl": "Di002edtFQzrQtdHOafJhwWQGjzLYKyB7Zm01iifJ2NVg",
          "rawMarkdownUrl": "/routes/advanced-foundry/3-defi/27-defi-lens-protocol/+page.md",
          "markdownContent": "***\n\n## title: Lens Protocol\n\n*Follow along the course with this video.*\n\n# Understanding Lens Protocol - The Decentralized Social Layer of Web3\n\nHello everyone, in today's section we are delving into the trenches of protocols that are not just pushing the envelope, but actively redefining the possibilities of the Web3 community. I absolutely \\<3 the Aave Protocol and the Aave team's consistent efforts in delivering protocols, products, and services that are enhancing the Web3 space.\n\nOne such noteworthy protocol is the Lens Protocol. Noted as a decentralized social platform, it enables building social media applications in the decentralized space. To provide a detailed overview of the Lens Protocol, we have Nader Dabit, the head of DevRel for Lens Protocol at the Aave team.\n\n<img src=\"/foundry-defi/27-defi-lens-protocol/defi-lens-protocol2.PNG\" style=\"width: 100%; height: auto;\">\n\n## Embracing Web3 with Lens Protocol\n\nHello folks! I'm Nader Dabit, walking you through a quick introduction of Lens Protocol and its relevance to you as a smart contract or solidity engineer.\n\nLens, the social layer of Web3, equips developers with the power to construct social applications or include social features in their current applications. With a whopping 4.9 billion users globally using social applications, it is a feature widely recognized and valued.\n\nThese applications open the gateway to numerous value propositions, enabling developers to tap and exploit the opportunities they present. When combined with Web3 features like native payments, ownership, and composability, it elevates the potential to new heights offering much more robustness when compared to traditional social applications or infrastructure.\n\n## Expanding the Horizons with Custom Modules\n\nLens allows developers to expand the core smart contracts by developing their custom modules. Imagine if Twitter, Instagram, or other social applications allowed developers to submit pull requests into their backends and APIs. This ability instigates a lot of captivating and potent functionality, inspiring developers to integrate innovative ideas into their applications, and branch out into other aspects of Web3 like DeFi.\n\n<img src=\"/foundry-defi/27-defi-lens-protocol/defi-lens-protocol3.png\" style=\"width: 100%; height: auto;\">\n\nMoreover, Lens Smart Contracts can be invoked from other smart contracts. This flexibility facilitates developers aiming to build something composable with the Web3 social graph, making Lens an excellent platform to integrate.\n\n## Get On Board: Start Building on Lens\n\nFor those eager to get their hands dirty and start building on Lens, head over to the [Lens Documentation](https://docs.lens.xyz/docs). Don't forget to explore ways to deploy the protocol independently, get a closer look at the smart contract code, and fiddle around with it. Learn about creating and building your custom modules.\n\nStay tuned for more exciting insights and updates. Until next time, happy coding!\n\n<img src=\"/foundry-defi/27-defi-lens-protocol/defi-lens-protocol1.png\" style=\"width: 100%; height: auto;\">\n\nIn closing,\n\n<img src=\"/foundry-defi/27-defi-lens-protocol/defi-lens-protocol4.PNG\" style=\"width: 100%; height: auto;\">\n",
          "updates": []
        }
      ]
    },
    {
      "sectionId": "193661f5-5f98-45e4-a3c3-ffcaae84f194",
      "number": 4,
      "slug": "upgradeable-smart-contracts",
      "title": "Upgradeable Smart Contracts",
      "lessons": [
        {
          "lessonId": "fd66fe6b-cd83-46cd-b817-3d9a23889789",
          "number": 1,
          "slug": "introduction-to-upragadeable-smart-contracts",
          "title": "Introduction",
          "description": "An introduction to upgradable smart contracts, discussing their advantages, risks, and different upgrade methodologies.",
          "duration": 16,
          "videoUrl": "OKbeDAYLsKw02HgcXpHz6ZczBkD3CzVgK202KlofprWEU",
          "rawMarkdownUrl": "/routes/advanced-foundry/4-upgradeable/1-upgradeable/+page.md",
          "markdownContent": "***\n\n## title: Upgradeable Smart Contracts & Proxies\n\n***Follow along with this video.***\n\n***\n\nWelcome to another informative blog post on the world of smart contracts. In this lesson, we will take a closer look at upgradable smart contracts, exploring the good, the bad, and the vital information you need to use them.\n\nTo put this into perspective, upgradable smart contracts are a complex subject with potential drawbacks, which isn't the best route to default on. They sound great in theory, promising flexibility and adaptability. However, we've repeatedly seen that when there's too much centralized control over contracts, problems arise.\n\n<img src=\"/upgrades/1-intro/upgrade1.png\" style=\"width: 100%; height: auto;\">\n\nLet's dig deeper to understand the nuance of this subject and why it's important for your career as a smart contract developer.\n\n<img src=\"/upgrades/1-intro/upgrade2.png\" style=\"width: 100%; height: auto;\">\n\n## What Are the Downside of Upgradable Smart Contracts?\n\nIf you asked for real-life examples of where the potential downsides of upgradable smart contracts have manifested, it's safe to say we've got plenty. From hacks to lost funds, the risks are real.\n\nThis is where the immutable nature of smart contracts comes in - a feature that developers cherish since it implies that once a contract is deployed, nobody can modify or tamper with it. Interesting enough, the unchangeable aspect can become a pain if we want to upgrade a contract to perform new functions or squash a bug.\n\nThe exciting thing is, though the code deployed to an address is immutable, there's still room for change. In fact, smart contracts update all the time. Think token transfers or any functionality really—they frequently update their balances or variables. In other words, while the logic remains unchangeable, the contracts aren't as static as they seem.\n\n## Upgrading Your Smart Contracts: A Guided Approach\n\nSo, if upgrading smart contracts tampers with their essential immutability, how can we approach the situation more wisely? Let's look at three different patterns or philosophies we can use:\n\n1. Not really upgrading\n2. Social migration\n3. Proxy (with subcategories like metamorphic contracts, transparent upgradable proxies, and universal upgradable proxies)\n\n### Not Really Upgrading\n\nThe \"Not Really Upgrading\" method is the simplest form of \"upgrading\" a smart contract. The idea here is parameterizing everything—the logic we've deployed is there and that's what users interact with. This involves having setter functions that can change certain parameters.\n\nFor instance, if you have a set reward that distributes a token at a 1% rate every year, you can have a setter function to adjust that distribution rate. While it's easy to implement, it has limitations: unless you anticipated all possible future functionality when writing the contract, you won't be able to add it in the future.\n\nAnother question that arises is—who gets access to these functions? If a single person holds the key, it becomes a centralized smart contract, going against decentralization's core principle. To address this, you can add a governance contract to your protocol, allowing proportional control.\n\n### Social Migration\n\nIn line with maintaining the immutability of smart contracts, another method is social migration. It involves deploying a new contract and socially agreeing to consider the new contract as the 'real' one.\n\nIt has some significant advantages, the main being the adherence to the essential immutability principle of smart contracts. With no built-in upgradeability, the contract will function the same way, whether invoked now or in 50,000 years. But one major disadvantage is that you'd now have a new contract address for an already existing token. This would require every exchange listing your token to update to this new contract address.\n\nMoving the state of the first contract to the second one is also a challenging task. You need to devise a migration method to transport the storage from one contract to the other. You can learn more about the social migration method from [this blog post](https://blog.trailofbits.com/2018/09/05/contract-upgrade-anti-patterns/) written by Trail of Bits.\n\n### Proxies\n\nFinally, let's talk about proxies, the holy grail of smart contract upgrades. Proxies allow for state continuity and logical updates while maintaining the same contract address. Users may interact with contracts through proxies without ever realizing anything changed behind the scenes.\n\nThere are a ton of proxy methodologies, but three are worth discussing here: Transparent Proxies, Universal Upgradable Proxies (UPS), and the Diamond Pattern. Each has its benefits and drawbacks, but the focus is on maintaining contract functionality and decentralization.\n\n## Key Takeaways\n\nDealing with upgradable smart contracts can be complex, but understanding the pros and cons helps in making the right decision while developing smart contracts. Do remember that upgradable smart contracts might have their advantages, but they also come with their possible drawbacks, such as centralized control and increased potential for breaches. Always weigh the necessity against the risks before deciding on using upgradable smart contracts.\n\nThat was it for todays lesson. I hope you enjoyed it and learned something new. We well see you again on the next chapter so keep learning and keep building!\n",
          "updates": []
        },
        {
          "lessonId": "13e81a5e-dda3-4896-9b0e-aa35d292c0e8",
          "number": 2,
          "slug": "solidity-delegate-call",
          "title": "Using Delegatecall",
          "description": "Detailed explanation of delegate call in Solidity, its differences from regular call functions, and its implications in smart contracts.",
          "duration": 9,
          "videoUrl": "HSgB00UeqF00dz900ivWqMTMNtfcgUGrbewxBrFFaHhhAc",
          "rawMarkdownUrl": "/routes/advanced-foundry/4-upgradeable/2-delegate-call/+page.md",
          "markdownContent": "***\n\n## title: Delegate Call\n\n***Follow along with this video.***\n\n***\n\nIn this lesson, we're going to go deep on Upgradeable Smart Contracts specially on the `Delegate Call`, how to construct proxies and upgradable smart contracts. This forms a fundamental part of the blockchain space, especially when building efficient and investor-friendly decentralized applications.\n\n## Delegate Call vs Call Function\n\nSimilar to a call function, 'delegate call' is a fundamental feature of Ethereum. However, they work a bit differently. Think of delegate call as a call option that allows one contract to borrow a function from another contract.\n\nTo illustrate this, let's look at an example using Solidity - an object-oriented programming language for writing smart contracts.\n\n```javascript\ncontract B {\n    // NOTE: storage layout must be the same as contract A\n    uint256 public num;\n    address public sender;\n    uint256 public value;\n\n    function setVars(uint256 _num) public payable {\n        num = _num;\n        sender = msg.sender;\n        value = msg.value;\n    }\n}\n\n```\n\nOur Contract B has three storage variables (`num`, `sender` and `value`), and one function `setVars` that updates our `num` value. In Ethereum, contract storage variables are stored in a specific storage data structure that's indexed starting from zero. This means that `num` is at index zero, `sender` at index one and `value` at index two.\n\nNow, let's deploy another contract - Contract A. This one also has a `setVars` function. However, it makes a delegate call to our Contract B.\n\n```javascript\ncontract A {\n    uint256 public num;\n    address public sender;\n    uint256 public value;\n\n    function setVars(address _contract, uint256 _num) public payable {\n        // A's storage is set, B is not modified.\n        // (bool success, bytes memory data) = _contract.delegatecall(\n        (bool success, ) = _contract.delegatecall(\n            abi.encodeWithSignature(\"setVars(uint256)\", _num)\n        );\n        if (!success) {\n            revert(\"delegatecall failed\");\n        }\n    }\n}\n```\n\nNormally, if `contract A` called `setVars` on `contract B`, it would only update `contract B's` `num` storage. However, by using delegate call, it says \"call `setVars` function and then pass `_num` as an input parameter but call it in *our* contract (A). In essence, it 'borrows' the `setVars` function and uses it in its own context.\n\n## Understanding Storage in Delegate Call\n\nIt's interesting to see how delegate call works with storage on a deeper level. The borrowed function (`setVars` of Contract B) doesn't actually look at the names of the storage variables of the calling contract (Contract A) but instead, at their storage slots.\n\nIf we used the `setVars` function from Contract B using delegate call, first storage slot (which is `firstValue` in Contract A) will be updated instead of `num` and so on.\n\nOne other important aspect to remember is, the data type of the storage slots in Contract A does not have to match that of Contract B. Even if they are different, delegate call works by just updating the storage slot of the contract making the call.\n\n## Wrap Up\n\nIn conclusion, delegate call is a very handy function in Solidity that allows one contract to 'borrow' a function from another. However, care should be taken when using it as the storage slots in the calling contract get updated directly, without looking at the variable names or data types. It might lead to unpredictable behavior if overlook this aspect.\n\nFeel free to experiment with different contracts and function calls to witness delegate call in action. But remember, \"With great power, comes great responsibility!\"\n",
          "updates": []
        },
        {
          "lessonId": "8efd33a4-8933-4287-9fa8-278c4d22007f",
          "number": 3,
          "slug": "what-is-eip-1967",
          "title": "Overview of the EIP-1967",
          "description": "Overview of EIP-1967 and its role in proxy contracts, including a practical guide on building a minimalistic proxy.",
          "duration": 12,
          "videoUrl": "ZryEwl02r4nLF02NanpG1VBmXo32oYsDB00tkm3pkezizM",
          "rawMarkdownUrl": "/routes/advanced-foundry/4-upgradeable/3-eip-1967/+page.md",
          "markdownContent": "***\n\n## title: EIP-1967 Proxy\n\n***Follow along with this video.***\n\n***\n\nHave you ever wondered how a contract can be used as a singular address, but the underlying code can change? Buckle up, because we'll be exploring this topic by building a simple yet fascinating contract known as a “Proxy Contract”.\n\n## Before we begin\n\nThis walkthrough requires some advanced understanding of Ethereum and Solidity. However, if you're passionate about learning the ropes, feel free to tag along. We'll be basing our coding process on the Hardhat upgrades library.\n\nYou can find this library in the course repo, `SmallProxy.sol` template. Here's the Code: [Code Link](https://github.com/Cyfrin/foundry-upgrades-f23/blob/main/src/sublesson/SmallProxy.sol)\n\n## Welcome to the world of Proxy Contracts\n\nWe start with a minimalistic starting proxy template from OpenZeppelin library called `SmallProxy.sol`. This is a low-level contract built mostly in assembly, Yul.\n\n**Yul, you ask?**\n\nYul is an intermediate language that can be compiled to bytecode for different backends. It allows developers to write difficult yet super effective low-level code close to the opcodes.\n\n<img src=\"/upgrades/3-proxy/proxy1.png\" style=\"width: 100%; height: auto;\">\n\nIn our proxy contract, we have this `delegate()` function that uses inline assembly (Yul). Though it does many things, its main job is to perform delegate call functionality.\n\nThe proxy utilizes two generic fallback functions to process unrecognized function calls:\n\n1. **Fallback:** Anytime the proxy contract receives data for an unrecognized function, it triggers a callback that involves our `delegate()` function.\n2. **Receive:** Whenever it receives a function it doesn't recognize, it'll call `Fallback` and `Fallback` calls our `delegate()` function.\n\nThrough these fallback functions, the contract processes data for an unrecognized function and delegates it to the implementation contract through delegate call.\n\n## Building a Minimalistic Proxy\n\nWith our understanding in place, let's take it a step further by setting and reading our implementation addresses.\n\nThe proxy we'll be creating will feature a function called `setImplementation()` which \"upgrades\" the smart contract by changing the delegated calls' recipient.\n\nThe `_implementation()` function will be there for us to see where the implementation contract is. There's one thing you need to know though:\n\n<img src=\"/upgrades/3-proxy/proxy2.png\" style=\"width: 100%; height: auto;\">\n\nThis is where EIP 1976 comes into play. It’s an Ethereum Improvement Proposal for using certain storage slots specifically for proxies. We'll use EIP 1976 to store our implementation's address by assigning it into a constant storage slot.\n\nThe logic of our proxy will operate like this: If any contract calls our proxy contract excluding the `setImplementation` function, it'll be passed over to the stored implementation address from our constant storage slot.\n\nLet's take it step by step though.\n\n1. **Step 1 - Building the Implementation Contract**: We’ll start by creating a dummy contract `implementation A`. This contract will have a uint256 public value and a function to set the value.\n\n```js\ncontract ImplementationA {\n    uint256 public value;\n\n    function setValue(uint256 newValue) public {\n        value = newValue;\n    }\n}\n```\n\n1. **Step 2 - Creating a Helper Function**: So that we can easily figure out how to get the data, we'll create a helper function named `getDataToTransact`.\n\n```js\nfunction getDataToTransact(\n        uint256 numberToUpdate\n    ) public pure returns (bytes memory) {\n        return abi.encodeWithSignature(\"setValue(uint256)\", numberToUpdate);\n    }\n```\n\n1. **Step 3 - Reading the Proxy**: Next up, we create a function in Solidity named `readStorage` to read our storage in small proxy.\n\n```js\nfunction readStorage()\n        public\n        view\n        returns (uint256 valueAtStorageSlotZero)\n    {\n        assembly {\n            valueAtStorageSlotZero := sload(0)\n        }\n    }\n}\n```\n\n1. **Step 4 - Deployment and Upgrading**: We'll now go ahead and deploy our small proxy and implementation A. Let’s grab implementation A's address and feed it into the `set implementation` function.\n2. **Step 5 - The Core Logic**: When we call the small proxy with data, it's going to delegate our call to implementation A and save the storage in the small proxy address. To process this, the proxy will use the `set value` function selector and update our small proxy's storage.\n3. **Step 6 - *Isometrics***: To ensure that our logic works correctly, we'll read the output from the function `read storage`. To make this test even more exciting, let's create a new implementation contract `Implementation B` and update our code.\n\nEvery time someone calls `set value`, the function will return `new value + 2` instead of just the new value. We recompile and redeploy this contract then run `set implementation` with `Implementation B's` address.\n\nThe moment of truth? If we call our small proxy using the same data, then `read storage` should now return `779`.\n\n## Wrapping Up\n\nThis is just a simple representation of how we can upgrade contracts in Ethereum. With proxy contracts, clients can always interact with a single address (the proxy address) and have their function calls processed correctly even when the underlying logic changes.\n\nJust a heads up though, it is crucial to ensure that you understand who has access to upgrade the contract. If a single person can upgrade it, then we risk making our contract a single point of failure and the contract isn't even decentralized.\n\nThe proxy contract I used is simple and comes with its own share of limitations. Notably, it can't process function receiver clashes correctly. For example, if we have a function `set implementation` in the proxy and implementation, the proxy's function is the one that is always called.\n\nTo deal with these and other similar issues, there are two popular proxy patterns to consider; `Transparent` and `Universal upgradable proxy`.\n\nNotwithstanding, don't hesitate to make a new discussion about proxies in the discussions thread if you still find them perplexing.\n\nThis section is very advanced and requires a deep understanding of the previous sublessons. I strongly recommend that you growth hack your understanding by playing around with Solidity and remix.\n\nBelieve it or not, this is one of those areas where seeing is believing. So, don't just read here! Jump into remix and play around with this functionality. Break and fiddle till you get the hang of it.\n\n**Happy learning!**\n",
          "updates": []
        },
        {
          "lessonId": "d18db6a9-9601-4a3e-9b08-74f7ac8f3ac5",
          "number": 4,
          "slug": "introduction-to-uups-proxies",
          "title": "OpeZeppelin UUPS proxies",
          "description": "Introduction to UUPS (Universal Upgradeable Proxy Standard) proxies in OpenZeppelin, showcasing their setup and usage.",
          "duration": 22,
          "videoUrl": "QmeMmXDZhYJekvFcyJDUbb2oack7ywZXSAMRVrdeSDk",
          "rawMarkdownUrl": "/routes/advanced-foundry/4-upgradeable/4-uups/+page.md",
          "markdownContent": "***\n\n## title: UUPS Setup\n\n***Follow along with this video.***\n\n***\n\n## Building an Upgradable Solidity Contract with Delegate Call\n\nIn today's sublesson, we are going to delve into the depths of Solidity; we're going to write an upgradable contract utilizing the power of the delegate call function. We will not only cover the theory but also offer a full example and walk you through it step by step.\n\n## Let's Get Started\n\nFirst, we are going to create a new directory for our project called `foundry-upgrades-f23`.\n\n```shell\nmkdir foundry-upgrades-f23\ncd foundry-upgrades-f23\n```\n\nNow, remember we recently mentioned the Transparent Proxy pattern and the UUPS Proxy pattern. Today, we will primarily focus on the latter. UUPS Proxy is a more robust pattern which allows upgrades to be handled by the contract implementation and can be removed eventually. This is immensely crucial if we want to make our contract upgrade as seldom as possible staying as close as possible to complete immutability.\n\nNow, let's initialize our project with:\n\n```shell\nforge init\n```\n\nAfter setup, we will delete the unnecessary files and start to build our very own minimal contracts: `BoxV1.sol` and `BoxV2.sol`.\n\n### BoxV1\n\n```javascript\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\ncontract BoxV1 is Initializable, OwnableUpgradeable, UUPSUpgradeable {\n    uint256 internal value;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize() public initializer {\n        __Ownable_init();\n        __UUPSUpgradeable_init();\n    }\n\n    function getValue() public view returns (uint256) {\n        return value;\n    }\n\n    function version() public pure returns (uint256) {\n        return 1;\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n}\n```\n\n### BoxV2\n\n```js\n/// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\ncontract BoxV2 is Initializable, OwnableUpgradeable, UUPSUpgradeable {\n    uint256 internal value;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize() public initializer {\n        __Ownable_init();\n        __UUPSUpgradeable_init();\n    }\n\n    function setValue(uint256 newValue) public {\n        value = newValue;\n    }\n\n    function getValue() public view returns (uint256) {\n        return value;\n    }\n\n    function version() public pure returns (uint256) {\n        return 2;\n    }\n\n    function _authorizeUpgrade(\n        address newImplementation\n    ) internal override onlyOwner {}\n}\n```\n\nIn `V2`, we introduce another function — `setNumber()`. We have prepared the `BoxV1` contract initially, and will upgrade it to `V2` after deployment.\n\n## Implementing UUPS Upgradable Contract\n\nNext, we need to define our `UUPSUpgradable` contract.\n\nRemember we don't want to use a constructor in our implementation because the Proxy doesn't call the constructor when a contract is initialized. Instead, we need to utilize an **initializer function** to replace the constructor logic.\n\nA function marked with the `initializer` modifier can be initialized **only once**. It's a way to define a constructor for contracts that are meant to be used via Proxy, without the typical Solidity constructor's downside.\n\n```javascript\nfunction _authorizeUpgrade(\n        address newImplementation\n    ) internal override onlyOwner {}\n```\n\nThe authorize upgrade function will give us control over who can upgrade the contract. You can replace it based on your authorization scheme. For simplicity, we'll leave it blank here, implying that anyone can upgrade the contract.\n\nAnother crucial detail to consider is the Proxy storage. **Proxies only point to storage slots, not variable names**. This behavior could lead to collisions when new storage slots are added. For example, say you upgrade from `V1` to `V2`. If `V1` has the variable `number` at storage slot `0`, and you add another variable `otherNumber` to `V2` also at storage `slot`, the old `number` variable will be overwritten by `otherNumber`.\n\nAnd that's it. We created an initial contract `Box V1` and a simple upgrade version of it `Box V2`. Of course, these are basic contracts, and real-world contracts will need more thorough authorization and verification processes when it comes to upgradeability.\n\n**Remember**, when you upgrade contracts, you change the contract address and all calls are redirected to the new contract. Your users need to trust you, or the decentralized governance scheme, with the upgrade. After all, a rogue implementation can ruin a well-designed contract and its users.\n\nSo, as a developer, you need to execute upgrades judiciously and sparingly, always focusing on creating well-tested and audited contracts.\n\nStay tuned for more posts about Solidity development and best practices!\n",
          "updates": []
        },
        {
          "lessonId": "816cc425-4b4c-45b1-a8be-0b7593b6d0c9",
          "number": 5,
          "slug": "deploy-upgreadable-smart-contracts",
          "title": "Deploy upgreadable smart contracts",
          "description": "Guide on deploying upgradeable smart contracts, focusing on the deployment process and best practices.",
          "duration": 5,
          "videoUrl": "z016vkBYOQIIgOmpE02YjxM02Ael2i8R1a9Jq2alzB021r8",
          "rawMarkdownUrl": "/routes/advanced-foundry/4-upgradeable/5-uups-deploy/+page.md",
          "markdownContent": "***\n\n## title: UUPS Deploy\n\n***Follow along with this video.***\n\n***\n\nIn this blog post, I am going to give you a walkthrough on how to upgrade and deploy upgraded contracts using Solidity, more specifically, boxes. By the end of this guide, you'll be able to deploy an upgradeable box contract from the same address.\n\nHere's the roadmap for this blog post:\n\n1. Deploy Box v1\n2. Get an address\n3. Verify that functions work\n4. Deploy Box v2\n5. Point Proxy to Box v2\n\nReady? Let's make the magic happen!\n\n### Deployment Script - `deployBox.sol`\n\nFirst off, we'll create a script named `deployBox.sol`, which will be responsible for deploying our Box. Also, we'll create another one called `upgradeBox.sol` that will help to upgrade it later on. Here's what the `deployBox.sol` script looks like:\n\n```js\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {Script} from \"forge-std/Script.sol\";\nimport {BoxV1} from \"../src/BoxV1.sol\";\nimport {ERC1967Proxy} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\ncontract DeployBox is Script {\n    function run() external returns (address) {\n        address proxy = deployBox();\n        return proxy;\n    }\n\n    function deployBox() public returns (address) {\n        vm.startBroadcast();\n        BoxV1 box = new BoxV1();\n        ERC1967Proxy proxy = new ERC1967Proxy(address(box), \"\");\n        vm.stopBroadcast();\n        return address(proxy);\n    }\n}\n```\n\nPlease note that this SPX license and pragma version can differ based on your needs and project's requirements.\n\nHere, the `DeployBox()` function creates a new instance of the `BoxV1` contract.\n\nIf everything is coded correctly, it should compile without any issues.\n\n<img src=\"/upgrades/5-deploy/uup-deploy1.png\" style=\"width: 100%; height: auto;\">\n\n### Now, let's see this in action...\n\nThis tutorial is not just about compiling code but also about making it work in real-time. The next steps will involve writing tests to facilitate execution and to ensure everything is working as expected. Stay tuned for the detailed rundown of those steps in the upcoming posts.\n\nWe'll be deploying `Boxv1`, get it's proxy address, and then we're going to upgrade it to `Boxv2`. All from the same address.\n\nWe'll cover that in the next blog post, so hang on tight!\n\nThere's more to Solidity and Proxy contracts than meets the eye, and with this proxy in particular, you're sure to upgrade your Solidity contracts with utmost efficiency.\n",
          "updates": []
        },
        {
          "lessonId": "d3063f5c-4cd7-4fb6-aa35-5163adac7575",
          "number": 6,
          "slug": "uups-upgrade",
          "title": "Upgrade UUPS proxy smart contracts",
          "description": "Tutorial on upgrading UUPS proxy smart contracts, including script writing and execution.",
          "duration": 6,
          "videoUrl": "2XOgdZs4rPMkUq01pJsPPMYzWf7ZwwuWE2k8UiVAcnvY",
          "rawMarkdownUrl": "/routes/advanced-foundry/4-upgradeable/6-uups-upgrade/+page.md",
          "markdownContent": "***\n\n## title: UUPS Upgrade\n\n***Follow along with this video.***\n\n***\n\nOn this sublesson we are going to write the script to upgrade the Box contract we made on past sublessons using a new contract called `UpgradeBox.s.sol`.\n\n## Write and Deploy an Upgrade Box Script\n\nHaving installed the DevOps tool, let's move to the meat and potatoes: the upgrade box script creation.\n\nWe'll start by defining our pragma and importing the necessary dependencies\n\n```js\npragma solidity ^0.8.19;\n\nimport {Script} from \"forge-std/Script.sol\";\nimport {BoxV1} from \"../src/BoxV1.sol\";\nimport {BoxV2} from \"../src/BoxV2.sol\";\nimport {ERC1967Proxy} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport {DevOpsTools} from \"lib/foundry-devops/src/DevOpsTools.sol\";\n```\n\nDefine a function, `run`, which will return the proxy\n\n```js\nfunction run() external returns (address) {\n        address mostRecentlyDeployedProxy = DevOpsTools\n            .get_most_recent_deployment(\"ERC1967Proxy\", block.chainid);\n\n        vm.startBroadcast();\n        BoxV2 newBox = new BoxV2();\n        vm.stopBroadcast();\n        address proxy = upgradeBox(mostRecentlyDeployedProxy, address(newBox));\n        return proxy;\n    }\n```\n\n## Upgrade the Box\n\nInitializing a proxy upgrade, we'll create a new function `upgradeBox`. This function will take in two parameters: the address of our deployed proxy and the address of our newly deployed Box v2. We will then return the proxy address.\n\n```js\n function upgradeBox(\n        address proxyAddress,\n        address newBox\n    ) public returns (address) {\n        vm.startBroadcast();\n        BoxV1 proxy = BoxV1(payable(proxyAddress));\n        proxy.upgradeTo(address(newBox));\n        vm.stopBroadcast();\n        return address(proxy);\n    }\n```\n\nSo if the journey was a bit challenging, let's summarize what's actually happening in layman's terms.\n\n<img src=\"/upgrades/6-upgrade/up1.png\" style=\"width: 100%; height: auto;\">\n\nSimple, right? Don't believe it yet? It's alright, let's prove it with a test!\n\nFor now, happy coding!\n",
          "updates": []
        },
        {
          "lessonId": "26f63889-34b4-4866-aaea-6f69e0203a02",
          "number": 7,
          "slug": "uups-tests",
          "title": "Testing UUPS proxies",
          "description": "A practical session on testing UUPS proxies, ensuring functionality and successful upgrades.",
          "duration": 6,
          "videoUrl": "8UyOk5AU4TlyD4tR5drnQsDK67CAfDSinTH3sFPI3zI",
          "rawMarkdownUrl": "/routes/advanced-foundry/4-upgradeable/7-uups-tests/+page.md",
          "markdownContent": "***\n\n## title: UUPS Tests\n\n***Follow along with this video.***\n\n***\n\nWelcome back friend we just created, deployed and upgraded our Box contract on previous lessons, today we are going to delve on good old tests to be sure everything works as expected.\n\n## Setting up Our Testing Environment\n\nWe will be creating a new Sol file where we will write some initial tests called `DeployAndUpgradeTest`, to demonstrate the true power of smart contract upgrades. As we are working with Solidity 0.8.18, we’ll be importing a test from Forge's standard test.sol file. And the Standard imports as always, Code-wise, it will look something like this:\n\n```js\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\nimport {DeployBox} from \"../script/DepolyBox.s.sol\";\nimport {UpgradeBox} from \"../script/UpgradeBox.s.sol\";\nimport {Test, console} from \"forge-std/Test.sol\";\nimport {StdCheats} from \"forge-std/StdCheats.sol\";\nimport {ERC1967Proxy} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport {BoxV1} from \"../src/BoxV1.sol\";\nimport {BoxV2} from \"../src/BoxV2.sol\";\n\ncontract DeployAndUpgradeTest is StdCheats, Test {}\n```\n\n<img src=\"/upgrades/7-tests/test1.png\" style=\"width: 100%; height: auto;\">\n\n## Setting Up the Contract and Initial Tests\n\nNext, we proceed with creating a function setup. This function will aim to prepare the environment for testing. In this setup function we will define a *deployBox*, *upgradeBox*, and an owner address.\n\n```js\n function setUp() public {\n        deployBox = new DeployBox();\n        upgradeBox = new UpgradeBox();\n    }\n```\n\nNow let's dive on the most basic test, check if the Box Works:\n\n```js\nfunction testBoxWorks() public {\n        address proxyAddress = deployBox.deployBox();\n        uint256 expectedValue = 1;\n        assertEq(expectedValue, BoxV1(proxyAddress).version());\n    }\n```\n\n## Implementing the Upgrade\n\nIn doing this, we will first define our *boxV2* and then proceed to upgrade *boxV1* to *boxV2* using our upgrade functionality. We will use assertions for these tests and validate whether the upgraded proxy now points to *boxV2*.\n\n```js\n  function testUpgradeWorks() public {\n        address proxyAddress = deployBox.deployBox();\n\n        BoxV2 box2 = new BoxV2();\n\n        vm.prank(BoxV1(proxyAddress).owner());\n        BoxV1(proxyAddress).transferOwnership(msg.sender);\n\n        address proxy = upgradeBox.upgradeBox(proxyAddress, address(box2));\n\n        uint256 expectedValue = 2;\n        assertEq(expectedValue, BoxV2(proxy).version());\n\n        BoxV2(proxy).setValue(expectedValue);\n        assertEq(expectedValue, BoxV2(proxy).getValue());\n    }\n```\n\nIn the code above, we first deploy our new `boxV2` contract, then upgrade our `boxV1` to `boxV2` by pointing the existing proxy to `boxV2`. We then validate this through the `assertEqual` function.\n\nFurther, we also test whether functions that are unique to `boxV2` such as `setNumber` can be called on the updated `boxV2` through the proxy.\n\n<img src=\"/upgrades/7-tests/test2.png\" style=\"width: 100%; height: auto;\">\n\nLastly, it's worth mentioning that we should add a function to ensure that proxy starts as `boxV1`. This function will be set to revert with the previous setup. As a result, when attempting to run the `setNumber` function on the proxy, it should fail.\n\nNow that we have all our tests in place, let's run these one at a time using `forge test`.\n\n<img src=\"/upgrades/7-tests/test3.png\" style=\"width: 100%; height: auto;\">\n\nAnd voila! We can see that proxy has been successfully upgraded from `boxV1` to `boxV2`. Such upgrades are a crucial part of smart contract development, as they allow you to deploy new features, fix bugs and more, all while preserving the addresses that interact with your contract.\n\nWith the above guide, you now have a better understanding of how smart contract upgrades work. Good luck with crafting your own upgrades!\n",
          "updates": []
        },
        {
          "lessonId": "174283fa-d2ad-473b-9b5d-e97b1a56fa50",
          "number": 8,
          "slug": "testnet-demo",
          "title": "Deploying the stablecoin on the testnet",
          "description": "Demonstration of deploying stablecoin smart contracts on a testnet, covering the entire process from deployment to upgrade.",
          "duration": 7,
          "videoUrl": "02oF7zLHGaJrmZ02S9sVtTldj5EzNdjqjnbSK2ghteGG8",
          "rawMarkdownUrl": "/routes/advanced-foundry/4-upgradeable/8-testnet-demo/+page.md",
          "markdownContent": "***\n\n## title: Testnet Demo\n\n***Follow along with this video.***\n\n***\n\n# Upgradable Smart Contracts: Unveiling The Mystery\n\nHello, dear blog readers! I can barely contain my excitement as I eagerly wrap up the discussion on upgradable smart contracts that we just zoomed through. As a quick note, I encourage you all to engage in discussions, ask questions—ask away in the comments section, on Twitter or share your thoughts with your buddies. As you learn about the process, there is always something new to discover, question, and understand. So let the curiosity kitty out of the bag!\n\n## Upgrades or no upgrades?\n\nI must stress this, while we just learned about upgrades, I'd strongly discourage you from sticking to this default setting in the world of protocols with upgradable smart contracts as it can create a centralization problem. Why, you ask? If you have an upgradable smart contract, that implies a group can modify the logic of that code at any point or be compelled to alter the logic. Having said that, knowing about delegate call—an incredibly potent primitive—is essential.\n\nWith this, we're almost ready to proceed to the next steps.\n\n## Let's Get Practical\n\nThese steps aren't to stress you further ─ quite the contrary. Let's push this up to GitHub, add this to your portfolio and reward yourself with a well-earned break. Pat yourself on the back, because you've accomplished some pretty amazing work.\n\nNow, let’s deploy this phenomenal work to a testnet. I am going to go ahead and borrow a make file and then tweak it. To simplify our process, let's delete all the unnecessary stuff from the file and focus on the section of 'Deploy'.\n\n<img src=\"/upgrades/8-testnet-demo/testnet1.png\" style=\"width: 100%; height: auto;\">\n\nWith just these few steps, we have our two contracts ready to roll! Next, moving to Sepolia etherscan, I realized that neither of them verified correctly. It’s not an issue though, we can always attend to it and manually verify it later.\n\nTo proceed, I checked ‘My broadcast’ section in etherscan to identify which contract is which. Fun fact: ‘My broadcast’ is a great tool that details all your contract deployments and transactions.\n\n### Box v1 and Upgrade Process\n\nThe first contract created was named box v1. Now, it's a one-time exercise to copy this and paste it to verify manually later. Though it didn't quite verify initially, fret not, as I knew this was my box v1 with the correct address.\n\nThe next contract doesn't have a name, but it's clearly the proxy address. So we're left with two entities: a proxy and a box, with the former being substantially more important. Reason being, the proxy dynamically points to the box's implementation.\n\nAt this point, to prompt our upgrade, we execute the `make upgrade` command. Subsequently, a minor bug was detected with the script. I discovered that I needed to update my run latest to ERC 1967 proxy. No sweat, a quick manual addition and bye-bye bug.\n\nOn hitting the refresh button, with the bug sorted and having successfully identified the ERC 1967 proxy, our upgrade script could now run to upgrade box v1 to box v2.\n\n<img src=\"/upgrades/8-testnet-demo/testnet2.png\" style=\"width: 100%; height: auto;\">\n\n### The Final Showdown: Box v2\n\nWith box v2 being created and verified successfully, we now revisit our proxy to refresh and double-check. Sure enough, an upgrade was called on this contract. Henceforth, whenever we call functions on this, it points to box v2. It is important to keep in mind that we're calling the proxy and not the box v2 address.\n\nBy executing some handy commands to set the number to 77, the proxy was updated. We called upon box v2 and successfully saw a return of 77 in decimal representation.\n\nEt voilà! It worked like a charm, we had successfully deployed and worked with a proxy.\n\n## You've Made It!\n\nThat was intense and amazing! Designing, deploying and upgrading contracts is no joke and you've done a fantastic job. Post your accomplishments on Twitter; you may need a well-deserved ice cream break before we move on to our next topics.\n\nWe're cruising towards the end—Foundry governance and an introduction to security are the last few topics that are separating you from achieving greatness in smart contract development.\n\nStay tuned, stay smart, and keep yourself ready for absorbing more incredible contract knowledge! I'll see you in the next phase of this fantastic journey!\n",
          "updates": []
        }
      ]
    },
    {
      "sectionId": "7a5fa5f5-6d4d-4be4-a19d-d2b337abf943",
      "number": 5,
      "slug": "daos",
      "title": "DAOs",
      "lessons": [
        {
          "lessonId": "5bf97f38-e188-41ab-b1d6-98c5b6243fd0",
          "number": 1,
          "slug": "introduction-to-dao",
          "title": "Introduction to DAOs",
          "description": "Introduction to the concept and operational mechanics of Decentralized Autonomous Organizations (DAOs).",
          "duration": 19,
          "videoUrl": "yYEVIVHUAAYJTrUn00MRcNpLNnpAQacfinH01G87AIcls",
          "rawMarkdownUrl": "/routes/advanced-foundry/5-daos/1-intro/+page.md",
          "markdownContent": "***\n\n## title: DAOs & Governance Intro\n\n*Follow along with this video.*\n\n***\n\nWelcome back to yet another session in the series, today we're pacing up to lesson 14 of the topic \"Foundry DaoGovernance.\" All the code that we'll be using during the tutorial has been shared on the Github repository. So, make sure to check it out.\n\n## Closer Look at DAOs\n\nBefore we dive into how to build a DAO, it's crucial to solidify our understanding of DAOs. DAO stands for Decentralized Autonomous Organization, which can be somewhat confusing due to its broad definition. It essentially refers to any group operated by a clear set of rules embedded within a blockchain or smart contract.\n\n## How DAOs Work: An Overview\n\nIn simplest terms, imagine if all users of Google were given voting power on Google's future plans. Instead of decisions being privately made behind closed doors, the process is public, decentralized, and transparent. This innovative concept empowers users and eliminates trust issues, making DAOs a revolutionary area of exploration.\n\nLet’s dive deeper into DAOs by watching a few videos I have created in the past. After viewing these videos, we will shift focus to the practical aspect of coding a DAO.\n\n<img src=\"/daos/1-intro/dao-intro1.png\" alt=\"Dao Image\" style=\"width: 100%; height: auto;\">\n\n## Understanding DAO's Through Compound Protocol\n\nCompound protocol is a stellar example that can help us understand the intricacies of DAOs. It's a borrowing and lending application constructed with smart contracts. Navigating through the protocol, we discover a governance section that offers an interface showing all the proposals and ballots. Here, the proposals to change aspects of the protocol such as adding new tokens, adjusting APY parameters, or blocking certain coins, etc. are enlisted.\n\nThis governance process is required since the contracts used often have access controls where only their owners, in this case, the governance DAO, can call certain functions.\n\n<img src=\"/daos/1-intro/dao-intro2.png\" alt=\"Dao Image\" style=\"width: 100%; height: auto;\">\n\nA DAO do not limit its functionality to proposals and voting only. It also incorporates the feature of discussion forums where community members can deliberate on proposals, justifying their pros and cons before going ahead with the voting process.\n\n## Building a DAO: Architecture and Tools\n\nAfter understanding the basic workflow of DAO, let’s now talk about the architecture and tools that go into building DAO. First and foremost is the voting mechanism. One thing to keep in mind is to ensure that the voting mechanism is transparent and provides a fair way for participants to engage.\n\nDAO uses three main mechanisms for voting:\n\n1. ERC-20 or NFT Token as voting power: This approach is inherintly biased toward those who can afford to purchase more tokens, leading to a skewed representation of interests.\n2. Skin in The Game: Based on an article by Vitalik Buterin, he suggests that voters accountable for their choices. In this approach, people who vote for a decision that leads to negative outcomes will have their tokens taken away or reduced. Deciding which outcomes are bad is the tricky part.\n3. Proof of Personhood or Participation: This is where everyone in the community gets a single vote, regardless of how many wallets or tokens they have. This method is the most fair, but also the most difficult to implement due to the problem of civil resistance.\n\nOn chain and off chain are the two ways to implement voting in a DAO:\n\n* Onchain voting is simple to implement and transparent, but gas fees can add up quickly for large communities.\n* Offchain voting saves on gas fees and provides a more efficient way to vote, but presenting challenges in regards to centralised intermediaries.\n\n### Tools for Building a DAO\n\nThere are several no-code solutions and more tech-focused tools to help you build a DAO, including:\n\n* DAOstack\n* Aragon\n* Colony\n* DaoHouse\n* Snapshot\n* Zodiac\n* Tally\n* Gnosis safe\n* OpenZeppelin contracts\n\nBefore wrapping up, it's essential to touch briefly on the legal aspects of DAOs. DAOs are in a gray area operationally, with the state of Wyoming in the United States being the only state where a DAO can be legally recognized. Read up on the legal implications before you dive into creating your DAO!\n\nRemember, as an engineer, you have the power to build and shape the future of DAOs. So dive in and get building!\n\nStay tuned for our next sublesson, where we will guide you through the process of building a DAO from scratch. Remember to hit the like and subscribe button for more engineering-first content on smart contracts. Happy coding!\n",
          "updates": []
        },
        {
          "lessonId": "6dfdc8b2-cb5a-4ee1-96a0-c46b6dd75a20",
          "number": 2,
          "slug": "introduction-to-aragon-dao",
          "title": "DAOs tooling - Introduction to Aragon",
          "description": "Overview of Aragon, a tool for creating and managing DAOs without the need for extensive coding.",
          "duration": 19,
          "videoUrl": "o8LJYPHWOvKvn02GZz8ASvBgbccgNBuaozlCOFZQp4js",
          "rawMarkdownUrl": "/routes/advanced-foundry/5-daos/2-aragon/+page.md",
          "markdownContent": "***\n\n## title: Aragon\n\n*Follow along with this video.*\n\n***\n\n# Building a DAO from Scratch: No Code Required, with Aragon\n\nToday, we're venturing into the exciting world of Decentralized Autonomous Organizations (DAOs), and we'll be doing it in a surprisingly code-light way. We're delighted to have Juliet Cevalier from the Aragon team as our expert guide. She's here to introduce Aragon's no-code node solution for the relatively simple creation of powerful, customizable DAOs.\n\n<img src=\"/daos/2-aragon/aragon1.png\" alt=\"Dao Image\" style=\"width: 100%; height: auto;\">\n\n## Meet Our Aragon Expert\n\nBefore we dive in, let's welcome Juliet Cevalier. As the developer advocate for Aragon, she'll give us insights on how to build a DAO without using a single line of code.\n\n<img src=\"/daos/2-aragon/aragon2.png\" alt=\"Dao Image\" style=\"width: 100%; height: auto;\">\n\n## Introduction to the Aragon DAO Framework\n\nTo undertake this task, Juliet is using the [Aragon DAO framework](https://aragon.org/). To understand how Aragon's architecture is set up, let’s first consider the base structure of DAOs.\n\nDAOs primarily consist of a smart contract responsible for containing all of the organization's managed assets, acting effectively as the treasury. Still, the beauty and power of DAOs come from their highly extendable functionality, made possible through plugins.\n\nReady to proceed with the DAO-building journey? Let's follow Juliet's step-by-step guide.\n\n## Step 1: Creating a DAO on Aragon\n\nFirstly, log on to [app.aragon.org](https://app.aragon.org/). Once there, click on 'Create a DAO'. You’ll then see an outline of the process we'll be following, starting with choosing the blockchain where our DAO will be deployed.\n\n<img src=\"/daos/2-aragon/aragon3.png\" alt=\"Dao Image\" style=\"width: 100%; height: auto;\">\n\n## Step 2: Describing Your DAO\n\nNext is the DAO’s descriptive details including name, logo, and brief description. For the sake of this tutorial, we'll name ours “Developer DAO”.\n\n<img src=\"/daos/2-aragon/aragon4.png\" alt=\"Dao Image\" style=\"width: 100%; height: auto;\">\n\n## Step 3: Defining DAO Membership\n\nDefining membership is a crucial next step as it’s what determines who can participate in the governance of these assets. Currently, Aragon supports token holders and multisig members as types of governance members.\n\nThe token holders method allows holders of specific tokens to vote in the organization. The multisig members, on the other hand, establishes a specific quorum that needs to be met for a proposal to go through.\n\n*These governance mechanisms, with their own unique decision-making and asset management abilities, are facilitated by back-end plugins. These are powerful extensions that can also perform tasks like fund movement, treasury management, and enabling different coordination styles.*\n\n## Step 4: Create a DAO Token\n\nThe creation of a unique DAO token comes next. Let's call ours 'DVP'. We can assign 1000 tokens to ourselves and specify a minimum amount of tokens that a member needs for proposal creation.\n\n*In this instance, we'll suggest a minimum of ten tokens to prevent proposal spam.*\n\n## Step 5: Set Up Governance Settings\n\nOnce the token creation is complete, we proceed to set up governance settings which includes specifying the minimum support threshold required for a valid proposal, the minimum participation needed, and the minimum time that a proposal should be open for voting.\n\nWe'll also decide whether to enable early execution, which means that we wait for the entire time of the proposal's duration, and whether to allow change of vote after submission.\n\n## Step 6: Review and Finalize\n\nLastly, we'll review the parameters that we've set. It's crucial to note that the blockchain selection is the only non-editable item since it forms the basis for the DAO’s deployment. Everything else can later be changed via a proposal vote.\n\n*This flexibility gives us the power to adapt and evolve our DAO with changing circumstances and needs.*\n\n## Step 7: DAO Deployment\n\nWith the parameters set, we'll deploy our DAO by signing the proposal. What happens next is the creation of a DAO instance with the defined plugins and settings.\n\n<img src=\"/daos/2-aragon/aragon5.png\" alt=\"Dao Image\" style=\"width: 100%; height: auto;\">\n\nOnce the deployment is complete, we can easily monitor, manage, and make decisions within the DAO through the dashboard.\n\n## Final Thoughts\n\nWhile Aragon provides you with a basic template to get started, remember, your DAO’s evolution and customization possibilities are endless. You can expect more iterations, plugin options, and decision-making strategies to take your DAO to the next level.\n\nThank you for joining us today. We look forward to seeing the powerful, value-driven DAOs you create.\n",
          "updates": []
        },
        {
          "lessonId": "2bce26c6-e68f-4f8e-aaef-a5e4b82d02c6",
          "number": 3,
          "slug": "setup",
          "title": "Project setup",
          "description": "Guidance on setting up a project for creating a DAO, with emphasis on ERC-20 based plutocracy DAOs.",
          "duration": 5,
          "videoUrl": "RN4mN7bGQ7b02Lhv5P9IMiyqSKrOynziF3Gy8H01QIGcg",
          "rawMarkdownUrl": "/routes/advanced-foundry/5-daos/3-setup/+page.md",
          "markdownContent": "***\n\n## title: Setup\n\n*Follow along with this video.*\n\n***\n\nToday, I'm going to take you deeper into the captivating world of DAOs, Decentralized Autonomous Organizations. More specifically, I'll be throwing light on plutocracy DAOs, which are based on ERC 20 tokens, and show you how to create one from scratch using FOUNDATION.\n\nBe warned though, gaining a solid conceptual understanding of these inside-out is of paramount importance before jumping to establish your DAO. Let's keep our journey enlightening and error-free, shall we?\n\n## The Caveat About Plutocracy DAOs\n\nA word of caution before we take the leap: launching a DAO is no casual affair. Many newbies hurry into launching their governance tokens and find themselves neck-deep in problems down the line.\n\n<img src=\"/daos/3-setup/setup1.png\" alt=\"Dao Image\" style=\"width: 100%; height: auto;\">\n\nTherefore, it's essential to have a foolproof white paper justifying your need for a governance token. In short, do not make DAO creation decisions in haste, lest they come back to haunt your project.\n\n## Let's Get Our Hands Dirty with Code\n\nTo jump-start this process, we will look at the most popular DAO model currently in use across major platforms like Compound, Uniswap, and Aave.\n\nPlease bear in mind, just because it's \"popular\", doesn't mean it's the best fit for every situation or the only available model. Always strive for improving and optimizing the web3 ecosystem.\n\n### Stage 1: Creating a Contract Controlled by DAO\n\nFirst things first, we'll make a contract fully controlled by our DAO.\n\n```shell\nmkdir foundry-dao-f23\ncd foundry-dao-f23\n\n```\n\nOpen your code editor (VS Code in this case).\n\n```bash\nforge init\n```\n\nThen, set up a README for outlining what you'll be doing.\n\n### Here are our main objectives:\n\n1. Establish a contract completely controlled by our DAO.\n2. Every transaction the DAO wants to send will need to be voted on.\n3. For voting, we'll utilize ERC 20 tokens.\n\n<img src=\"/daos/3-setup/setup2.png\" alt=\"Dao Image\" style=\"width: 100%; height: auto;\">\n\nLet's get down to business.\n\n### Stage 2: Creating a Minimal Contract\n\nLet's create a minimal contract that we can vote on. Our contract will look somewhat similar to the contracts we've worked on before.\n\n```bash\ntouch src/Box.sol\n```\n\nThis is how `Box.sol` should look like:\n\n```js\n// contracts/Box.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Box is Ownable {\n    uint256 private value;\n\n    // Emitted when the stored value changes\n    event ValueChanged(uint256 newValue);\n\n    // Stores a new value in the contract\n    function store(uint256 newValue) public onlyOwner {\n        value = newValue;\n        emit ValueChanged(newValue);\n    }\n\n    // Reads the last stored value\n    function retrieve() public view returns (uint256) {\n        return value;\n    }\n}\n```\n\nIn the code block above, the `value` variable can only be modified by the DAO itself. The moment a new value is stored, an event of number change gets emitted notifying the updated number.\n\nAnd there we have our minimal contract. This contract somewhat echoes a project I have previously worked on, known as `Box.sol`, a simple storage contract.\n\nRemember to test your code to make sure everything compiles as expected:\n\n```bash\nforge compile\n```\n\n### Stage 3: Creating a Voting Token\n\nNow we get to the exciting part. Using ERC 20 tokens for voting means we'll have to create our very own voting token.\n\nStay tuned for my next blog post where we'll dive into creating your unique voting token.\n\nHappy experimenting until then!\n",
          "updates": []
        },
        {
          "lessonId": "95b25edd-db0a-4585-aa86-bd62171561b1",
          "number": 4,
          "slug": "governance-tokens",
          "title": "Governance tokens",
          "description": "Tutorial on creating governance tokens using ERC-20 extensions to facilitate DAO voting and decision-making processes.",
          "duration": 4,
          "videoUrl": "x00t00fuM00p1Nuhwxhgyq8mvdrh4ZoB8ek5rzizy02D9Kk",
          "rawMarkdownUrl": "/routes/advanced-foundry/5-daos/4-governance-tokens/+page.md",
          "markdownContent": "***\n\n## title: Governance Tokens\n\n*Follow along with this video.*\n\n***\n\nHello there, tech enthusiasts! Are you interested in creating a voting token to govern your smart contracts? Then today's sublesson will lead you step-by-step through the process, using Open Zeppelin's Contracts Wizard.\n\nTo create these tokens, we will use an ERC-20 token with specific extensions to allow for advanced behaviors and control. So buckle up, and let's get coding!\n\n## **Step 1: Using Open Zeppelin's Contracts Wizard**\n\nOpen Zeppelin, a provider of software libraries for Ethereum, offers numerous contracts that developers can implement for tokens. We'll use the Contracts Wizard, a user-friendly tool to generate smart contracts.\n\nNavigate over to the wizard, select ERC-20 contract and within it, you'll see a tab named *votes*. Once you’ve selected this, copy the given code and then paste it into your new file named `GovToken.sol`. This will serve as the core of our voting token.\n\n## **Step 2: Understanding the Code**\n\nNow, we have successfully copied the code, let's delve into what we have:\n\n```js\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {ERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport {ERC20Votes} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\";\n\ncontract GovToken is ERC20, ERC20Permit, ERC20Votes {\nconstructor() ERC20(\"MyToken\", \"MTK\") ERC20Permit(\"MyToken\") {}\n\n    // The following functions are overrides required by Solidity.\n\n    function mint(address to, uint256 amount) public {\n        _mint(to, amount);\n    }\n\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal override(ERC20, ERC20Votes) {\n        super._afterTokenTransfer(from, to, amount);\n    }\n\n    function _mint(address to, uint256 amount) internal override(ERC20, ERC20Votes) {\n        super._mint(to, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal override(ERC20, ERC20Votes) {\n        super._burn(account, amount);\n    }\n\n}\n```\n\nWhat we have here are two crucial extensions to our ERC-20 token:\n\n* **ERC20Permit**: This extension allows approvals to be made via signatures. Simply put, you can sign a transaction without sending it, allowing someone else to send the transaction instead. This function is based on the EIP-2612, which, if you're interested, I'd recommend checking out [here](https://eips.ethereum.org/EIPS/eip-2612) for more information.\n* **ERC20Votes**: This is the heart of our voting functionality. It performs key actions like keeping the history of each account's voting power, and enabling the delegation of voting rights to another party.\n\n## **Delegating with ERC20Votes**\n\nAn interesting function of the ERC20Votes is token delegation. Sometimes, you might trust another party's judgement more than your own on certain topics. ERC20Votes' delegation function lets you delegate the voting rights of your token to this party, even though the tokens are still legally yours.\n\n## **Conclusion**\n\nCongratulations! You've successfully created a secure, flexible voting token. This ERC20 token not only maintains checkpoints of voting power but also enables token holders to delegate their voting rights.\n\nRemember, Open Zeppelin’s Contracts Wizard is an excellent tool for exploring various token functionalities as per your requirements. Happy coding!\n\n<img src=\"/daos/4-token/token1.png\" alt=\"Dao Image\" style=\"width: 100%; height: auto;\">\n",
          "updates": []
        },
        {
          "lessonId": "cecdace6-083a-4315-af14-95cfe95b65be",
          "number": 5,
          "slug": "create-governor-contract",
          "title": "Creating the governor contract",
          "description": "Instructions for creating a governor contract for DAOs, utilizing Open Zeppelin's tools for efficient and secure contract generation.",
          "duration": 15,
          "videoUrl": "e34WuxPtYHsMqPITGJXlY3ot027pnJ8MbMZYB00BWVU00c",
          "rawMarkdownUrl": "/routes/advanced-foundry/5-daos/5-governor-contract/+page.md",
          "markdownContent": "***\n\n## title: Governor Contract\n\n*Follow along with this video.*\n\n***\n\nHello there! Today I want to share a really interesting piece of tech I've recently used, the [Open Zeppelin Wizard](https://docs.openzeppelin.com/contracts/4.x/wizard). This tool is incredibly helpful in generating smart contracts for creating a DAO, which stands for a Decentralized Autonomous Organization. Why are DAO's exciting? Well, they allow for democratized decision making, meaning the members of the DAO can vote about its future actions.\n\nIn this post, I want to walk you through a solution that makes use of the Zeppelin Wizard to create a DAO.\n\n## Zeppelin Wizard Overview\n\nThe Zeppelin Wizard helps us with multiple facets of setting up a DAO. One of its features is the Governor, which we can configure to suit our needs. For instance, we can adjust the voting delay, voting period, and proposal threshold in line with the governance model we're aiming for. Do we want our voting to start immediately after proposing? Or after 100 blocks? All these details are customizable.\n\nHere's the interesting part - we can copy the output code from the wizard and integrate it into our contracts with minimal changes. To illustrate this, I'll walk you through a sample setup of a Governor contract along with a crucial TimeLock mechanism.\n\n<img src=\"/daos/5-governor/governor1.png\" alt=\"Dao Image\" style=\"width: 100%; height: auto;\">\n\n## Creating the Governor contract\n\nFirst, we need to update our Governor contract and import the necessary interfaces (`IVotes`, `GovernorVotes` & `TimeLockController`). We'll be using *named imports* since they make our code cleaner.\n\nHere's an overview of what the Governor contract entails.\n\n```js\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {ERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport {ERC20Votes} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\";\n\ncontract GovToken is ERC20, ERC20Permit, ERC20Votes {\n    constructor() ERC20(\"MyToken\", \"MTK\") ERC20Permit(\"MyToken\") {}\n\n    // The following functions are overrides required by Solidity.\n\n    function mint(address to, uint256 amount) public {\n        _mint(to, amount);\n    }\n\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal override(ERC20, ERC20Votes) {\n        super._afterTokenTransfer(from, to, amount);\n    }\n\n    function _mint(address to, uint256 amount) internal override(ERC20, ERC20Votes) {\n        super._mint(to, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal override(ERC20, ERC20Votes) {\n        super._burn(account, amount);\n    }\n}\n```\n\nThis may seem a bit abstract, but let me break it down a bit.\n\nWhen somebody makes a proposal, it gets registered in the system. We essentially have a record of when a vote started and ended, whether it was executed or canceled. This information helps us identify the status of a proposal and whether it has passed.\n\nNext, we have the `execute` function. Once a proposal gets approved by the DAO members, we call this function to implement the operation involved in the proposal.\n\nThe final key function is `cast vote`. This allows members of the DAO to cast votes on various proposals. Depending on the overall voting system, the weight of each member's vote could be dependent on the number of tokens they hold.\n\n## Building the TimeLock Controller Contract\n\nThe final step in our set up is creating the TimeLock Controller contract, which, fortunately, we can do with minimum effort thanks to Open Zeppelin's repository.\n\n```js\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {TimelockController} from \"@openzeppelin/contracts/governance/TimelockController.sol\";\n\ncontract TimeLock is TimelockController {\n    // minDelay is how long you have to wait before executing\n    // proposers is the list of addresses that can propose\n    // executors is the list of addresses that can execute\n    constructor(uint256 minDelay, address[] memory proposers, address[] memory executors)\n        TimelockController(minDelay, proposers, executors, msg.sender)\n    {}\n}\n```\n\nAnd this is it for this sub-section. We now have a TimeLock contract that we can use to lock our Governor contract. Keep learning and stay tuned for the next post!\n\nHappy coding!\n",
          "updates": []
        },
        {
          "lessonId": "baa7e801-d9fb-420d-afdb-0c84fa9740d2",
          "number": 6,
          "slug": "tests",
          "title": "Testing the governance smart contract",
          "description": "Comprehensive guide on testing governance smart contracts to ensure efficient and secure DAO operations.",
          "duration": 24,
          "videoUrl": "1QlC5gNDvn02qshVXBwZw5EdWvZwZUGQKZL23ypj3vIU",
          "rawMarkdownUrl": "/routes/advanced-foundry/5-daos/6-tests/+page.md",
          "markdownContent": "***\n\n## title: Tests\n\n*Follow along with this video.*\n\n***\n\nOn this lesson we are going to write some test for our DAO.\n\n## Testing Your DAO\n\nLet's start by writing a test.\n\n```shell\ntouch test/MyGovernorTest.t.sol\n```\n\nOne of the reasons we are proceeding a bit swiftly is because- This. Is. It. This is the point where you level up from being a novice to developing a strong understanding of how DAOs work.\n\nWe are going to write a test which will cover the whole process. The test we write here is going to be a comprehensive one so you can see this process in action from start to finish.\n\nAnd here's what you should know already:\n\n* How to flesh out this repo with scripts, tests.\n* How to write unit tests, fuzz tests, and more.\n* How to make your project bigger and better (also read as, bad\\*ss).\n\n## Testing the Governance Protocol\n\nWe are going to code 2 main tests:\n\n**Cannot Update Box Without Governance:** This test ensures that the governance mechanism is properly implemented by attempting to update the Box contract without the necessary governance authorization. If the update attempt doesn't revert, it signifies a vulnerability in the governance setup, highlighting the importance of secure access control.\n\n**Governance Updates Box:** This test scenario simulates a complete governance process for updating the Box contract. It starts by proposing a change, which encapsulates the desired update along with metadata. After the voting period elapses, the vote is executed if passed. In this case, the proposed change involves storing a specific value in the Box contract, showcasing the end-to-end functionality of the governance system.\n\nThis is how the testing script will look like:\n\n```js\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {Test, console} from \"forge-std/Test.sol\";\nimport {MyGovernor} from \"../src/MyGovernor.sol\";\nimport {GovToken} from \"../src/GovToken.sol\";\nimport {TimeLock} from \"../src/TimeLock.sol\";\nimport {Box} from \"../src/Box.sol\";\n\ncontract MyGovernorTest is Test {\n    GovToken token;\n    TimeLock timelock;\n    MyGovernor governor;\n    Box box;\n\n    uint256 public constant MIN_DELAY = 3600; // 1 hour - after a vote passes, you have 1 hour before you can enact\n    uint256 public constant QUORUM_PERCENTAGE = 4; // Need 4% of voters to pass\n    uint256 public constant VOTING_PERIOD = 50400; // This is how long voting lasts\n    uint256 public constant VOTING_DELAY = 1; // How many blocks till a proposal vote becomes active\n\n    address[] proposers;\n    address[] executors;\n\n    bytes[] functionCalls;\n    address[] addressesToCall;\n    uint256[] values;\n\n    address public constant VOTER = address(1);\n\n    function setUp() public {\n        token = new GovToken();\n        token.mint(VOTER, 100e18);\n\n        vm.prank(VOTER);\n        token.delegate(VOTER);\n        timelock = new TimeLock(MIN_DELAY, proposers, executors);\n        governor = new MyGovernor(token, timelock);\n        bytes32 proposerRole = timelock.PROPOSER_ROLE();\n        bytes32 executorRole = timelock.EXECUTOR_ROLE();\n        bytes32 adminRole = timelock.TIMELOCK_ADMIN_ROLE();\n\n        timelock.grantRole(proposerRole, address(governor));\n        timelock.grantRole(executorRole, address(0));\n        timelock.revokeRole(adminRole, msg.sender);\n\n        box = new Box();\n        box.transferOwnership(address(timelock));\n    }\n\n    function testCantUpdateBoxWithoutGovernance() public {\n        vm.expectRevert();\n        box.store(1);\n    }\n\n    function testGovernanceUpdatesBox() public {\n        uint256 valueToStore = 777;\n        string memory description = \"Store 1 in Box\";\n        bytes memory encodedFunctionCall = abi.encodeWithSignature(\"store(uint256)\", valueToStore);\n        addressesToCall.push(address(box));\n        values.push(0);\n        functionCalls.push(encodedFunctionCall);\n        // 1. Propose to the DAO\n        uint256 proposalId = governor.propose(addressesToCall, values, functionCalls, description);\n\n        console.log(\"Proposal State:\", uint256(governor.state(proposalId)));\n        // governor.proposalSnapshot(proposalId)\n        // governor.proposalDeadline(proposalId)\n\n        vm.warp(block.timestamp + VOTING_DELAY + 1);\n        vm.roll(block.number + VOTING_DELAY + 1);\n\n        console.log(\"Proposal State:\", uint256(governor.state(proposalId)));\n\n        // 2. Vote\n        string memory reason = \"I like a do da cha cha\";\n        // 0 = Against, 1 = For, 2 = Abstain for this example\n        uint8 voteWay = 1;\n        vm.prank(VOTER);\n        governor.castVoteWithReason(proposalId, voteWay, reason);\n\n        vm.warp(block.timestamp + VOTING_PERIOD + 1);\n        vm.roll(block.number + VOTING_PERIOD + 1);\n\n        console.log(\"Proposal State:\", uint256(governor.state(proposalId)));\n\n        // 3. Queue\n        bytes32 descriptionHash = keccak256(abi.encodePacked(description));\n        governor.queue(addressesToCall, values, functionCalls, descriptionHash);\n        vm.roll(block.number + MIN_DELAY + 1);\n        vm.warp(block.timestamp + MIN_DELAY + 1);\n\n        // 4. Execute\n        governor.execute(addressesToCall, values, functionCalls, descriptionHash);\n\n        assert(box.retrieve() == valueToStore);\n    }\n}\n\n```\n\n## Wrapping Up\n\nYou've learned how a typical voting process within a DAO works. However, this is just the basics. There are more advanced methodologies emerging daily, and it's only apt for you as a developer to explore these emerging trends.\n\nThere is a common criticism that pure DAOs can often devolve into plutocracies. To avoid that, consider tweaking the voting mechanisms or exploring other models of decentralized governance.\n\nIf you're feeling up to it, consider deploying a DAO or even creating your own! No matter what you decide to do next, pat yourself on the back. You've made a significant leap in your journey into understanding blockchain and smart contracts.\n\n<img src=\"/daos/6-test/test1.png\" alt=\"Dao Image\" style=\"width: 100%; height: auto;\">\n\nStay tuned for our next post. Until then, happy coding!\n",
          "updates": []
        },
        {
          "lessonId": "762e38ae-29e5-4f67-bf4b-2c2f172e5a7d",
          "number": 7,
          "slug": "daos-section-recap",
          "title": "Section recap",
          "description": "A recap of the DAO section with additional insights on smart contract security and auditing, and tips on gas optimization.",
          "duration": 6,
          "videoUrl": "q3nI7romDbqB02P8R9Mo700p7G1nav02TUGi11byJwFC8M",
          "rawMarkdownUrl": "/routes/advanced-foundry/5-daos/7-wrap-up/+page.md",
          "markdownContent": "***\n\n## title: Wrap up & Gas Tips\n\n*Follow along with this video.*\n\n***\n\nAs we approach the culmination of our lessons, there's one crucial topic left to cover - Smart Contract and Security Auditing for Developers. By no means should you leave this course without exploring this vital aspect. This is where we equip you with the necessary tools to ensure your smart contracts are secure and optimized. Sure, this lesson won't take you through auditing step by step, but it will certainly highlight what to expect from an auditor and essential steps towards thinking about security.\n\n***\n\n## Deep Dive Into Auditing World\n\nImagine the thrill of being able to deploy amazing contracts that are crafted and sealed with your intellect and skill. As exciting as that could be, equally important is being adept at understanding the security aspects associated with your creations. Hence, it is essential to know what to look for in an auditor; being aware of the crucial aspects that enhance the security of your contracts only makes you a seasoned developer.\n\nBut, we're not stopping there! If you plan to journey through the path of security and auditing, we've got you covered. We're working on dedicated security and auditing educational material to walk you through.\n\nSo, take pride in how far you've come! Time to celebrate your achievements - do a little dance, treat yourself to some ice cream. The end is within sight, and soon we will release you into the world, armed with fresh knowledge and insight.\n\nFor now, take a pause and join us back in a jiffy.\n\n***\n\n## Special Bonus: Gas Optimizations By Harrison Legg\n\nBut, before you hit the pause button, we've got a special piece of bonus content for you.\n\nWe are ecstatic to have Harrison Leggio, CTO and co-founder of Pop Punk, LLC, share some exceptional tips on gas optimizations. At Pop Punk LLC, they are building—`gaslight GG`, an audit firm specializing in gas optimization to ensure lowest possible gas costs. They are now venturing into building hyper optimized public goods tools for EVM developers, aiming at making the best and cheapest contracts accessible to all!\n\nHarrison was graciously shared an enlightening step-by-step explainer on gas optimizations with a special focus on AirDrop contracts, highlighting common ways that may unknowingly inflate your gas costs in your smart contracts. The goal of his speil is to illustrate how you can beautifully weave in simple elements in your code to save substantial amounts of gas without rendering the code unreadable.\n\nFind Harrison's detailed code explainer below.\n\n(Add the provided gas optimization code)\n\n*\"The end result? The AirDrop 'Bad' costs 1,094,690 gas, while the 'Good' version only consumes 404,842 gas, creating a saving of nearly 600,000 gas by making only minor changes. This not only benefits you as a developer but also the end users who won't need to spend exorbitant amounts.\"* – Harrison Leggio, CTO and co-founder of Pop Punk, LLC\n\n***\n\nFeel free to find Harrison on Twitter at `@poppunkonchain`, and the business account at `@PoppunkLLC`. He also extends an invitation to budding or established protocols for gas audits. Keep an eye out for `Gaslight GG` where you can soon deploy 'super cheap, super gas optimized' smart contracts with just a single button press.\n\nThat's all for today's session! Till we meet again!\n",
          "updates": []
        }
      ]
    },
    {
      "sectionId": "c646c829-3376-430f-a3d4-65872e71fefb",
      "number": 6,
      "slug": "security",
      "title": "Security",
      "lessons": [
        {
          "lessonId": "b47c5b24-cd73-425f-94e5-4937dbfa2b5b",
          "number": 1,
          "slug": "intro",
          "title": "Intro",
          "description": "Introduction to smart contract security and auditing, providing foundational knowledge for crypto space security.",
          "duration": 4,
          "videoUrl": "02hqB3V7iMXCTQTULsnpJpF02v02LL00khoY3NlH02HUKnGk",
          "rawMarkdownUrl": "/routes/advanced-foundry/6-security/1-intro/+page.md",
          "markdownContent": "***\n\n## title: Security & Auditing Introduction\n\n*Follow along with this video.*\n\n***\n\nWelcome back! This is our final lesson in this course and we're ending on a thrilling note - diving into the world of **smart contract security and auditing**. So if you're a developer who's been eagerly monitoring your progress, then prepare to get some insightful knowledge nuggets that will truly enhance your crypto literacy.\n\nRemember, this is *just a teaser* and won't cover everything about security, nonetheless, we're creating a treasure trove of places where you can learn and grow.\n\nAlthough this last lesson might tickle your brain, more importantly, it provides the foundational knowledge needed to take that first step into the exciting world of security in the crypto space.\n\n<img src=\"/auditing-intro/1-intro/auditing-intro1.png\" alt=\"Auditing Image\" style=\"width: 100%; height: auto;\">\n\n## Unraveling the Importance of Security with Stats\n\nIn case you're wondering why we're emphasizing security - the stats speak loud and clear! Here's a shocking fact:\n\n<img src=\"/auditing-intro/1-intro/auditing-intro2.png\" alt=\"Auditing Image\" style=\"width: 100%; height: auto;\">\n\nTo make it noir, consider the total value locked in the DEFI which was approximately $50 billion. That would indicate **6%** of all DFI was hacked last year. In simpler terms, it like placing your money in a bank that cheerfully says, \"*Hey, there's a 6% chance all your money will be gone next year*\".\n\nThe plausibility of this grim prospect closely mirrors what's happening in the crypto space and underlines the urgent need to bolster its security.\n\nTake a glance at an intriguing leaderboard on *Rectit News*. It's a daunting lineup of some of the biggest hacks, many of which were born out of code that was unaudited or reviewed by security professionals. Moreover, some of these attacks led to staggering losses of over half a billion dollars.\n\nThis brings us to a fundamental decision for protocol devs -\n\n<img src=\"/auditing-intro/1-intro/auditing-intro3.png\" alt=\"Auditing Image\" style=\"width: 100%; height: auto;\">\n\nFrom a business perspective, investing in security absolutely makes sense and provides a whopping 99% saving in costs.\n\n## Beginning the Process with Smart Contract Audits\n\nProtocol developers listen up! In all likelihood, you'll need to get a **smart contract security audit** at some point before you launch your protocol. That's where we'll start.\n\nA smart contract audit is certainly worth watching even if you don't aspire to become an auditor yourself. It will provide you with a foundation understanding when your protocol is poised to launch to mainnet.\n\nThe next video breaks down what a smart contract audit entails and how to prepare for it, so sit tight and get ready to unleash potential that’s waiting to be discovered!\n\nHappy Coding!\n",
          "updates": []
        },
        {
          "lessonId": "4e52985f-9d6d-4a2f-b3be-011923e6cd64",
          "number": 2,
          "slug": "what-is-smart-contract-audit",
          "title": "What is a smart contract audit",
          "description": "Insights into the manual review process in smart contract auditing, emphasizing the importance of detailed code and documentation examination.",
          "duration": 7,
          "videoUrl": "QgQHaeCjJDS6PKo00uV7iOCCKGwtx02fhXcQCarJbXVOM",
          "rawMarkdownUrl": "/routes/advanced-foundry/6-security/2-what-is/+page.md",
          "markdownContent": "***\n\n## title: What is a Smart Contract Audit?\n\n*Follow along with this video.*\n\n***\n\nWhen it comes to understanding the finer details of blockchain technology, smart contract auditing is of paramount importance. This audit is essentially a security-based code review with a specific timeframe laid out for your smart contract system.\n\n## What is a Smart Contract Audit?\n\n<img src=\"/auditing-intro/2-whatis/whatis1.png\" alt=\"Auditing Image\" style=\"width: 100%; height: auto;\">\n\nThe principal goal of an auditor, in this case, is to discover as much vulnerabilities as possible, while also educating the protocol about security best practices and proficient coding techniques. This complex process involves a combination of manual reviews and automated tools for finding these vulnerabilities.\n\n## Why is a Smart Contract Audit So Essential?\n\nHaving a better understanding of why a smart contract audit is a critical part of launching your code base onto a live blockchain will highlight its importance.\n\n### Vulnerability to Hacks\n\nThere are countless websites that catalog the number of hacks that occur in blockchain environments, highlighting its vulnerability. In the past year alone, almost $4 billion was stolen from smart contracts, making it the year with the highest stolen value from these contracts.\n\nThis alarming statistic underscores the importance of a meticulous smart contract audit. Once a smart contract is deployed, it cannot be altered or modified - therefore, getting it correct in its initial phase is crucial.\n\n### Adversarial Potential\n\nA blockchain is traditionally a permissionless adversarial environment. Your protocol must be prepared to encounter and deal with malicious users. An audit can equip your developer's team with improved understanding and proficiency in code, consequently increasing their efficiency and effectiveness in implementing the required features.\n\nMoreover, a single smart contract audit might not suffice considering the rapidly evolving nature of the digital space. Your protocol should ideally embark on a comprehensive security journey that comprises multiple audits, formal verification, competitive audits, and bug bounty programs. We'll explore these aspects in greater breadth in future blogs.\n\n## Audit Service Providers\n\nSeveral companies offer smart contract auditing services. These include but are not limited to: Trail of Bits, Consensys Diligence, OpenZeppelin, Sigma Prime, SpiritDAO, MixBytes, WatchPug Trust, and, of course, [Cyfrin](https://www.cyfrin.io/) . Additionally, a host of independent auditors also provide high-quality audit services.\n\n## What Does a Typical Audit Look Like?\n\nLet's dive into a typical audit process to understand how it generally plays out.\n\n* ***Price and Timeline:*** An audit begins with figuring out the price and timeline. Protocol needs to contact auditors and discuss how long the audit will take based on scope and code complexity. Ideally, they should reach out before their code is finished to ensure the auditors have sufficient time to schedule them in.\n* ***Commit Hash and Down Payment:*** Once the timeline and price are established, the protocol finalizes a start date and a final price based on a commit hash, which is a unique ID of the code base. Some auditors may request a down payment to schedule the audit.\n* ***Audit commencement:*** The auditors deploy every tool in their arsenal to unearth as many vulnerabilities in the code as possible.\n* ***Initial report submission:*** After the audit duration ends, auditors hand in an initial report that outlines their findings based on severity. These will be divided into High, Medium, and Low alongside Informational, Non-critical, and Gas efficiencies.\n* ***Mitigation commencement:*** Post receipt of the initial report, the protocol's team has a fixed time to fix the vulnerabilities found in the initial report.\n* ***Final report submission:*** The final stage entails the audit team performing a final audit exclusively on the fixes made to tackle the issues highlighted in the initial report.\n\n## Ensuring a Successful Audit\n\nThere are a few key actions that can ensure your audit is as successful as possible:\n\n1. Clear documentation\n2. A robust test suite\n3. Commented and readable code\n4. Adherence to modern best practices\n5. An established communication channel between developers and auditors\n6. An initial video walkthrough of the code before the audit begins.\n\n### The Importance of Collaboration\n\nTo get the best results, consider yourself and your auditors as a team. Ensure a smooth flow of communication between the developers and auditors right from the audit commencement. This way, auditors get a thorough understanding of the code, equipping them to better diagnose any vulnerabilities.\n\n### Post Audit Considerations\n\nOnce your audit concludes, your work isn't done. Be sure to take the recommendations from your audit seriously, and remember that any change to your code base after the audit introduces unaudited code.\n\n## What an Audit Isn't\n\nAn audit doesn't mean that your code is bug-free. An audit is a collaborative process between the protocol and the auditor to find vulnerabilities. It is essential to treat each audit as part of a continuous and evolving process - and be prepared to take immediate action if a vulnerability is discovered.\n\n## Wrapping Up\n\nIn essence, a smart contract audit is a pivotal security journey that prepares you with best practices and security knowledge to launch your code onto a live blockchain. And of course, if you're searching for auditors, don't hesitate to reach out to the [Cyfrin](https://www.cyfrin.io/) team, and we'd be happy to assist.\n\nStay safe out there, and ke\n",
          "updates": []
        },
        {
          "lessonId": "d548101f-dbfe-4536-8a4e-99752f327be4",
          "number": 3,
          "slug": "top-smart-contract-security-tools",
          "title": "Top security tools",
          "description": "Overview of various security tools used by professionals for smart contract auditing, including their roles and effectiveness.",
          "duration": 12,
          "videoUrl": "pDVCqjk6aPdojcQgcmGCI25AqCP37d9LtbfZjfX8jpc",
          "rawMarkdownUrl": "/routes/advanced-foundry/6-security/3-top-tools/+page.md",
          "markdownContent": "***\n\n## title: Top Tools used by Security Professionals\n\n*Follow along with this video.*\n\n***\n\nWelcome back! Now that you have a basic understanding of what a smart contract audit involves, let's take a deep dive into the auditing process employed by security professionals. More specifically, the tools they leverage, their relevance to protocol developers, and why early-stage security awareness is paramount.\n\n## Importance of Security Tools for Smart Contract Developers\n\nAs a smart contract developer, it is crucial to familiarize yourself with the entire toolkit used in audits. It will make sense to employ these tools even before seeking a professional audit just to streamline the process. Remember: the code base you launch is your responsibility and it is important not to wait until the end to think about security. Instead, your code's safety must be built into the architecture from the onset.\n\nLet's take the analogy of a car race. If you build a dysfunctional car and decide to jump on the racetrack, you'll find out that you should have started over. Using time to audit a fundamentally flawed system is therefore not productive. To avoid such situations, smart contract developers have useful tools that can help provide guidance. [Solcurity](https://github.com/transmissions11/solcurity), for instance, offers security and code quality standards for solidity smart contracts and then there's the [simple security toolkit](https://github.com/nascentxyz/simple-security-toolkit) from Nascentxyz, a valuable resource to consult pre-audit.\n\n## The Smart Contract Audit Process\n\nThe audit process is rather complex with no one-size-fits-all solution. However, typical smart contract audits involve a mix of manual reviews and tool-based evaluations. A multitude of tools exist to ensure code security, but manual review remains arguably the most vital.\n\n### The Power of Manual Review\n\nManual review primarily involves going through the code line by line and verifying the code's functionality against documentation. It's unsurprising that the developer community often jokes about the gains that 15 minutes of documentation reading could yield. The first step usually involves understanding the protocol's supposed function, given the majority of bugs encountered are more related to business logic than technical errors.\n\n<img src=\"/auditing-intro/3-tools/tools1.png\" alt=\"Auditing Image\" style=\"width: 100%; height: auto;\">\n\nThis statement couldn't be truer here. The more code and documentation you read, the better equipped you will be to spot bugs and errors.\n\nFor example, consider a simple contract with a 'set number' function. While the code might compile and deploy successfully, reading the corresponding documentation may reveal the intended function is to set a number to a 'new number'. It's only through understanding this that you'll realize setting it to 'new number + 1' is incorrect. Not a code error, but a business logic error, which is just as significant.\n\n### The Investigative Tools Used in Audits\n\nBesides manual review, several tools come in handy during the auditing process. These include:\n\n1. **Test Suites**: The primary line of defense that highlights potential vulnerabilities during testing. Most popular frameworks integrate test suites, and their importance has been extensively discussed in this course.\n2. **Static Analysis**: Helps in automatically detecting code issues without running any code. Typically, such tools search for specific keyword patterns for potential issues.\n3. **Fuzz Testing**: An approach that involves feeding random data as inputs during testing to unearth bugs that might go undetected during regular testing.\n4. **Stateful Fuzz Testing**: A more complex version of fuzz testing, already covered in this course.\n5. **Differential Testing**: Although not a keen focus area for this course, it involves writing the same code multiple times, and comparing them for discrepancies.\n6. **Formal Verification**: This is a mathematical proof-based code verification methodology to establish the correctness of hardware or software.\n\n#### Formal Verification through Symbolic Execution\n\nFormal verification might seem slightly confusing initially, but think of it as converting solidity code into mathematical expressions that can easily prove or disprove the code's operation. Symbolic execution is a typical method of formal verification. It attracts contrasting preferences within the development community due to its time-intensive nature, with many players choosing to skip it. Although not a direct indicator of error-free code, it becomes crucial when dealing with math and computationally heavy processes.\n\n#### The Role of AI in Smart Contract Audits\n\nAI-supported tools are a work in progress in the industry. While sometimes they prove to be vital additions to the toolset, other times they disappoint significantly.\n\n## Unpacking the Audit Process with Real Code Samples\n\nTo grasp this better, consider the following snippets from the Denver Security Rep (a codebase associated with this course) :\n\n1. **Manual Review**: Code that does math incorrectly—identified by direct comparison with documentation.\n2. **Testing**: A function supposed to set a number but adds one to it—discovered with simple unit testing.\n3. **Static Analysis**: A sample reentrancy attack detected automatically by running [Slither](https://github.com/crytic/slither).\n4. **Fuzz Testing**: Failure to maintain variable value within defined bounds—picked up by random data input testing.\n5. **Symbolic Execution**: Use of solidity compiler to check for issues by triggering different code paths, and understanding their outcomes.\n\n## Wrapping Things Up with Expert Insights\n\nTo help us better understand manual reviews, we're fortunate to have Tincho, a distinguished Ethereum smart contract researcher. Tincho, through his manual review technique, discovered a critical vulnerability in the Ethereum Name Service (ENS) that earned him a $100,000 payout. His insights will undoubtedly be valuable as you navigate your journey in smart contract auditing.\n\nThat was it for this lesson, keep learning and happy auditing!\n\n<img src=\"/auditing-intro/2-whatis/whatis1.png\" alt=\"Auditing Image\" style=\"width: 100%; height: auto;\">\n",
          "updates": []
        },
        {
          "lessonId": "f1c18671-11d8-4bd8-b206-bb0557e09751",
          "number": 4,
          "slug": "smart-contract-manual-review",
          "title": "Introduction to manual review",
          "description": "Insights into the manual review process in smart contract auditing, emphasizing the importance of detailed code and documentation examination.",
          "duration": 14,
          "videoUrl": "fL00Wb4rLbCenx029G1PKkgjvwFMTyv2mtffZIdVEIHVU",
          "rawMarkdownUrl": "/routes/advanced-foundry/6-security/4-manual-review/+page.md",
          "markdownContent": "***\n\n## title: Manual Review\n\n*Follow along with this video.*\n\n***\n\n# Step-By-Step Guide: How to Audit DeFi with Tincho\n\nThis blog post is a detailed reflection of an interview with Tincho, an Ethereum security researcher, a former lead auditor at Openzeppelin, and the creator of Damn Vulnerable DeFi. His vast expertise in DeFi auditing makes him a wealth of knowledge for anyone interested in Ethereum or blockchain security.\n\n## Embracing the Audit Process\n\nThis is Tincho, an Ethereum security researcher and creator of Damn Vulnerable DeFi. In today's blog post, we are going to discuss the auditing process in detail. Now, it's crucial to understand that auditing does not necessarily have a 'one-size-fits-all\" approach. We all have our own ways of making things work and what I'll lay out in this blog post are my go-to strategies. Without further ado, let's take a dive into the world of Defi auditing.\n\n## Getting Started: Exploring Repositories and Reading Documentations\n\nTo begin with, you need to have a clear understanding of what you're dealing with. Hence, we'll pick the Ethereum Name Service (ENS) GitHub repository for a mock auditing in this blog post.\n\nHere's what I recommend:\n\n* **Clone-The-Repo-First**: Fork the repository to your local development environment.\n* **Visit The Documentation**: Understanding the architecture of what you're reviewing is key. Familiarize yourself with the terms and the concepts used.\n\n<img src=\"/auditing-intro/4-review/review1.png\" alt=\"Auditing Image\" style=\"width: 100%; height: auto;\">\n\n## Reviewing Audit Reports and Setting Command Line Utility\n\n*Auditing ENS's GitHub Repository*\n\nHaving looked at the documentation and the architecture, let's go back to auditing the ENS's repository on GitHub. Note that the repository contains multiple contracts and ENS uses hardhat for development. Although I prefer projects that use foundry over hardhat, it would not be an impediment for auditing.\n\nTo acknowledge the complexity of the code, you need to count the lines of code. For this, I usually use a command-line utility called *Clock* and save the output in the form of a CSV which is later fed into the spreadsheet.\n\n**Solidity Metrics**: Another tool to scope the complexity of a file is 'Solidity Metrics' developed by Consensus. You can run this on your project and it will provide you with a detailed report of the levels of complexity.\n\n<img src=\"/auditing-intro/4-review/review2.png\" alt=\"Auditing Image\" style=\"width: 100%; height: auto;\">\n\n## Organizing Audit Process and Taking Notes\n\nAs a part of your audit process, prioritize the contracts according to their complexity using tools like solidity metrics or clock. Move your contracts from the 'Not Started' phase to 'In Progress' and then 'Completed'. This aids tremendously in keeping the audit process on track, especially when working in teams.\n\nWhile auditing, you might need to dive deep into certain aspects of the system and it is important to take notes of your observations. Whether you take notes in the code, a news file or a note-taking plugin, it helps in keeping track of your thoughts.\n\n<img src=\"/auditing-intro/4-review/review3.png\" alt=\"Auditing Image\" style=\"width: 100%; height: auto;\">\n\nAn auditor needs to continuously brainstorm about potential breaches and weak points. Often this process won't follow a fixed path and will be influenced by the auditor's own experience and knowledge. This includes keeping in mind the different forms of attacks, identifying quickly anything that's out of place, and reading others' vulnerability reports.\n\n## Understanding the Testing Environment and The Importance of Communication\n\nIt's significant to realize that you might need to test things during the audit. For complex setups, you might have to adapt to the actual testing environment of the project. Additionally, communication with your clients is key. They understand the intent of the system better than anyone. Seek help when in doubt but also maintain a degree of detachment as you are the expert they are counting on.\n\nOnce the client reassures you that the issues have been fixed, review those fixes to make sure no new bugs have been introduced. Concurrently, prepare your audit report clearly mentioning all your findings and observations.\n\n<img src=\"/auditing-intro/4-review/review4.png\" alt=\"Auditing Image\" style=\"width: 100%; height: auto;\">\n\n## Beware of the 'Perfect Auditor' Fallacy\n\nRemember, no auditor is perfect and can claim to find every vulnerability. It's the collective responsibility of the client and the auditor to ensure code security. It's absolutely normal for some vulnerabilities to be missed. However, that doesn't mean you take your job lightly. Stay diligent in your task and keep growing your skills.\n\n<img src=\"/auditing-intro/4-review/review5.png\" alt=\"Auditing Image\" style=\"width: 100%; height: auto;\">\n\nIf despite your best efforts, an audit fails and your client's code gets hacked, remember it isn't entirely your fault. The blame should be shared by both parties. As an auditor, your role is to provide a valuable security code review, irrespective of whether you find a critical issue.\n\nAnd that sums up our auditing journey. Thank you for accompanying me on this. I hope it has been enriching for you and will aid you in your auditing adventures. Until next time!\n\n[Link to the full interview](https://www.youtube.com/watch?v=bYdiF06SLWc\\&t=0s)\n\nThat was it for this lesson, we hope you enjoyed it! Happy learning!\n",
          "updates": []
        },
        {
          "lessonId": "31ed03ef-dbe7-4341-b314-27b6db4bcc4d",
          "number": 5,
          "slug": "formal-verification",
          "title": "Introduction to formal verification",
          "description": "Exploration of formal verification and symbolic execution in Web3, including their applications and limitations in security testing.",
          "duration": 15,
          "videoUrl": "x5X00U2CIg39S01dW67zgq1Tz9Hq9p9mZYuMVTYA4kk5A",
          "rawMarkdownUrl": "/routes/advanced-foundry/6-security/5-formal-verification/+page.md",
          "markdownContent": "***\n\n## title: Formal Verification\n\n*Follow along with this video.*\n\n***\n\n# Understanding Symbolic Execution and Formal Verification in Web3\n\nSo you're interested in enhancing your security testing toolkit with symbolic execution and formal verification? You've come to the right place. In this post, we're going to break down these complex concepts and equip you with the knowledge to begin incorporating them into your security audits.\n\nThis post has been inspired by valuable contributions from [the Trail of Bits team](https://www.trailofbits.com/) - renowned for their expertise in this domain. Thanks to them, we'll be able to delve into the nuances of symbolic execution and formal verification.\n\nSounds exciting? Let's jump in!\n\n## Deepening Your Understanding of Testing Methodologies\n\nBefore we advance to the heart of the matter - symbolic execution and formal verification - let's review the testing methodologies we use in Web3 development. To understand what follows, you'll need a high-level understanding of Solidity and some familiarity with foundational testing approaches like unit testing and fuzzing testing.\n\n### Unit Testing\n\nUnit testing forms the first layer of our testing \"onion.\" It's a method where you test a specific \"unit\" (like a function) to ensure it performs as expected. In other words, unit testing involves checking whether a function does what it should. But you already knew that, right? we have coded together a lot of tests in the previous videos.\n\nA unit test can catch bugs in the execution of this function. When using Solidity testing frameworks like [Foundry](https://github.com/foundry-rs/foundry).\n\n### Fuzz Testing\n\n<img src=\"/auditing-intro/5-formal/formal2.png\" alt=\"Auditing Image\" style=\"width: 100%; height: auto;\">\n\nFuzz testing serves as the second layer. In essence, fuzzing is the process of running your program with a range of random inputs to see if it breaks. Here, you need to define your code's invariants - the properties you expect to be true regardless of the program's state.\n\nLet's consider a function that should never return zero. We can create a fuzz test that throws a bunch of random numbers at the function to try to make it return zero.\n\nThe fuzz test tries to break our property by passing in random numbers. If it finds something that causes the function to return zero, it means we have an edge case that needs to be addressed.\n\n### Static Analysis\n\nThe third layer of our testing onion is Static Analysis. Unlike fuzz and unit testing, static analysis doesn't involve running the code. Instead, it involves inspecting the code as-is, checking for known vulnerabilities.\n\nStatic analysis tools can be valuable for rapidly identifying sections of your code that employ bad practices. Besides Slither, the Solidity compiler itself can serve as a static analysis tool.\n\nNow that we have some background on essential testing methodologies, let's delve into formal verification and symbolic execution.\n\n## Formal Verification & Symbolic Execution\n\nOur exploration starts with formal verification - the process of proving or disproving a system property using mathematical models. Various techniques exist for this, including symbolic execution and abstract interpretation. We'll be focusing on symbolic execution.\n\n### Symbolic Execution Demystified\n\n<img src=\"/auditing-intro/5-formal/formal1.png\" alt=\"Auditing Image\" style=\"width: 100%; height: auto;\">\n\nSymbolic execution is a technique wherein you explore the different paths your program can take and create a mathematical representation for each path.\n\nConsider a function we want to verify using symbolic execution. First, we need to identify the invariant - what we want to prove or disprove about the function. For our needs, let's say our invariant is: this function should never revert.\n\n## The Limitations\n\nWhile symbolic execution is powerful, it's not a magic bullet. It can struggle with a 'path explosion' problem, where there are too many paths for the tool to explore in a reasonable timeframe.\n\nAdditionally, symbolic execution requires a deep understanding to use effectively and maintain. This often results in a high skill requirement. However, a sufficiently powerful fuzzer may be adequate for many requirements.\n\nSo, there we have it! From unit testing to symbolic execution, we've stepped through the necessary layers to fortify your coding practices. Continue to ask questions, explore, and keep coding safely!\n\n## Wrapping Up\n\nI hope you enjoyed this post and found it useful. If you're interested in learning more about security testing, check out the [Trail of Bits blog](https://blog.trailofbits.com/). They have a ton of great content on this topic.\n\nWe are to close to finishing this course. In the next video, we will be looking at the final topic of this course, a huge huge huge congratulations for making it this far!\n",
          "updates": []
        },
        {
          "lessonId": "9ec6f023-3e4a-4922-a97d-e9c1cdca6daf",
          "number": 6,
          "slug": "congratulations",
          "title": "Congratulations",
          "description": "Celebratory conclusion of the course, highlighting key resources and tools for continued learning in smart contract security.",
          "duration": 5,
          "videoUrl": "QA01qJgFupgZeQc0201q3P9UHA00gUZuBq1jO7myGb1r8k4",
          "rawMarkdownUrl": "/routes/advanced-foundry/6-security/6-congratulations/+page.md",
          "markdownContent": "***\n\n## title: Congratulations\n\n*Follow along with this video.*\n\n***\n\n# Becoming a Smart Contract Security Wizard: What’s Next After Your First Big Course\n\nWelcome back, this is the end of our journey together, at least for this course. We hope you've enjoyed it and learned a lot. We've covered a lot of ground, and you should be proud of yourself for making it this far. Now, let's take a look at some nice tools and resources that will help you continue your journey.\n\n## Resources That Cannot Be Missed\n\nContinuing your journey through security education and fine-tuning those skills you just acquired is also essential:\n\n* [Damn Vulnerable DeFi](https://www.damnvulnerabledefi.xyz/), crafted by a developer named Tincho, is a fascinating game that draws you right into the heart of offensive security in Ethereum’s smart contracts.\n* A kinetically engaging way of learning, [Ethernaut](https://ethernaut.openzeppelin.com/) offers an immersive game-like environment perfect for understanding Solidity and smart contract vulnerabilities.\n\n<img src=\"/auditing-intro/6-end/end1.png\" alt=\"Auditing Image\" style=\"width: 100%; height: auto;\">\n\n## For The Aesthetes: Insights into Smart Contract Auditing\n\nOne vital aspect of this space is auditing. If you're looking to be an auditor, [Solidit](https://solodit.xyz/) is an excellent tool for accessing audit reports from the most accomplished smart contract security professionals in the industry. Here at [Cyfrin](https://www.cyfrin.io/), we do smart contract security and auditing too, so don't hesitate to reach out.\n\n## Sharpen Your Saw: Further Learning and Opportunities\n\nAlthough we have dipped quite deep into the iceberg that is security in this course, you must understand that there's still so much more to explore, and we're working on providing further security-based education, so stay tuned. However, to kick things off in your advanced security journey.\n\nThis marks the end of the security lesson, but not of your journey. Now that you're armed with deep insights into the Web Three developer space, it might seem daunting to contemplate your next move. No worries though; here's the answer: apply your new knowledge. Whether you're joining a hackathon, delving into GitHub repos, or applying for jobs and grants, it's critical to utilize and develop your skills.\n\n***\n\nThanks to all who took the course and contributed to its creation. It's been a thrill to share this journey, and the excitement continues as we watch you dive in, continue your learning, and march forward, building on the cutting-edge technology our field offers. We look forward to seeing you in the Web Three and blockchain community and can’t wait to admire the wonderful things you build. Until then, happy coding!\n\nBye!\n",
          "updates": []
        }
      ]
    }
  ]
}